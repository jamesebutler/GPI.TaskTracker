
Partial Class Popups_EditComments
    Inherits IP.Bids.BasePage
    Private taskNumber As String
    Private taskHeaderNumber As String
    Private taskHeader As TaskHeaderBll
    Private Sub Popups_EditComments_Load(sender As Object, e As EventArgs) Handles Me.Load
        If QuerystringIsValid() = False Then Exit Sub
        taskHeader = New TaskHeaderBll(CInt(taskHeaderNumber))
        With _Comments
            .taskHeaderNumber = taskHeaderNumber
            .taskNumber = taskNumber
        End With
        If Not Page.IsPostBack Then
            _Comments.LoadComments()
        End If
    End Sub

    'Public Sub PopulateComments()
    '    Dim taskItemBll As New TaskTrackerItemBll
    '    Dim comments As System.Collections.Generic.List(Of TaskItemComments) = taskItemBll.GetTaskItemCommentsList(CInt(taskNumber))
    '    With Me._gvComments
    '        .AutoGenerateEditButton = False
    '        .AutoGenerateDeleteButton = False
    '        .AutoGenerateSelectButton = False
    '        .DataSource = comments
    '        .DataBind()
    '    End With
    'End Sub

    Private Function QuerystringIsValid() As Boolean
        taskNumber = Request.QueryString("TaskNumber")
        If taskNumber Is Nothing Then
            Throw New ApplicationException("A valid Task number is required")
        End If
        If Not IsNumeric(taskNumber) Then
            Throw New ApplicationException("A valid Task number is required")
        End If
        taskHeaderNumber = Request.QueryString("HeaderNumber")
        If taskHeaderNumber Is Nothing Then
            Throw New ApplicationException("A valid header number is required")
        End If
        If Not IsNumeric(taskHeaderNumber) Then
            Throw New ApplicationException("A valid header number is required")
        End If
        Return True
    End Function

    'Private Sub Comments_RowDataBound(sender As Object, e As GridViewRowEventArgs) Handles _gvComments.RowDataBound
    '    If e.Row.RowType = DataControlRowType.DataRow Then
    '        Dim btnEdit = TryCast(e.Row.FindControl("_btnEditComment"), Button)
    '        Dim btnDelete = TryCast(e.Row.FindControl("_btnDeleteComment"), Button)
    '        Dim btnUpdate = TryCast(e.Row.FindControl("_btnUpdateComment"), Button)
    '        Dim btnCancel = TryCast(e.Row.FindControl("_btnCancelUpdate"), Button)
    '        Dim commentData As TaskItemComments = TryCast(e.Row.DataItem, TaskItemComments)

    '        If commentData IsNot Nothing Then
    '            If DoesUserHaveEditAccess(commentData.CreatedBy) Then
    '                btnEdit.Enabled = True
    '                btnEdit.CommandArgument = e.Row.RowIndex
    '                btnDelete.Enabled = True
    '                btnDelete.CommandArgument = e.Row.RowIndex
    '                btnUpdate.CommandArgument = e.Row.RowIndex
    '                btnUpdate.Enabled = True
    '                btnCancel.CommandArgument = e.Row.RowIndex
    '                btnCancel.Enabled = True
    '            End If
    '        End If
    '        btnUpdate.Visible = False
    '        btnEdit.Visible = True
    '        btnDelete.Visible = True
    '        btnCancel.Visible = False
    '        If e.Row.RowState = DataControlRowState.Edit OrElse e.Row.RowIndex = _gvComments.EditIndex Then
    '            btnUpdate.Visible = True
    '            btnCancel.Visible = True
    '            btnEdit.Visible = False
    '            btnDelete.Visible = False
    '        End If
    '    End If
    'End Sub


    'Protected Sub DeleteComment_Click(sender As Object, e As EventArgs)
    '    PopulateComments()
    '    Dim deleteButton As Button = TryCast(sender, Button)
    '    Dim taskItemBll As New TaskTrackerItemBll
    '    Dim commentData As TaskItemComments = TryCast(_gvComments.Rows.Item(deleteButton.CommandArgument).DataItem, TaskItemComments)
    '    taskItemBll.DeleteTaskItemComment(commentData)
    'End Sub

    'Protected Sub EditComment(ByVal sender As Object, ByVal e As System.EventArgs)
    '    Dim editComment As Button = TryCast(sender, Button)
    '    _gvComments.EditIndex = editComment.CommandArgument
    '    PopulateComments()
    'End Sub

    'Protected Sub UpdateComment(ByVal sender As Object, ByVal e As System.EventArgs)
    '    Dim deleteButton As Button = TryCast(sender, Button)
    '    _gvComments.EditIndex = deleteButton.CommandArgument
    '    PopulateComments()
    'End Sub

    'Private Function DoesUserHaveEditAccess(ByVal commentCreator As String) As Boolean
    '    Dim myRoles As System.Collections.Generic.List(Of UserRoles) = GeneralTaskTrackerBll.GetUserRoles(IP.Bids.SharedFunctions.GetCurrentUser.Username)
    '    Dim editAccess As Boolean

    '    For Each role As UserRoles In myRoles
    '        If role.RoleName.ToUpper = "FACILITYADMIN" AndAlso role.PlantCode = taskHeader.CurrentTaskHeaderRecord.PlantCode Then
    '            editAccess = True
    '            Exit For
    '        ElseIf role.RoleName.ToUpper = "SUPPORT" Then
    '            editAccess = True
    '            Exit For
    '        End If
    '    Next


    '    If commentCreator.ToUpper = IP.Bids.SharedFunctions.GetCurrentUser.Username.ToUpper Then
    '        editAccess = True
    '    End If
    '    Return editAccess
    'End Function

    'Private Sub _gvComments_RowEditing(sender As Object, e As GridViewEditEventArgs) Handles _gvComments.RowEditing
    '    ' Dim editComment As Button = TryCast(sender, Button)
    '    _gvComments.EditIndex = e.NewEditIndex
    '    PopulateComments()
    'End Sub

    'Private Sub Comments_RowUpdating(sender As Object, e As GridViewUpdateEventArgs) Handles _gvComments.RowUpdating
    '    Dim commentData As New TaskItemComments()
    '    commentData.CommentsSeqId = e.Keys(0)
    '    commentData.Comments = e.NewValues.Item("Comments")
    '    commentData.Username = IP.Bids.SharedFunctions.GetCurrentUser.Username.ToUpper
    '    Dim taskItemBll As New TaskTrackerItemBll
    '    taskItemBll.UpdateTaskItemComment(commentData)
    '    _gvComments.EditIndex = -1
    '    PopulateComments()
    'End Sub

    'Private Sub Comments_RowDeleting(sender As Object, e As GridViewDeleteEventArgs) Handles _gvComments.RowDeleting
    '    Dim commentData As New TaskItemComments()
    '    commentData.CommentsSeqId = e.Keys(0)
    '    commentData.Username = IP.Bids.SharedFunctions.GetCurrentUser.Username.ToUpper
    '    Dim taskItemBll As New TaskTrackerItemBll
    '    taskItemBll.DeleteTaskItemComment(commentData)
    '    _gvComments.EditIndex = -1
    '    PopulateComments()
    'End Sub

    'Private Sub _gvComments_RowCancelingEdit(sender As Object, e As GridViewCancelEditEventArgs) Handles _gvComments.RowCancelingEdit
    '    _gvComments.EditIndex = -1
    '    PopulateComments()
    'End Sub
End Class
