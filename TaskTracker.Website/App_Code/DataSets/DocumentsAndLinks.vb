'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3625
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Devart.Data.Oracle


'
'This source code was auto-generated by xsd, Version=2.0.50727.42.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
 Global.System.Serializable(), _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
 Global.System.ComponentModel.ToolboxItem(True), _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
 Global.System.Xml.Serialization.XmlRootAttribute("DocumentsAndLinksDAL"), _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
Partial Public Class DocumentsAndLinksDAL
    Inherits Global.System.Data.DataSet

    Private tableDocumentsAndLinks As DocumentsAndLinksDataTable

    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DocumentsAndLinks")) Is Nothing) Then
                MyBase.Tables.Add(New DocumentsAndLinksDataTable(ds.Tables("DocumentsAndLinks")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property DocumentsAndLinks() As DocumentsAndLinksDataTable
        Get
            Return Me.tableDocumentsAndLinks
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.BrowsableAttribute(True), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(value As Global.System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DocumentsAndLinksDAL = CType(MyBase.Clone, DocumentsAndLinksDAL)
        cln.InitVars()
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DocumentsAndLinks")) Is Nothing) Then
                MyBase.Tables.Add(New DocumentsAndLinksDataTable(ds.Tables("DocumentsAndLinks")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDocumentsAndLinks = CType(MyBase.Tables("DocumentsAndLinks"), DocumentsAndLinksDataTable)
        If (initTable = True) Then
            If (Not (Me.tableDocumentsAndLinks) Is Nothing) Then
                Me.tableDocumentsAndLinks.InitVars()
            End If
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
        Me.DataSetName = "DocumentsAndLinksDAL"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DocumentsAndLinks.xsd"
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDocumentsAndLinks = New DocumentsAndLinksDataTable
        MyBase.Tables.Add(Me.tableDocumentsAndLinks)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeDocumentsAndLinks() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DocumentsAndLinksDAL = New DocumentsAndLinksDAL
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close()
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close()
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function

    Public Delegate Sub DocumentsAndLinksRowChangeEventHandler(ByVal sender As Object, ByVal e As DocumentsAndLinksRowChangeEvent)

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class DocumentsAndLinksDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnTASKHEADERSEQID As Global.System.Data.DataColumn

        Private columnFILENAME As Global.System.Data.DataColumn

        Private columnLOCATION As Global.System.Data.DataColumn

        Private columnDESCRIPTION As Global.System.Data.DataColumn

        Private columnTASKDOCUMENTSEQID As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "DocumentsAndLinks"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TASKHEADERSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKHEADERSEQID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property FILENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFILENAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LOCATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOCATION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TASKDOCUMENTSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKDOCUMENTSEQID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As DocumentsAndLinksRow
            Get
                Return CType(Me.Rows(index), DocumentsAndLinksRow)
            End Get
        End Property

        Public Event DocumentsAndLinksRowChanging As DocumentsAndLinksRowChangeEventHandler

        Public Event DocumentsAndLinksRowChanged As DocumentsAndLinksRowChangeEventHandler

        Public Event DocumentsAndLinksRowDeleting As DocumentsAndLinksRowChangeEventHandler

        Public Event DocumentsAndLinksRowDeleted As DocumentsAndLinksRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddDocumentsAndLinksRow(ByVal row As DocumentsAndLinksRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddDocumentsAndLinksRow(ByVal TASKHEADERSEQID As Integer, ByVal FILENAME As String, ByVal LOCATION As String, ByVal DESCRIPTION As String, ByVal TASKDOCUMENTSEQID As Integer) As DocumentsAndLinksRow
            Dim rowDocumentsAndLinksRow As DocumentsAndLinksRow = CType(Me.NewRow, DocumentsAndLinksRow)
            Dim columnValuesArray() As Object = New Object() {TASKHEADERSEQID, FILENAME, LOCATION, DESCRIPTION, TASKDOCUMENTSEQID}
            rowDocumentsAndLinksRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDocumentsAndLinksRow)
            Return rowDocumentsAndLinksRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DocumentsAndLinksDataTable = CType(MyBase.Clone, DocumentsAndLinksDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DocumentsAndLinksDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnTASKHEADERSEQID = MyBase.Columns("TASKHEADERSEQID")
            Me.columnFILENAME = MyBase.Columns("FILENAME")
            Me.columnLOCATION = MyBase.Columns("LOCATION")
            Me.columnDESCRIPTION = MyBase.Columns("DESCRIPTION")
            Me.columnTASKDOCUMENTSEQID = MyBase.Columns("TASKDOCUMENTSEQID")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnTASKHEADERSEQID = New Global.System.Data.DataColumn("TASKHEADERSEQID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKHEADERSEQID)
            Me.columnFILENAME = New Global.System.Data.DataColumn("FILENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFILENAME)
            Me.columnLOCATION = New Global.System.Data.DataColumn("LOCATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOCATION)
            Me.columnDESCRIPTION = New Global.System.Data.DataColumn("DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTION)
            Me.columnTASKDOCUMENTSEQID = New Global.System.Data.DataColumn("TASKDOCUMENTSEQID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKDOCUMENTSEQID)
            Me.columnFILENAME.MaxLength = 2000
            Me.columnLOCATION.MaxLength = 2000
            Me.columnDESCRIPTION.MaxLength = 2000
            Me.columnTASKDOCUMENTSEQID.DefaultValue = CType(-1, Integer)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewDocumentsAndLinksRow() As DocumentsAndLinksRow
            Return CType(Me.NewRow, DocumentsAndLinksRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DocumentsAndLinksRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DocumentsAndLinksRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DocumentsAndLinksRowChangedEvent) Is Nothing) Then
                RaiseEvent DocumentsAndLinksRowChanged(Me, New DocumentsAndLinksRowChangeEvent(CType(e.Row, DocumentsAndLinksRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DocumentsAndLinksRowChangingEvent) Is Nothing) Then
                RaiseEvent DocumentsAndLinksRowChanging(Me, New DocumentsAndLinksRowChangeEvent(CType(e.Row, DocumentsAndLinksRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DocumentsAndLinksRowDeletedEvent) Is Nothing) Then
                RaiseEvent DocumentsAndLinksRowDeleted(Me, New DocumentsAndLinksRowChangeEvent(CType(e.Row, DocumentsAndLinksRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DocumentsAndLinksRowDeletingEvent) Is Nothing) Then
                RaiseEvent DocumentsAndLinksRowDeleting(Me, New DocumentsAndLinksRowChangeEvent(CType(e.Row, DocumentsAndLinksRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveDocumentsAndLinksRow(ByVal row As DocumentsAndLinksRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DocumentsAndLinksDAL = New DocumentsAndLinksDAL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DocumentsAndLinksDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class DocumentsAndLinksRow
        Inherits Global.System.Data.DataRow

        Private tableDocumentsAndLinks As DocumentsAndLinksDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDocumentsAndLinks = CType(Me.Table, DocumentsAndLinksDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TASKHEADERSEQID() As Integer
            Get
                Try
                    Return CType(Me(Me.tableDocumentsAndLinks.TASKHEADERSEQIDColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TASKHEADERSEQID' in table 'DocumentsAndLinks' is DBNull.", e)
                End Try
            End Get
            Set(value As Integer)
                Me(Me.tableDocumentsAndLinks.TASKHEADERSEQIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property FILENAME() As String
            Get
                If Me.IsFILENAMENull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableDocumentsAndLinks.FILENAMEColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableDocumentsAndLinks.FILENAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property LOCATION() As String
            Get
                If Me.IsLOCATIONNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableDocumentsAndLinks.LOCATIONColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableDocumentsAndLinks.LOCATIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property DESCRIPTION() As String
            Get
                If Me.IsDESCRIPTIONNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableDocumentsAndLinks.DESCRIPTIONColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableDocumentsAndLinks.DESCRIPTIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TASKDOCUMENTSEQID() As Integer
            Get
                Try
                    Return CType(Me(Me.tableDocumentsAndLinks.TASKDOCUMENTSEQIDColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TASKDOCUMENTSEQID' in table 'DocumentsAndLinks' is DBNull.", e)
                End Try
            End Get
            Set(value As Integer)
                Me(Me.tableDocumentsAndLinks.TASKDOCUMENTSEQIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsTASKHEADERSEQIDNull() As Boolean
            Return Me.IsNull(Me.tableDocumentsAndLinks.TASKHEADERSEQIDColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetTASKHEADERSEQIDNull()
            Me(Me.tableDocumentsAndLinks.TASKHEADERSEQIDColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsFILENAMENull() As Boolean
            Return Me.IsNull(Me.tableDocumentsAndLinks.FILENAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetFILENAMENull()
            Me(Me.tableDocumentsAndLinks.FILENAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsLOCATIONNull() As Boolean
            Return Me.IsNull(Me.tableDocumentsAndLinks.LOCATIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetLOCATIONNull()
            Me(Me.tableDocumentsAndLinks.LOCATIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableDocumentsAndLinks.DESCRIPTIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tableDocumentsAndLinks.DESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsTASKDOCUMENTSEQIDNull() As Boolean
            Return Me.IsNull(Me.tableDocumentsAndLinks.TASKDOCUMENTSEQIDColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetTASKDOCUMENTSEQIDNull()
            Me(Me.tableDocumentsAndLinks.TASKDOCUMENTSEQIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class DocumentsAndLinksRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As DocumentsAndLinksRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As DocumentsAndLinksRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As DocumentsAndLinksRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DocumentsAndLinksDALTableAdapters

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class DocumentsAndLinksTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DocumentsAndLinks"
            tableMapping.ColumnMappings.Add("TASKHEADERSEQID", "TASKHEADERSEQID")
            tableMapping.ColumnMappings.Add("FILENAME", "FILENAME")
            tableMapping.ColumnMappings.Add("LOCATION", "LOCATION")
            tableMapping.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION")
            tableMapping.ColumnMappings.Add("TASKDOCUMENTSEQID", "TASKDOCUMENTSEQID")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(2) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTDOCUMENTS.MTTGETDOCUMENTS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_TASKHEADER"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TASKITEM"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSDOCUMENTS"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracleDbType = OracleDbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            Me._commandCollection(1) = New OracleCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "RELADMIN.MTTDOCUMENTS.MTTUPDATEDOCUMENTS"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_DOCUMENTSEQID"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TASKHEADER"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TASKITEM"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_FILENAME"
            param.OracleDbType = OracleDbType.NVarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_LOCATION"
            param.OracleDbType = OracleDbType.NVarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DESCRIPTION"
            param.OracleDbType = OracleDbType.NVarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_USERID"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_ACTION"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = OracleDbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New OracleCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "RELADMIN.MTTDOCUMENTS.MTTUPDATEDOCUMENTS"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_DOCUMENTSEQID"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TASKHEADER"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TASKITEM"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_FILENAME"
            param.OracleDbType = OracleDbType.NVarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_LOCATION"
            param.OracleDbType = OracleDbType.NVarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DESCRIPTION"
            param.OracleDbType = OracleDbType.NVarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_USERID"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_ACTION"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = OracleDbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As DocumentsAndLinksDAL.DocumentsAndLinksDataTable, ByVal IN_TASKHEADER As String, ByVal IN_TASKITEM As String, ByRef RSDOCUMENTS As Object) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_TASKHEADER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TASKHEADER, String)
            End If
            If (IN_TASKITEM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(IN_TASKITEM, String)
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(2).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(2).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSDOCUMENTS = Global.System.DBNull.Value
            Else
                RSDOCUMENTS = CType(Me.Adapter.SelectCommand.Parameters(2).Value, Object)
            End If
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetDocuments(ByVal IN_TASKHEADER As String, ByVal IN_TASKITEM As String, ByRef RSDOCUMENTS As Object) As DocumentsAndLinksDAL.DocumentsAndLinksDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_TASKHEADER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TASKHEADER, String)
            End If
            If (IN_TASKITEM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(IN_TASKITEM, String)
            End If
            Dim dataTable As DocumentsAndLinksDAL.DocumentsAndLinksDataTable = New DocumentsAndLinksDAL.DocumentsAndLinksDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(2).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(2).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSDOCUMENTS = Global.System.DBNull.Value
            Else
                RSDOCUMENTS = CType(Me.Adapter.SelectCommand.Parameters(2).Value, Object)
            End If
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function DeleteDocument(ByVal IN_DOCUMENTSEQID As String, ByVal IN_TASKHEADER As String, ByVal IN_TASKITEM As String, ByVal IN_FILENAME As String, ByVal IN_LOCATION As String, ByVal IN_DESCRIPTION As String, ByVal IN_USERID As String, ByVal IN_ACTION As String, ByRef OUT_STATUS As Decimal) As Object
            Dim command As OracleCommand = Me.CommandCollection(1)
            If (IN_DOCUMENTSEQID Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(IN_DOCUMENTSEQID, String)
            End If
            If (IN_TASKHEADER Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(IN_TASKHEADER, String)
            End If
            If (IN_TASKITEM Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(IN_TASKITEM, String)
            End If
            If (IN_FILENAME Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(IN_FILENAME, String)
            End If
            If (IN_LOCATION Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(IN_LOCATION, String)
            End If
            If (IN_DESCRIPTION Is Nothing) OrElse IN_DESCRIPTION.Length = 0 Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(IN_DESCRIPTION, String)
            End If
            If (IN_USERID Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(IN_USERID, String)
            End If
            If (IN_ACTION Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(IN_ACTION, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((command.Parameters(8).Value Is Nothing) _
                        OrElse (command.Parameters(8).Value.GetType Is GetType(Global.System.DBNull))) Then
                Throw New Global.System.Data.StrongTypingException("The value for parameter 'OUT_STATUS' is DBNull.", Nothing)
            Else
                OUT_STATUS = CType(command.Parameters(8).Value, Decimal)
            End If
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function SaveDocuments(ByVal IN_DOCUMENTSEQID As String, ByVal IN_TASKHEADER As String, ByVal IN_TASKITEM As String, ByVal IN_FILENAME As String, ByVal IN_LOCATION As String, ByVal IN_DESCRIPTION As String, ByVal IN_USERID As String, ByVal IN_ACTION As String, ByRef OUT_STATUS As Decimal) As Object
            Dim command As OracleCommand = Me.CommandCollection(2)
            If (IN_DOCUMENTSEQID Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(IN_DOCUMENTSEQID, String)
            End If
            If (IN_TASKHEADER Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(IN_TASKHEADER, String)
            End If
            If (IN_TASKITEM Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(IN_TASKITEM, String)
            End If
            If (IN_FILENAME Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(IN_FILENAME, String)
            End If
            If (IN_LOCATION Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(IN_LOCATION, String)
            End If
            If (IN_DESCRIPTION Is Nothing) OrElse IN_DESCRIPTION.Length = 0 Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(IN_DESCRIPTION, String)
            End If
            If (IN_USERID Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(IN_USERID, String)
            End If
            If (IN_ACTION Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(IN_ACTION, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((command.Parameters(8).Value Is Nothing) _
                        OrElse (command.Parameters(8).Value.GetType Is GetType(Global.System.DBNull))) Then
                Throw New Global.System.Data.StrongTypingException("The value for parameter 'OUT_STATUS' is DBNull.", Nothing)
            Else
                OUT_STATUS = CType(command.Parameters(8).Value, Decimal)
            End If
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function
    End Class
End Namespace
