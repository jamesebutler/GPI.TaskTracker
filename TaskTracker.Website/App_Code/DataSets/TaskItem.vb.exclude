'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3625
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


'
'This source code was auto-generated by xsd, Version=2.0.50727.42.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("TaskDetail"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class TaskDetail
    Inherits Global.System.Data.DataSet
    
    Private tableResponsibleUser As ResponsibleUserDataTable
    
    Private tableTaskItem As TaskItemDataTable
    
    Private tableRecurringTasks As RecurringTasksDataTable
    
    Private tableSubTask As SubTaskDataTable
    
    Private tableUserDefaults As UserDefaultsDataTable
    
    Private tableRecurringParameters As RecurringParametersDataTable
    
    Private tableRecurringParametersList As RecurringParametersListDataTable
    
    Private tableTaskItemComments As TaskItemCommentsDataTable
    
    Private tableImmediateEmail As ImmediateEmailDataTable
    
    Private tableCriticalDate As CriticalDateDataTable
    
    Private tableMTTBATCHREPLICATION As MTTBATCHREPLICATIONDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ResponsibleUser")) Is Nothing) Then
                MyBase.Tables.Add(New ResponsibleUserDataTable(ds.Tables("ResponsibleUser")))
            End If
            If (Not (ds.Tables("TaskItem")) Is Nothing) Then
                MyBase.Tables.Add(New TaskItemDataTable(ds.Tables("TaskItem")))
            End If
            If (Not (ds.Tables("RecurringTasks")) Is Nothing) Then
                MyBase.Tables.Add(New RecurringTasksDataTable(ds.Tables("RecurringTasks")))
            End If
            If (Not (ds.Tables("SubTask")) Is Nothing) Then
                MyBase.Tables.Add(New SubTaskDataTable(ds.Tables("SubTask")))
            End If
            If (Not (ds.Tables("UserDefaults")) Is Nothing) Then
                MyBase.Tables.Add(New UserDefaultsDataTable(ds.Tables("UserDefaults")))
            End If
            If (Not (ds.Tables("RecurringParameters")) Is Nothing) Then
                MyBase.Tables.Add(New RecurringParametersDataTable(ds.Tables("RecurringParameters")))
            End If
            If (Not (ds.Tables("RecurringParametersList")) Is Nothing) Then
                MyBase.Tables.Add(New RecurringParametersListDataTable(ds.Tables("RecurringParametersList")))
            End If
            If (Not (ds.Tables("TaskItemComments")) Is Nothing) Then
                MyBase.Tables.Add(New TaskItemCommentsDataTable(ds.Tables("TaskItemComments")))
            End If
            If (Not (ds.Tables("ImmediateEmail")) Is Nothing) Then
                MyBase.Tables.Add(New ImmediateEmailDataTable(ds.Tables("ImmediateEmail")))
            End If
            If (Not (ds.Tables("CriticalDate")) Is Nothing) Then
                MyBase.Tables.Add(New CriticalDateDataTable(ds.Tables("CriticalDate")))
            End If
            If (Not (ds.Tables("MTTBATCHREPLICATION")) Is Nothing) Then
                MyBase.Tables.Add(New MTTBATCHREPLICATIONDataTable(ds.Tables("MTTBATCHREPLICATION")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ResponsibleUser() As ResponsibleUserDataTable
        Get
            Return Me.tableResponsibleUser
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TaskItem() As TaskItemDataTable
        Get
            Return Me.tableTaskItem
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RecurringTasks() As RecurringTasksDataTable
        Get
            Return Me.tableRecurringTasks
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SubTask() As SubTaskDataTable
        Get
            Return Me.tableSubTask
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UserDefaults() As UserDefaultsDataTable
        Get
            Return Me.tableUserDefaults
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RecurringParameters() As RecurringParametersDataTable
        Get
            Return Me.tableRecurringParameters
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RecurringParametersList() As RecurringParametersListDataTable
        Get
            Return Me.tableRecurringParametersList
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TaskItemComments() As TaskItemCommentsDataTable
        Get
            Return Me.tableTaskItemComments
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImmediateEmail() As ImmediateEmailDataTable
        Get
            Return Me.tableImmediateEmail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CriticalDate() As CriticalDateDataTable
        Get
            Return Me.tableCriticalDate
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MTTBATCHREPLICATION() As MTTBATCHREPLICATIONDataTable
        Get
            Return Me.tableMTTBATCHREPLICATION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As TaskDetail = CType(MyBase.Clone,TaskDetail)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ResponsibleUser")) Is Nothing) Then
                MyBase.Tables.Add(New ResponsibleUserDataTable(ds.Tables("ResponsibleUser")))
            End If
            If (Not (ds.Tables("TaskItem")) Is Nothing) Then
                MyBase.Tables.Add(New TaskItemDataTable(ds.Tables("TaskItem")))
            End If
            If (Not (ds.Tables("RecurringTasks")) Is Nothing) Then
                MyBase.Tables.Add(New RecurringTasksDataTable(ds.Tables("RecurringTasks")))
            End If
            If (Not (ds.Tables("SubTask")) Is Nothing) Then
                MyBase.Tables.Add(New SubTaskDataTable(ds.Tables("SubTask")))
            End If
            If (Not (ds.Tables("UserDefaults")) Is Nothing) Then
                MyBase.Tables.Add(New UserDefaultsDataTable(ds.Tables("UserDefaults")))
            End If
            If (Not (ds.Tables("RecurringParameters")) Is Nothing) Then
                MyBase.Tables.Add(New RecurringParametersDataTable(ds.Tables("RecurringParameters")))
            End If
            If (Not (ds.Tables("RecurringParametersList")) Is Nothing) Then
                MyBase.Tables.Add(New RecurringParametersListDataTable(ds.Tables("RecurringParametersList")))
            End If
            If (Not (ds.Tables("TaskItemComments")) Is Nothing) Then
                MyBase.Tables.Add(New TaskItemCommentsDataTable(ds.Tables("TaskItemComments")))
            End If
            If (Not (ds.Tables("ImmediateEmail")) Is Nothing) Then
                MyBase.Tables.Add(New ImmediateEmailDataTable(ds.Tables("ImmediateEmail")))
            End If
            If (Not (ds.Tables("CriticalDate")) Is Nothing) Then
                MyBase.Tables.Add(New CriticalDateDataTable(ds.Tables("CriticalDate")))
            End If
            If (Not (ds.Tables("MTTBATCHREPLICATION")) Is Nothing) Then
                MyBase.Tables.Add(New MTTBATCHREPLICATIONDataTable(ds.Tables("MTTBATCHREPLICATION")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableResponsibleUser = CType(MyBase.Tables("ResponsibleUser"),ResponsibleUserDataTable)
        If (initTable = true) Then
            If (Not (Me.tableResponsibleUser) Is Nothing) Then
                Me.tableResponsibleUser.InitVars
            End If
        End If
        Me.tableTaskItem = CType(MyBase.Tables("TaskItem"),TaskItemDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTaskItem) Is Nothing) Then
                Me.tableTaskItem.InitVars
            End If
        End If
        Me.tableRecurringTasks = CType(MyBase.Tables("RecurringTasks"),RecurringTasksDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRecurringTasks) Is Nothing) Then
                Me.tableRecurringTasks.InitVars
            End If
        End If
        Me.tableSubTask = CType(MyBase.Tables("SubTask"),SubTaskDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSubTask) Is Nothing) Then
                Me.tableSubTask.InitVars
            End If
        End If
        Me.tableUserDefaults = CType(MyBase.Tables("UserDefaults"),UserDefaultsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUserDefaults) Is Nothing) Then
                Me.tableUserDefaults.InitVars
            End If
        End If
        Me.tableRecurringParameters = CType(MyBase.Tables("RecurringParameters"),RecurringParametersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRecurringParameters) Is Nothing) Then
                Me.tableRecurringParameters.InitVars
            End If
        End If
        Me.tableRecurringParametersList = CType(MyBase.Tables("RecurringParametersList"),RecurringParametersListDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRecurringParametersList) Is Nothing) Then
                Me.tableRecurringParametersList.InitVars
            End If
        End If
        Me.tableTaskItemComments = CType(MyBase.Tables("TaskItemComments"),TaskItemCommentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTaskItemComments) Is Nothing) Then
                Me.tableTaskItemComments.InitVars
            End If
        End If
        Me.tableImmediateEmail = CType(MyBase.Tables("ImmediateEmail"),ImmediateEmailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableImmediateEmail) Is Nothing) Then
                Me.tableImmediateEmail.InitVars
            End If
        End If
        Me.tableCriticalDate = CType(MyBase.Tables("CriticalDate"),CriticalDateDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCriticalDate) Is Nothing) Then
                Me.tableCriticalDate.InitVars
            End If
        End If
        Me.tableMTTBATCHREPLICATION = CType(MyBase.Tables("MTTBATCHREPLICATION"),MTTBATCHREPLICATIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMTTBATCHREPLICATION) Is Nothing) Then
                Me.tableMTTBATCHREPLICATION.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "TaskDetail"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/TaskItem.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableResponsibleUser = New ResponsibleUserDataTable
        MyBase.Tables.Add(Me.tableResponsibleUser)
        Me.tableTaskItem = New TaskItemDataTable
        MyBase.Tables.Add(Me.tableTaskItem)
        Me.tableRecurringTasks = New RecurringTasksDataTable
        MyBase.Tables.Add(Me.tableRecurringTasks)
        Me.tableSubTask = New SubTaskDataTable
        MyBase.Tables.Add(Me.tableSubTask)
        Me.tableUserDefaults = New UserDefaultsDataTable
        MyBase.Tables.Add(Me.tableUserDefaults)
        Me.tableRecurringParameters = New RecurringParametersDataTable
        MyBase.Tables.Add(Me.tableRecurringParameters)
        Me.tableRecurringParametersList = New RecurringParametersListDataTable
        MyBase.Tables.Add(Me.tableRecurringParametersList)
        Me.tableTaskItemComments = New TaskItemCommentsDataTable
        MyBase.Tables.Add(Me.tableTaskItemComments)
        Me.tableImmediateEmail = New ImmediateEmailDataTable
        MyBase.Tables.Add(Me.tableImmediateEmail)
        Me.tableCriticalDate = New CriticalDateDataTable
        MyBase.Tables.Add(Me.tableCriticalDate)
        Me.tableMTTBATCHREPLICATION = New MTTBATCHREPLICATIONDataTable
        MyBase.Tables.Add(Me.tableMTTBATCHREPLICATION)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeResponsibleUser() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTaskItem() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRecurringTasks() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSubTask() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUserDefaults() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRecurringParameters() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRecurringParametersList() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTaskItemComments() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeImmediateEmail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCriticalDate() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMTTBATCHREPLICATION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As TaskDetail = New TaskDetail
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ResponsibleUserRowChangeEventHandler(ByVal sender As Object, ByVal e As ResponsibleUserRowChangeEvent)
    
    Public Delegate Sub TaskItemRowChangeEventHandler(ByVal sender As Object, ByVal e As TaskItemRowChangeEvent)
    
    Public Delegate Sub RecurringTasksRowChangeEventHandler(ByVal sender As Object, ByVal e As RecurringTasksRowChangeEvent)
    
    Public Delegate Sub SubTaskRowChangeEventHandler(ByVal sender As Object, ByVal e As SubTaskRowChangeEvent)
    
    Public Delegate Sub UserDefaultsRowChangeEventHandler(ByVal sender As Object, ByVal e As UserDefaultsRowChangeEvent)
    
    Public Delegate Sub RecurringParametersRowChangeEventHandler(ByVal sender As Object, ByVal e As RecurringParametersRowChangeEvent)
    
    Public Delegate Sub RecurringParametersListRowChangeEventHandler(ByVal sender As Object, ByVal e As RecurringParametersListRowChangeEvent)
    
    Public Delegate Sub TaskItemCommentsRowChangeEventHandler(ByVal sender As Object, ByVal e As TaskItemCommentsRowChangeEvent)
    
    Public Delegate Sub ImmediateEmailRowChangeEventHandler(ByVal sender As Object, ByVal e As ImmediateEmailRowChangeEvent)
    
    Public Delegate Sub CriticalDateRowChangeEventHandler(ByVal sender As Object, ByVal e As CriticalDateRowChangeEvent)
    
    Public Delegate Sub MTTBATCHREPLICATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As MTTBATCHREPLICATIONRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ResponsibleUserDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSORTORDER As Global.System.Data.DataColumn
        
        Private columnROLEDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnNAME As Global.System.Data.DataColumn
        
        Private columnUSERNAME As Global.System.Data.DataColumn
        
        Private columnROLESEQID As Global.System.Data.DataColumn
        
        Private columnROLENAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ResponsibleUser"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SORTORDERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSORTORDER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROLEDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLEDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSERNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROLESEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLESEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROLENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ResponsibleUserRow
            Get
                Return CType(Me.Rows(index),ResponsibleUserRow)
            End Get
        End Property
        
        Public Event ResponsibleUserRowChanging As ResponsibleUserRowChangeEventHandler
        
        Public Event ResponsibleUserRowChanged As ResponsibleUserRowChangeEventHandler
        
        Public Event ResponsibleUserRowDeleting As ResponsibleUserRowChangeEventHandler
        
        Public Event ResponsibleUserRowDeleted As ResponsibleUserRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddResponsibleUserRow(ByVal row As ResponsibleUserRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddResponsibleUserRow(ByVal SORTORDER As Decimal, ByVal ROLEDESCRIPTION As String, ByVal NAME As String, ByVal USERNAME As String, ByVal ROLESEQID As String, ByVal ROLENAME As String) As ResponsibleUserRow
            Dim rowResponsibleUserRow As ResponsibleUserRow = CType(Me.NewRow,ResponsibleUserRow)
            Dim columnValuesArray() As Object = New Object() {SORTORDER, ROLEDESCRIPTION, NAME, USERNAME, ROLESEQID, ROLENAME}
            rowResponsibleUserRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowResponsibleUserRow)
            Return rowResponsibleUserRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ResponsibleUserDataTable = CType(MyBase.Clone,ResponsibleUserDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ResponsibleUserDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSORTORDER = MyBase.Columns("SORTORDER")
            Me.columnROLEDESCRIPTION = MyBase.Columns("ROLEDESCRIPTION")
            Me.columnNAME = MyBase.Columns("NAME")
            Me.columnUSERNAME = MyBase.Columns("USERNAME")
            Me.columnROLESEQID = MyBase.Columns("ROLESEQID")
            Me.columnROLENAME = MyBase.Columns("ROLENAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSORTORDER = New Global.System.Data.DataColumn("SORTORDER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSORTORDER)
            Me.columnROLEDESCRIPTION = New Global.System.Data.DataColumn("ROLEDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLEDESCRIPTION)
            Me.columnNAME = New Global.System.Data.DataColumn("NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAME)
            Me.columnUSERNAME = New Global.System.Data.DataColumn("USERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSERNAME)
            Me.columnROLESEQID = New Global.System.Data.DataColumn("ROLESEQID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLESEQID)
            Me.columnROLENAME = New Global.System.Data.DataColumn("ROLENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLENAME)
            Me.columnROLEDESCRIPTION.MaxLength = 250
            Me.columnNAME.MaxLength = 42
            Me.columnUSERNAME.MaxLength = 50
            Me.columnROLENAME.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewResponsibleUserRow() As ResponsibleUserRow
            Return CType(Me.NewRow,ResponsibleUserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ResponsibleUserRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ResponsibleUserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ResponsibleUserRowChangedEvent) Is Nothing) Then
                RaiseEvent ResponsibleUserRowChanged(Me, New ResponsibleUserRowChangeEvent(CType(e.Row,ResponsibleUserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ResponsibleUserRowChangingEvent) Is Nothing) Then
                RaiseEvent ResponsibleUserRowChanging(Me, New ResponsibleUserRowChangeEvent(CType(e.Row,ResponsibleUserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ResponsibleUserRowDeletedEvent) Is Nothing) Then
                RaiseEvent ResponsibleUserRowDeleted(Me, New ResponsibleUserRowChangeEvent(CType(e.Row,ResponsibleUserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ResponsibleUserRowDeletingEvent) Is Nothing) Then
                RaiseEvent ResponsibleUserRowDeleting(Me, New ResponsibleUserRowChangeEvent(CType(e.Row,ResponsibleUserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveResponsibleUserRow(ByVal row As ResponsibleUserRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TaskDetail = New TaskDetail
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ResponsibleUserDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TaskItemDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTASKITEMSEQID As Global.System.Data.DataColumn
        
        Private columnTASKHEADERSEQID As Global.System.Data.DataColumn
        
        Private columnTITLE As Global.System.Data.DataColumn
        
        Private columnPRIORITY As Global.System.Data.DataColumn
        
        Private columnDATECRITICAL As Global.System.Data.DataColumn
        
        Private columnDUEDATE As Global.System.Data.DataColumn
        
        Private columnCLOSEDDATE As Global.System.Data.DataColumn
        
        Private columnSTATUSSEQID As Global.System.Data.DataColumn
        
        Private columnSTATUSNAME As Global.System.Data.DataColumn
        
        Private columnLEADTIME As Global.System.Data.DataColumn
        
        Private columnROOTTASKITEMSEQID As Global.System.Data.DataColumn
        
        Private columnRESPONSIBLENAME As Global.System.Data.DataColumn
        
        Private columnRESPONSIBLEUSERNAME As Global.System.Data.DataColumn
        
        Private columnROLENAME As Global.System.Data.DataColumn
        
        Private columnRESPONSIBLEROLESEQID As Global.System.Data.DataColumn
        
        Private columnCREATEDBY As Global.System.Data.DataColumn
        
        Private columnCREATEDDATE As Global.System.Data.DataColumn
        
        Private columnLASTUPDATEUSERNAME As Global.System.Data.DataColumn
        
        Private columnLASTUPDATEDATE As Global.System.Data.DataColumn
        
        Private columnDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnRESPROLEPLANTCODE As Global.System.Data.DataColumn
        
        Private columnROLEDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnRESPROLESITENAME As Global.System.Data.DataColumn
        
        Private columnDEPENDENTTASKSEQID As Global.System.Data.DataColumn
        
        Private columnDAYSBEFORE As Global.System.Data.DataColumn
        
        Private columnDEPENDENTCHILDID As Global.System.Data.DataColumn
        
        Private columnDAYSAFTER As Global.System.Data.DataColumn
        
        Private columnWORKORDER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TaskItem"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TASKITEMSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKITEMSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TASKHEADERSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKHEADERSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRIORITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRIORITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATECRITICALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATECRITICAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DUEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLOSEDDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLOSEDDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUSSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUSSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUSNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUSNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LEADTIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLEADTIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROOTTASKITEMSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROOTTASKITEMSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESPONSIBLENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPONSIBLENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESPONSIBLEUSERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPONSIBLEUSERNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROLENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESPONSIBLEROLESEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPONSIBLEROLESEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATEDBYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATEDBY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATEDDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATEDDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LASTUPDATEUSERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLASTUPDATEUSERNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LASTUPDATEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLASTUPDATEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESPROLEPLANTCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPROLEPLANTCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROLEDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLEDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESPROLESITENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPROLESITENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEPENDENTTASKSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEPENDENTTASKSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DAYSBEFOREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDAYSBEFORE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEPENDENTCHILDIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEPENDENTCHILDID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DAYSAFTERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDAYSAFTER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WORKORDERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWORKORDER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TaskItemRow
            Get
                Return CType(Me.Rows(index),TaskItemRow)
            End Get
        End Property
        
        Public Event TaskItemRowChanging As TaskItemRowChangeEventHandler
        
        Public Event TaskItemRowChanged As TaskItemRowChangeEventHandler
        
        Public Event TaskItemRowDeleting As TaskItemRowChangeEventHandler
        
        Public Event TaskItemRowDeleted As TaskItemRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTaskItemRow(ByVal row As TaskItemRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTaskItemRow( _
                    ByVal TASKITEMSEQID As Integer,  _
                    ByVal TASKHEADERSEQID As Integer,  _
                    ByVal TITLE As String,  _
                    ByVal PRIORITY As String,  _
                    ByVal DATECRITICAL As String,  _
                    ByVal DUEDATE As String,  _
                    ByVal CLOSEDDATE As String,  _
                    ByVal STATUSSEQID As Integer,  _
                    ByVal STATUSNAME As String,  _
                    ByVal LEADTIME As Integer,  _
                    ByVal ROOTTASKITEMSEQID As Decimal,  _
                    ByVal RESPONSIBLENAME As String,  _
                    ByVal RESPONSIBLEUSERNAME As String,  _
                    ByVal ROLENAME As String,  _
                    ByVal RESPONSIBLEROLESEQID As Integer,  _
                    ByVal CREATEDBY As String,  _
                    ByVal CREATEDDATE As String,  _
                    ByVal LASTUPDATEUSERNAME As String,  _
                    ByVal LASTUPDATEDATE As String,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal RESPROLEPLANTCODE As String,  _
                    ByVal ROLEDESCRIPTION As String,  _
                    ByVal RESPROLESITENAME As String,  _
                    ByVal DEPENDENTTASKSEQID As String,  _
                    ByVal DAYSBEFORE As Integer,  _
                    ByVal DEPENDENTCHILDID As Decimal,  _
                    ByVal DAYSAFTER As Integer,  _
                    ByVal WORKORDER As String) As TaskItemRow
            Dim rowTaskItemRow As TaskItemRow = CType(Me.NewRow,TaskItemRow)
            Dim columnValuesArray() As Object = New Object() {TASKITEMSEQID, TASKHEADERSEQID, TITLE, PRIORITY, DATECRITICAL, DUEDATE, CLOSEDDATE, STATUSSEQID, STATUSNAME, LEADTIME, ROOTTASKITEMSEQID, RESPONSIBLENAME, RESPONSIBLEUSERNAME, ROLENAME, RESPONSIBLEROLESEQID, CREATEDBY, CREATEDDATE, LASTUPDATEUSERNAME, LASTUPDATEDATE, DESCRIPTION, RESPROLEPLANTCODE, ROLEDESCRIPTION, RESPROLESITENAME, DEPENDENTTASKSEQID, DAYSBEFORE, DEPENDENTCHILDID, DAYSAFTER, WORKORDER}
            rowTaskItemRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTaskItemRow)
            Return rowTaskItemRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TaskItemDataTable = CType(MyBase.Clone,TaskItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TaskItemDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTASKITEMSEQID = MyBase.Columns("TASKITEMSEQID")
            Me.columnTASKHEADERSEQID = MyBase.Columns("TASKHEADERSEQID")
            Me.columnTITLE = MyBase.Columns("TITLE")
            Me.columnPRIORITY = MyBase.Columns("PRIORITY")
            Me.columnDATECRITICAL = MyBase.Columns("DATECRITICAL")
            Me.columnDUEDATE = MyBase.Columns("DUEDATE")
            Me.columnCLOSEDDATE = MyBase.Columns("CLOSEDDATE")
            Me.columnSTATUSSEQID = MyBase.Columns("STATUSSEQID")
            Me.columnSTATUSNAME = MyBase.Columns("STATUSNAME")
            Me.columnLEADTIME = MyBase.Columns("LEADTIME")
            Me.columnROOTTASKITEMSEQID = MyBase.Columns("ROOTTASKITEMSEQID")
            Me.columnRESPONSIBLENAME = MyBase.Columns("RESPONSIBLENAME")
            Me.columnRESPONSIBLEUSERNAME = MyBase.Columns("RESPONSIBLEUSERNAME")
            Me.columnROLENAME = MyBase.Columns("ROLENAME")
            Me.columnRESPONSIBLEROLESEQID = MyBase.Columns("RESPONSIBLEROLESEQID")
            Me.columnCREATEDBY = MyBase.Columns("CREATEDBY")
            Me.columnCREATEDDATE = MyBase.Columns("CREATEDDATE")
            Me.columnLASTUPDATEUSERNAME = MyBase.Columns("LASTUPDATEUSERNAME")
            Me.columnLASTUPDATEDATE = MyBase.Columns("LASTUPDATEDATE")
            Me.columnDESCRIPTION = MyBase.Columns("DESCRIPTION")
            Me.columnRESPROLEPLANTCODE = MyBase.Columns("RESPROLEPLANTCODE")
            Me.columnROLEDESCRIPTION = MyBase.Columns("ROLEDESCRIPTION")
            Me.columnRESPROLESITENAME = MyBase.Columns("RESPROLESITENAME")
            Me.columnDEPENDENTTASKSEQID = MyBase.Columns("DEPENDENTTASKSEQID")
            Me.columnDAYSBEFORE = MyBase.Columns("DAYSBEFORE")
            Me.columnDEPENDENTCHILDID = MyBase.Columns("DEPENDENTCHILDID")
            Me.columnDAYSAFTER = MyBase.Columns("DAYSAFTER")
            Me.columnWORKORDER = MyBase.Columns("WORKORDER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTASKITEMSEQID = New Global.System.Data.DataColumn("TASKITEMSEQID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKITEMSEQID)
            Me.columnTASKHEADERSEQID = New Global.System.Data.DataColumn("TASKHEADERSEQID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKHEADERSEQID)
            Me.columnTITLE = New Global.System.Data.DataColumn("TITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTITLE)
            Me.columnPRIORITY = New Global.System.Data.DataColumn("PRIORITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRIORITY)
            Me.columnDATECRITICAL = New Global.System.Data.DataColumn("DATECRITICAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATECRITICAL)
            Me.columnDUEDATE = New Global.System.Data.DataColumn("DUEDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUEDATE)
            Me.columnCLOSEDDATE = New Global.System.Data.DataColumn("CLOSEDDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLOSEDDATE)
            Me.columnSTATUSSEQID = New Global.System.Data.DataColumn("STATUSSEQID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUSSEQID)
            Me.columnSTATUSNAME = New Global.System.Data.DataColumn("STATUSNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUSNAME)
            Me.columnLEADTIME = New Global.System.Data.DataColumn("LEADTIME", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLEADTIME)
            Me.columnROOTTASKITEMSEQID = New Global.System.Data.DataColumn("ROOTTASKITEMSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROOTTASKITEMSEQID)
            Me.columnRESPONSIBLENAME = New Global.System.Data.DataColumn("RESPONSIBLENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPONSIBLENAME)
            Me.columnRESPONSIBLEUSERNAME = New Global.System.Data.DataColumn("RESPONSIBLEUSERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPONSIBLEUSERNAME)
            Me.columnROLENAME = New Global.System.Data.DataColumn("ROLENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLENAME)
            Me.columnRESPONSIBLEROLESEQID = New Global.System.Data.DataColumn("RESPONSIBLEROLESEQID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPONSIBLEROLESEQID)
            Me.columnCREATEDBY = New Global.System.Data.DataColumn("CREATEDBY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATEDBY)
            Me.columnCREATEDDATE = New Global.System.Data.DataColumn("CREATEDDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATEDDATE)
            Me.columnLASTUPDATEUSERNAME = New Global.System.Data.DataColumn("LASTUPDATEUSERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLASTUPDATEUSERNAME)
            Me.columnLASTUPDATEDATE = New Global.System.Data.DataColumn("LASTUPDATEDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLASTUPDATEDATE)
            Me.columnDESCRIPTION = New Global.System.Data.DataColumn("DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTION)
            Me.columnRESPROLEPLANTCODE = New Global.System.Data.DataColumn("RESPROLEPLANTCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPROLEPLANTCODE)
            Me.columnROLEDESCRIPTION = New Global.System.Data.DataColumn("ROLEDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLEDESCRIPTION)
            Me.columnRESPROLESITENAME = New Global.System.Data.DataColumn("RESPROLESITENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPROLESITENAME)
            Me.columnDEPENDENTTASKSEQID = New Global.System.Data.DataColumn("DEPENDENTTASKSEQID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEPENDENTTASKSEQID)
            Me.columnDAYSBEFORE = New Global.System.Data.DataColumn("DAYSBEFORE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDAYSBEFORE)
            Me.columnDEPENDENTCHILDID = New Global.System.Data.DataColumn("DEPENDENTCHILDID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEPENDENTCHILDID)
            Me.columnDAYSAFTER = New Global.System.Data.DataColumn("DAYSAFTER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDAYSAFTER)
            Me.columnWORKORDER = New Global.System.Data.DataColumn("WORKORDER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWORKORDER)
            Me.columnTASKITEMSEQID.AllowDBNull = false
            Me.columnTITLE.MaxLength = 2000
            Me.columnPRIORITY.MaxLength = 10
            Me.columnDATECRITICAL.MaxLength = 2
            Me.columnDUEDATE.MaxLength = 10
            Me.columnCLOSEDDATE.MaxLength = 10
            Me.columnSTATUSNAME.MaxLength = 100
            Me.columnRESPONSIBLENAME.MaxLength = 42
            Me.columnRESPONSIBLEUSERNAME.MaxLength = 50
            Me.columnROLENAME.MaxLength = 100
            Me.columnCREATEDBY.MaxLength = 41
            Me.columnCREATEDDATE.MaxLength = 10
            Me.columnLASTUPDATEUSERNAME.MaxLength = 41
            Me.columnLASTUPDATEDATE.MaxLength = 10
            Me.columnDESCRIPTION.MaxLength = 2147483647
            Me.columnRESPROLEPLANTCODE.MaxLength = 4
            Me.columnROLEDESCRIPTION.MaxLength = 250
            Me.columnRESPROLESITENAME.MaxLength = 100
            Me.columnWORKORDER.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTaskItemRow() As TaskItemRow
            Return CType(Me.NewRow,TaskItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TaskItemRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TaskItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TaskItemRowChangedEvent) Is Nothing) Then
                RaiseEvent TaskItemRowChanged(Me, New TaskItemRowChangeEvent(CType(e.Row,TaskItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TaskItemRowChangingEvent) Is Nothing) Then
                RaiseEvent TaskItemRowChanging(Me, New TaskItemRowChangeEvent(CType(e.Row,TaskItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TaskItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent TaskItemRowDeleted(Me, New TaskItemRowChangeEvent(CType(e.Row,TaskItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TaskItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent TaskItemRowDeleting(Me, New TaskItemRowChangeEvent(CType(e.Row,TaskItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTaskItemRow(ByVal row As TaskItemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TaskDetail = New TaskDetail
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TaskItemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RecurringTasksDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDUEDATE As Global.System.Data.DataColumn
        
        Private columnTASKITEMSEQID As Global.System.Data.DataColumn
        
        Private columnROOTTASKITEMSEQID As Global.System.Data.DataColumn
        
        Private columnSTATUSSEQID As Global.System.Data.DataColumn
        
        Private columnWORKORDER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RecurringTasks"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DUEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TASKITEMSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKITEMSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROOTTASKITEMSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROOTTASKITEMSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUSSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUSSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WORKORDERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWORKORDER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RecurringTasksRow
            Get
                Return CType(Me.Rows(index),RecurringTasksRow)
            End Get
        End Property
        
        Public Event RecurringTasksRowChanging As RecurringTasksRowChangeEventHandler
        
        Public Event RecurringTasksRowChanged As RecurringTasksRowChangeEventHandler
        
        Public Event RecurringTasksRowDeleting As RecurringTasksRowChangeEventHandler
        
        Public Event RecurringTasksRowDeleted As RecurringTasksRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRecurringTasksRow(ByVal row As RecurringTasksRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRecurringTasksRow(ByVal DUEDATE As String, ByVal TASKITEMSEQID As Decimal, ByVal ROOTTASKITEMSEQID As Decimal, ByVal STATUSSEQID As Decimal, ByVal WORKORDER As String) As RecurringTasksRow
            Dim rowRecurringTasksRow As RecurringTasksRow = CType(Me.NewRow,RecurringTasksRow)
            Dim columnValuesArray() As Object = New Object() {DUEDATE, TASKITEMSEQID, ROOTTASKITEMSEQID, STATUSSEQID, WORKORDER}
            rowRecurringTasksRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRecurringTasksRow)
            Return rowRecurringTasksRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RecurringTasksDataTable = CType(MyBase.Clone,RecurringTasksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RecurringTasksDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDUEDATE = MyBase.Columns("DUEDATE")
            Me.columnTASKITEMSEQID = MyBase.Columns("TASKITEMSEQID")
            Me.columnROOTTASKITEMSEQID = MyBase.Columns("ROOTTASKITEMSEQID")
            Me.columnSTATUSSEQID = MyBase.Columns("STATUSSEQID")
            Me.columnWORKORDER = MyBase.Columns("WORKORDER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDUEDATE = New Global.System.Data.DataColumn("DUEDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUEDATE)
            Me.columnTASKITEMSEQID = New Global.System.Data.DataColumn("TASKITEMSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKITEMSEQID)
            Me.columnROOTTASKITEMSEQID = New Global.System.Data.DataColumn("ROOTTASKITEMSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROOTTASKITEMSEQID)
            Me.columnSTATUSSEQID = New Global.System.Data.DataColumn("STATUSSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUSSEQID)
            Me.columnWORKORDER = New Global.System.Data.DataColumn("WORKORDER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWORKORDER)
            Me.columnDUEDATE.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRecurringTasksRow() As RecurringTasksRow
            Return CType(Me.NewRow,RecurringTasksRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RecurringTasksRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RecurringTasksRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RecurringTasksRowChangedEvent) Is Nothing) Then
                RaiseEvent RecurringTasksRowChanged(Me, New RecurringTasksRowChangeEvent(CType(e.Row,RecurringTasksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RecurringTasksRowChangingEvent) Is Nothing) Then
                RaiseEvent RecurringTasksRowChanging(Me, New RecurringTasksRowChangeEvent(CType(e.Row,RecurringTasksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RecurringTasksRowDeletedEvent) Is Nothing) Then
                RaiseEvent RecurringTasksRowDeleted(Me, New RecurringTasksRowChangeEvent(CType(e.Row,RecurringTasksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RecurringTasksRowDeletingEvent) Is Nothing) Then
                RaiseEvent RecurringTasksRowDeleting(Me, New RecurringTasksRowChangeEvent(CType(e.Row,RecurringTasksRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRecurringTasksRow(ByVal row As RecurringTasksRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TaskDetail = New TaskDetail
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RecurringTasksDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SubTaskDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTASKITEMSEQID As Global.System.Data.DataColumn
        
        Private columnTASKHEADERSEQID As Global.System.Data.DataColumn
        
        Private columnTITLE As Global.System.Data.DataColumn
        
        Private columnROOTTASKITEMSEQID As Global.System.Data.DataColumn
        
        Private columnPARENTSUBTASKSEQID As Global.System.Data.DataColumn
        
        Private columnRESPONSIBLENAME As Global.System.Data.DataColumn
        
        Private columnRESPONSIBLEUSERNAME As Global.System.Data.DataColumn
        
        Private columnROLENAME As Global.System.Data.DataColumn
        
        Private columnRESPONSIBLEROLESEQID As Global.System.Data.DataColumn
        
        Private columnCREATEDBY As Global.System.Data.DataColumn
        
        Private columnCREATEDDATE As Global.System.Data.DataColumn
        
        Private columnLASTUPDATEUSERNAME As Global.System.Data.DataColumn
        
        Private columnLASTUPDATEDATE As Global.System.Data.DataColumn
        
        Private columnDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnDAYSAFTER As Global.System.Data.DataColumn
        
        Private columnRESPROLEPLANTCODE As Global.System.Data.DataColumn
        
        Private columnROLEDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnRESPROLESITENAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SubTask"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TASKITEMSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKITEMSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TASKHEADERSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKHEADERSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROOTTASKITEMSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROOTTASKITEMSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PARENTSUBTASKSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPARENTSUBTASKSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESPONSIBLENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPONSIBLENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESPONSIBLEUSERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPONSIBLEUSERNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROLENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESPONSIBLEROLESEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPONSIBLEROLESEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATEDBYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATEDBY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATEDDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATEDDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LASTUPDATEUSERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLASTUPDATEUSERNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LASTUPDATEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLASTUPDATEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DAYSAFTERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDAYSAFTER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESPROLEPLANTCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPROLEPLANTCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROLEDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLEDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESPROLESITENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPROLESITENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SubTaskRow
            Get
                Return CType(Me.Rows(index),SubTaskRow)
            End Get
        End Property
        
        Public Event SubTaskRowChanging As SubTaskRowChangeEventHandler
        
        Public Event SubTaskRowChanged As SubTaskRowChangeEventHandler
        
        Public Event SubTaskRowDeleting As SubTaskRowChangeEventHandler
        
        Public Event SubTaskRowDeleted As SubTaskRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSubTaskRow(ByVal row As SubTaskRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSubTaskRow( _
                    ByVal TASKITEMSEQID As Decimal,  _
                    ByVal TASKHEADERSEQID As Decimal,  _
                    ByVal TITLE As String,  _
                    ByVal ROOTTASKITEMSEQID As Decimal,  _
                    ByVal PARENTSUBTASKSEQID As Decimal,  _
                    ByVal RESPONSIBLENAME As String,  _
                    ByVal RESPONSIBLEUSERNAME As String,  _
                    ByVal ROLENAME As String,  _
                    ByVal RESPONSIBLEROLESEQID As Decimal,  _
                    ByVal CREATEDBY As String,  _
                    ByVal CREATEDDATE As String,  _
                    ByVal LASTUPDATEUSERNAME As String,  _
                    ByVal LASTUPDATEDATE As String,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal DAYSAFTER As Decimal,  _
                    ByVal RESPROLEPLANTCODE As String,  _
                    ByVal ROLEDESCRIPTION As String,  _
                    ByVal RESPROLESITENAME As String) As SubTaskRow
            Dim rowSubTaskRow As SubTaskRow = CType(Me.NewRow,SubTaskRow)
            Dim columnValuesArray() As Object = New Object() {TASKITEMSEQID, TASKHEADERSEQID, TITLE, ROOTTASKITEMSEQID, PARENTSUBTASKSEQID, RESPONSIBLENAME, RESPONSIBLEUSERNAME, ROLENAME, RESPONSIBLEROLESEQID, CREATEDBY, CREATEDDATE, LASTUPDATEUSERNAME, LASTUPDATEDATE, DESCRIPTION, DAYSAFTER, RESPROLEPLANTCODE, ROLEDESCRIPTION, RESPROLESITENAME}
            rowSubTaskRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSubTaskRow)
            Return rowSubTaskRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SubTaskDataTable = CType(MyBase.Clone,SubTaskDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SubTaskDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTASKITEMSEQID = MyBase.Columns("TASKITEMSEQID")
            Me.columnTASKHEADERSEQID = MyBase.Columns("TASKHEADERSEQID")
            Me.columnTITLE = MyBase.Columns("TITLE")
            Me.columnROOTTASKITEMSEQID = MyBase.Columns("ROOTTASKITEMSEQID")
            Me.columnPARENTSUBTASKSEQID = MyBase.Columns("PARENTSUBTASKSEQID")
            Me.columnRESPONSIBLENAME = MyBase.Columns("RESPONSIBLENAME")
            Me.columnRESPONSIBLEUSERNAME = MyBase.Columns("RESPONSIBLEUSERNAME")
            Me.columnROLENAME = MyBase.Columns("ROLENAME")
            Me.columnRESPONSIBLEROLESEQID = MyBase.Columns("RESPONSIBLEROLESEQID")
            Me.columnCREATEDBY = MyBase.Columns("CREATEDBY")
            Me.columnCREATEDDATE = MyBase.Columns("CREATEDDATE")
            Me.columnLASTUPDATEUSERNAME = MyBase.Columns("LASTUPDATEUSERNAME")
            Me.columnLASTUPDATEDATE = MyBase.Columns("LASTUPDATEDATE")
            Me.columnDESCRIPTION = MyBase.Columns("DESCRIPTION")
            Me.columnDAYSAFTER = MyBase.Columns("DAYSAFTER")
            Me.columnRESPROLEPLANTCODE = MyBase.Columns("RESPROLEPLANTCODE")
            Me.columnROLEDESCRIPTION = MyBase.Columns("ROLEDESCRIPTION")
            Me.columnRESPROLESITENAME = MyBase.Columns("RESPROLESITENAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTASKITEMSEQID = New Global.System.Data.DataColumn("TASKITEMSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKITEMSEQID)
            Me.columnTASKHEADERSEQID = New Global.System.Data.DataColumn("TASKHEADERSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKHEADERSEQID)
            Me.columnTITLE = New Global.System.Data.DataColumn("TITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTITLE)
            Me.columnROOTTASKITEMSEQID = New Global.System.Data.DataColumn("ROOTTASKITEMSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROOTTASKITEMSEQID)
            Me.columnPARENTSUBTASKSEQID = New Global.System.Data.DataColumn("PARENTSUBTASKSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPARENTSUBTASKSEQID)
            Me.columnRESPONSIBLENAME = New Global.System.Data.DataColumn("RESPONSIBLENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPONSIBLENAME)
            Me.columnRESPONSIBLEUSERNAME = New Global.System.Data.DataColumn("RESPONSIBLEUSERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPONSIBLEUSERNAME)
            Me.columnROLENAME = New Global.System.Data.DataColumn("ROLENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLENAME)
            Me.columnRESPONSIBLEROLESEQID = New Global.System.Data.DataColumn("RESPONSIBLEROLESEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPONSIBLEROLESEQID)
            Me.columnCREATEDBY = New Global.System.Data.DataColumn("CREATEDBY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATEDBY)
            Me.columnCREATEDDATE = New Global.System.Data.DataColumn("CREATEDDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATEDDATE)
            Me.columnLASTUPDATEUSERNAME = New Global.System.Data.DataColumn("LASTUPDATEUSERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLASTUPDATEUSERNAME)
            Me.columnLASTUPDATEDATE = New Global.System.Data.DataColumn("LASTUPDATEDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLASTUPDATEDATE)
            Me.columnDESCRIPTION = New Global.System.Data.DataColumn("DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTION)
            Me.columnDAYSAFTER = New Global.System.Data.DataColumn("DAYSAFTER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDAYSAFTER)
            Me.columnRESPROLEPLANTCODE = New Global.System.Data.DataColumn("RESPROLEPLANTCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPROLEPLANTCODE)
            Me.columnROLEDESCRIPTION = New Global.System.Data.DataColumn("ROLEDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLEDESCRIPTION)
            Me.columnRESPROLESITENAME = New Global.System.Data.DataColumn("RESPROLESITENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPROLESITENAME)
            Me.columnTASKITEMSEQID.AllowDBNull = false
            Me.columnTITLE.MaxLength = 2000
            Me.columnRESPONSIBLENAME.MaxLength = 42
            Me.columnRESPONSIBLEUSERNAME.MaxLength = 50
            Me.columnROLENAME.MaxLength = 100
            Me.columnCREATEDBY.MaxLength = 41
            Me.columnCREATEDDATE.MaxLength = 10
            Me.columnLASTUPDATEUSERNAME.MaxLength = 41
            Me.columnLASTUPDATEDATE.MaxLength = 10
            Me.columnDESCRIPTION.MaxLength = 2147483647
            Me.columnRESPROLEPLANTCODE.MaxLength = 4
            Me.columnROLEDESCRIPTION.MaxLength = 250
            Me.columnRESPROLESITENAME.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSubTaskRow() As SubTaskRow
            Return CType(Me.NewRow,SubTaskRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SubTaskRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SubTaskRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SubTaskRowChangedEvent) Is Nothing) Then
                RaiseEvent SubTaskRowChanged(Me, New SubTaskRowChangeEvent(CType(e.Row,SubTaskRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SubTaskRowChangingEvent) Is Nothing) Then
                RaiseEvent SubTaskRowChanging(Me, New SubTaskRowChangeEvent(CType(e.Row,SubTaskRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SubTaskRowDeletedEvent) Is Nothing) Then
                RaiseEvent SubTaskRowDeleted(Me, New SubTaskRowChangeEvent(CType(e.Row,SubTaskRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SubTaskRowDeletingEvent) Is Nothing) Then
                RaiseEvent SubTaskRowDeleting(Me, New SubTaskRowChangeEvent(CType(e.Row,SubTaskRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSubTaskRow(ByVal row As SubTaskRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TaskDetail = New TaskDetail
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SubTaskDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UserDefaultsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnUSERNAME As Global.System.Data.DataColumn
        
        Private columnPROFILETYPESEQID As Global.System.Data.DataColumn
        
        Private columnAPPLICATION As Global.System.Data.DataColumn
        
        Private columnPROFILETYPEVALUE As Global.System.Data.DataColumn
        
        Private columnLASTUPDATEUSERNAME As Global.System.Data.DataColumn
        
        Private columnLASTUPDATEDATE As Global.System.Data.DataColumn
        
        Private columnPROFILETYPENAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UserDefaults"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSERNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROFILETYPESEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROFILETYPESEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APPLICATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPPLICATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROFILETYPEVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROFILETYPEVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LASTUPDATEUSERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLASTUPDATEUSERNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LASTUPDATEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLASTUPDATEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROFILETYPENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROFILETYPENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UserDefaultsRow
            Get
                Return CType(Me.Rows(index),UserDefaultsRow)
            End Get
        End Property
        
        Public Event UserDefaultsRowChanging As UserDefaultsRowChangeEventHandler
        
        Public Event UserDefaultsRowChanged As UserDefaultsRowChangeEventHandler
        
        Public Event UserDefaultsRowDeleting As UserDefaultsRowChangeEventHandler
        
        Public Event UserDefaultsRowDeleted As UserDefaultsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUserDefaultsRow(ByVal row As UserDefaultsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUserDefaultsRow(ByVal USERNAME As String, ByVal PROFILETYPESEQID As Decimal, ByVal APPLICATION As String, ByVal PROFILETYPEVALUE As String, ByVal LASTUPDATEUSERNAME As String, ByVal LASTUPDATEDATE As Date, ByVal PROFILETYPENAME As String) As UserDefaultsRow
            Dim rowUserDefaultsRow As UserDefaultsRow = CType(Me.NewRow,UserDefaultsRow)
            Dim columnValuesArray() As Object = New Object() {USERNAME, PROFILETYPESEQID, APPLICATION, PROFILETYPEVALUE, LASTUPDATEUSERNAME, LASTUPDATEDATE, PROFILETYPENAME}
            rowUserDefaultsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUserDefaultsRow)
            Return rowUserDefaultsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UserDefaultsDataTable = CType(MyBase.Clone,UserDefaultsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UserDefaultsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnUSERNAME = MyBase.Columns("USERNAME")
            Me.columnPROFILETYPESEQID = MyBase.Columns("PROFILETYPESEQID")
            Me.columnAPPLICATION = MyBase.Columns("APPLICATION")
            Me.columnPROFILETYPEVALUE = MyBase.Columns("PROFILETYPEVALUE")
            Me.columnLASTUPDATEUSERNAME = MyBase.Columns("LASTUPDATEUSERNAME")
            Me.columnLASTUPDATEDATE = MyBase.Columns("LASTUPDATEDATE")
            Me.columnPROFILETYPENAME = MyBase.Columns("PROFILETYPENAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnUSERNAME = New Global.System.Data.DataColumn("USERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSERNAME)
            Me.columnPROFILETYPESEQID = New Global.System.Data.DataColumn("PROFILETYPESEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROFILETYPESEQID)
            Me.columnAPPLICATION = New Global.System.Data.DataColumn("APPLICATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPPLICATION)
            Me.columnPROFILETYPEVALUE = New Global.System.Data.DataColumn("PROFILETYPEVALUE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROFILETYPEVALUE)
            Me.columnLASTUPDATEUSERNAME = New Global.System.Data.DataColumn("LASTUPDATEUSERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLASTUPDATEUSERNAME)
            Me.columnLASTUPDATEDATE = New Global.System.Data.DataColumn("LASTUPDATEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLASTUPDATEDATE)
            Me.columnPROFILETYPENAME = New Global.System.Data.DataColumn("PROFILETYPENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROFILETYPENAME)
            Me.columnUSERNAME.AllowDBNull = false
            Me.columnUSERNAME.MaxLength = 50
            Me.columnPROFILETYPESEQID.AllowDBNull = false
            Me.columnAPPLICATION.AllowDBNull = false
            Me.columnAPPLICATION.MaxLength = 50
            Me.columnPROFILETYPEVALUE.MaxLength = 2000
            Me.columnLASTUPDATEUSERNAME.MaxLength = 50
            Me.columnPROFILETYPENAME.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUserDefaultsRow() As UserDefaultsRow
            Return CType(Me.NewRow,UserDefaultsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UserDefaultsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UserDefaultsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UserDefaultsRowChangedEvent) Is Nothing) Then
                RaiseEvent UserDefaultsRowChanged(Me, New UserDefaultsRowChangeEvent(CType(e.Row,UserDefaultsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UserDefaultsRowChangingEvent) Is Nothing) Then
                RaiseEvent UserDefaultsRowChanging(Me, New UserDefaultsRowChangeEvent(CType(e.Row,UserDefaultsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UserDefaultsRowDeletedEvent) Is Nothing) Then
                RaiseEvent UserDefaultsRowDeleted(Me, New UserDefaultsRowChangeEvent(CType(e.Row,UserDefaultsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UserDefaultsRowDeletingEvent) Is Nothing) Then
                RaiseEvent UserDefaultsRowDeleting(Me, New UserDefaultsRowChangeEvent(CType(e.Row,UserDefaultsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUserDefaultsRow(ByVal row As UserDefaultsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TaskDetail = New TaskDetail
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UserDefaultsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RecurringParametersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTASKITEMSEQID As Global.System.Data.DataColumn
        
        Private columnPROFILETYPESEQID As Global.System.Data.DataColumn
        
        Private columnPROFILETYPEVALUE As Global.System.Data.DataColumn
        
        Private columnLASTUPDATEUSERNAME As Global.System.Data.DataColumn
        
        Private columnLASTUPDATEDATE As Global.System.Data.DataColumn
        
        Private columnPROFILETYPENAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RecurringParameters"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TASKITEMSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKITEMSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROFILETYPESEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROFILETYPESEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROFILETYPEVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROFILETYPEVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LASTUPDATEUSERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLASTUPDATEUSERNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LASTUPDATEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLASTUPDATEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROFILETYPENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROFILETYPENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RecurringParametersRow
            Get
                Return CType(Me.Rows(index),RecurringParametersRow)
            End Get
        End Property
        
        Public Event RecurringParametersRowChanging As RecurringParametersRowChangeEventHandler
        
        Public Event RecurringParametersRowChanged As RecurringParametersRowChangeEventHandler
        
        Public Event RecurringParametersRowDeleting As RecurringParametersRowChangeEventHandler
        
        Public Event RecurringParametersRowDeleted As RecurringParametersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRecurringParametersRow(ByVal row As RecurringParametersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRecurringParametersRow(ByVal TASKITEMSEQID As Decimal, ByVal PROFILETYPESEQID As Decimal, ByVal PROFILETYPEVALUE As String, ByVal LASTUPDATEUSERNAME As String, ByVal LASTUPDATEDATE As Date, ByVal PROFILETYPENAME As String) As RecurringParametersRow
            Dim rowRecurringParametersRow As RecurringParametersRow = CType(Me.NewRow,RecurringParametersRow)
            Dim columnValuesArray() As Object = New Object() {TASKITEMSEQID, PROFILETYPESEQID, PROFILETYPEVALUE, LASTUPDATEUSERNAME, LASTUPDATEDATE, PROFILETYPENAME}
            rowRecurringParametersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRecurringParametersRow)
            Return rowRecurringParametersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RecurringParametersDataTable = CType(MyBase.Clone,RecurringParametersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RecurringParametersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTASKITEMSEQID = MyBase.Columns("TASKITEMSEQID")
            Me.columnPROFILETYPESEQID = MyBase.Columns("PROFILETYPESEQID")
            Me.columnPROFILETYPEVALUE = MyBase.Columns("PROFILETYPEVALUE")
            Me.columnLASTUPDATEUSERNAME = MyBase.Columns("LASTUPDATEUSERNAME")
            Me.columnLASTUPDATEDATE = MyBase.Columns("LASTUPDATEDATE")
            Me.columnPROFILETYPENAME = MyBase.Columns("PROFILETYPENAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTASKITEMSEQID = New Global.System.Data.DataColumn("TASKITEMSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKITEMSEQID)
            Me.columnPROFILETYPESEQID = New Global.System.Data.DataColumn("PROFILETYPESEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROFILETYPESEQID)
            Me.columnPROFILETYPEVALUE = New Global.System.Data.DataColumn("PROFILETYPEVALUE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROFILETYPEVALUE)
            Me.columnLASTUPDATEUSERNAME = New Global.System.Data.DataColumn("LASTUPDATEUSERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLASTUPDATEUSERNAME)
            Me.columnLASTUPDATEDATE = New Global.System.Data.DataColumn("LASTUPDATEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLASTUPDATEDATE)
            Me.columnPROFILETYPENAME = New Global.System.Data.DataColumn("PROFILETYPENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROFILETYPENAME)
            Me.columnTASKITEMSEQID.AllowDBNull = false
            Me.columnPROFILETYPESEQID.AllowDBNull = false
            Me.columnPROFILETYPEVALUE.MaxLength = 2000
            Me.columnLASTUPDATEUSERNAME.MaxLength = 50
            Me.columnPROFILETYPENAME.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRecurringParametersRow() As RecurringParametersRow
            Return CType(Me.NewRow,RecurringParametersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RecurringParametersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RecurringParametersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RecurringParametersRowChangedEvent) Is Nothing) Then
                RaiseEvent RecurringParametersRowChanged(Me, New RecurringParametersRowChangeEvent(CType(e.Row,RecurringParametersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RecurringParametersRowChangingEvent) Is Nothing) Then
                RaiseEvent RecurringParametersRowChanging(Me, New RecurringParametersRowChangeEvent(CType(e.Row,RecurringParametersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RecurringParametersRowDeletedEvent) Is Nothing) Then
                RaiseEvent RecurringParametersRowDeleted(Me, New RecurringParametersRowChangeEvent(CType(e.Row,RecurringParametersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RecurringParametersRowDeletingEvent) Is Nothing) Then
                RaiseEvent RecurringParametersRowDeleting(Me, New RecurringParametersRowChangeEvent(CType(e.Row,RecurringParametersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRecurringParametersRow(ByVal row As RecurringParametersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TaskDetail = New TaskDetail
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RecurringParametersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RecurringParametersListDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROFILETYPESEQID As Global.System.Data.DataColumn
        
        Private columnPROFILETYPENAME As Global.System.Data.DataColumn
        
        Private columnPROFILETYPE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RecurringParametersList"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROFILETYPESEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROFILETYPESEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROFILETYPENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROFILETYPENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROFILETYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROFILETYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RecurringParametersListRow
            Get
                Return CType(Me.Rows(index),RecurringParametersListRow)
            End Get
        End Property
        
        Public Event RecurringParametersListRowChanging As RecurringParametersListRowChangeEventHandler
        
        Public Event RecurringParametersListRowChanged As RecurringParametersListRowChangeEventHandler
        
        Public Event RecurringParametersListRowDeleting As RecurringParametersListRowChangeEventHandler
        
        Public Event RecurringParametersListRowDeleted As RecurringParametersListRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRecurringParametersListRow(ByVal row As RecurringParametersListRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRecurringParametersListRow(ByVal PROFILETYPESEQID As Decimal, ByVal PROFILETYPENAME As String, ByVal PROFILETYPE As String) As RecurringParametersListRow
            Dim rowRecurringParametersListRow As RecurringParametersListRow = CType(Me.NewRow,RecurringParametersListRow)
            Dim columnValuesArray() As Object = New Object() {PROFILETYPESEQID, PROFILETYPENAME, PROFILETYPE}
            rowRecurringParametersListRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRecurringParametersListRow)
            Return rowRecurringParametersListRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RecurringParametersListDataTable = CType(MyBase.Clone,RecurringParametersListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RecurringParametersListDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPROFILETYPESEQID = MyBase.Columns("PROFILETYPESEQID")
            Me.columnPROFILETYPENAME = MyBase.Columns("PROFILETYPENAME")
            Me.columnPROFILETYPE = MyBase.Columns("PROFILETYPE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPROFILETYPESEQID = New Global.System.Data.DataColumn("PROFILETYPESEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROFILETYPESEQID)
            Me.columnPROFILETYPENAME = New Global.System.Data.DataColumn("PROFILETYPENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROFILETYPENAME)
            Me.columnPROFILETYPE = New Global.System.Data.DataColumn("PROFILETYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROFILETYPE)
            Me.columnPROFILETYPESEQID.AllowDBNull = false
            Me.columnPROFILETYPENAME.MaxLength = 100
            Me.columnPROFILETYPE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRecurringParametersListRow() As RecurringParametersListRow
            Return CType(Me.NewRow,RecurringParametersListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RecurringParametersListRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RecurringParametersListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RecurringParametersListRowChangedEvent) Is Nothing) Then
                RaiseEvent RecurringParametersListRowChanged(Me, New RecurringParametersListRowChangeEvent(CType(e.Row,RecurringParametersListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RecurringParametersListRowChangingEvent) Is Nothing) Then
                RaiseEvent RecurringParametersListRowChanging(Me, New RecurringParametersListRowChangeEvent(CType(e.Row,RecurringParametersListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RecurringParametersListRowDeletedEvent) Is Nothing) Then
                RaiseEvent RecurringParametersListRowDeleted(Me, New RecurringParametersListRowChangeEvent(CType(e.Row,RecurringParametersListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RecurringParametersListRowDeletingEvent) Is Nothing) Then
                RaiseEvent RecurringParametersListRowDeleting(Me, New RecurringParametersListRowChangeEvent(CType(e.Row,RecurringParametersListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRecurringParametersListRow(ByVal row As RecurringParametersListRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TaskDetail = New TaskDetail
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RecurringParametersListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TaskItemCommentsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOMMENTSEQID As Global.System.Data.DataColumn
        
        Private columnUSERNAME As Global.System.Data.DataColumn
        
        Private columnLASTUPDATEUSERNAME As Global.System.Data.DataColumn
        
        Private columnLASTUPDATEDATE As Global.System.Data.DataColumn
        
        Private columnCOMMENTS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TaskItemComments"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMENTSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSERNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LASTUPDATEUSERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLASTUPDATEUSERNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LASTUPDATEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLASTUPDATEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TaskItemCommentsRow
            Get
                Return CType(Me.Rows(index),TaskItemCommentsRow)
            End Get
        End Property
        
        Public Event TaskItemCommentsRowChanging As TaskItemCommentsRowChangeEventHandler
        
        Public Event TaskItemCommentsRowChanged As TaskItemCommentsRowChangeEventHandler
        
        Public Event TaskItemCommentsRowDeleting As TaskItemCommentsRowChangeEventHandler
        
        Public Event TaskItemCommentsRowDeleted As TaskItemCommentsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTaskItemCommentsRow(ByVal row As TaskItemCommentsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTaskItemCommentsRow(ByVal COMMENTSEQID As Decimal, ByVal USERNAME As String, ByVal LASTUPDATEUSERNAME As String, ByVal LASTUPDATEDATE As String, ByVal COMMENTS As String) As TaskItemCommentsRow
            Dim rowTaskItemCommentsRow As TaskItemCommentsRow = CType(Me.NewRow,TaskItemCommentsRow)
            Dim columnValuesArray() As Object = New Object() {COMMENTSEQID, USERNAME, LASTUPDATEUSERNAME, LASTUPDATEDATE, COMMENTS}
            rowTaskItemCommentsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTaskItemCommentsRow)
            Return rowTaskItemCommentsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TaskItemCommentsDataTable = CType(MyBase.Clone,TaskItemCommentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TaskItemCommentsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOMMENTSEQID = MyBase.Columns("COMMENTSEQID")
            Me.columnUSERNAME = MyBase.Columns("USERNAME")
            Me.columnLASTUPDATEUSERNAME = MyBase.Columns("LASTUPDATEUSERNAME")
            Me.columnLASTUPDATEDATE = MyBase.Columns("LASTUPDATEDATE")
            Me.columnCOMMENTS = MyBase.Columns("COMMENTS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOMMENTSEQID = New Global.System.Data.DataColumn("COMMENTSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTSEQID)
            Me.columnUSERNAME = New Global.System.Data.DataColumn("USERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSERNAME)
            Me.columnLASTUPDATEUSERNAME = New Global.System.Data.DataColumn("LASTUPDATEUSERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLASTUPDATEUSERNAME)
            Me.columnLASTUPDATEDATE = New Global.System.Data.DataColumn("LASTUPDATEDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLASTUPDATEDATE)
            Me.columnCOMMENTS = New Global.System.Data.DataColumn("COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTS)
            Me.columnCOMMENTSEQID.AllowDBNull = false
            Me.columnUSERNAME.MaxLength = 41
            Me.columnLASTUPDATEUSERNAME.MaxLength = 41
            Me.columnLASTUPDATEDATE.MaxLength = 10
            Me.columnCOMMENTS.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTaskItemCommentsRow() As TaskItemCommentsRow
            Return CType(Me.NewRow,TaskItemCommentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TaskItemCommentsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TaskItemCommentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TaskItemCommentsRowChangedEvent) Is Nothing) Then
                RaiseEvent TaskItemCommentsRowChanged(Me, New TaskItemCommentsRowChangeEvent(CType(e.Row,TaskItemCommentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TaskItemCommentsRowChangingEvent) Is Nothing) Then
                RaiseEvent TaskItemCommentsRowChanging(Me, New TaskItemCommentsRowChangeEvent(CType(e.Row,TaskItemCommentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TaskItemCommentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent TaskItemCommentsRowDeleted(Me, New TaskItemCommentsRowChangeEvent(CType(e.Row,TaskItemCommentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TaskItemCommentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent TaskItemCommentsRowDeleting(Me, New TaskItemCommentsRowChangeEvent(CType(e.Row,TaskItemCommentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTaskItemCommentsRow(ByVal row As TaskItemCommentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TaskDetail = New TaskDetail
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TaskItemCommentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ImmediateEmailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnRECTYPE As Global.System.Data.DataColumn
        
        Private columnRECNUM As Global.System.Data.DataColumn
        
        Private columnTASKHEADERSEQID As Global.System.Data.DataColumn
        
        Private columnTASKITEMSEQID As Global.System.Data.DataColumn
        
        Private columnSITENAME As Global.System.Data.DataColumn
        
        Private columnTASKHEADERTITLE As Global.System.Data.DataColumn
        
        Private columnTASKITEMSEQID1 As Global.System.Data.DataColumn
        
        Private columnITEM_TITLE As Global.System.Data.DataColumn
        
        Private columnITEM_DESCRIPTION As Global.System.Data.DataColumn
        
        Private columnITEM_DUEDATE As Global.System.Data.DataColumn
        
        Private columnLEADTIME As Global.System.Data.DataColumn
        
        Private columnITEM_CLOSEDDATE As Global.System.Data.DataColumn
        
        Private columnACTIVITYNAME As Global.System.Data.DataColumn
        
        Private columnHEADERTYPENAME As Global.System.Data.DataColumn
        
        Private columnBUSUNITMGR As Global.System.Data.DataColumn
        
        Private columnTYPEMGR As Global.System.Data.DataColumn
        
        Private columnMGR As Global.System.Data.DataColumn
        
        Private columnCREATEDBY As Global.System.Data.DataColumn
        
        Private columnWHOLE_NAME_CREATEDBY_PERSON As Global.System.Data.DataColumn
        
        Private columnCREATEDBY_EMAIL As Global.System.Data.DataColumn
        
        Private columnCREATEDBY_DEFAULTLANGUAGE As Global.System.Data.DataColumn
        
        Private columnRESPONSIBLEUSERNAME As Global.System.Data.DataColumn
        
        Private columnWHOLE_NAME_RESPONSIBLE_PERSON As Global.System.Data.DataColumn
        
        Private columnRESPONSIBLE_EMAIL As Global.System.Data.DataColumn
        
        Private columnRESPONSIBLE_DEFAULTLANGUAGE As Global.System.Data.DataColumn
        
        Private columnRESPONSIBLE_ROLE_NAMES As Global.System.Data.DataColumn
        
        Private columnROLEDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnMTTCOMMENT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ImmediateEmail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECNUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECNUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TASKHEADERSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKHEADERSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TASKITEMSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKITEMSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SITENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSITENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TASKHEADERTITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKHEADERTITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TASKITEMSEQID1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKITEMSEQID1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_TITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_TITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_DESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_DUEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_DUEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LEADTIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLEADTIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_CLOSEDDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_CLOSEDDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACTIVITYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTIVITYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HEADERTYPENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEADERTYPENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BUSUNITMGRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUSUNITMGR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TYPEMGRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTYPEMGR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MGRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMGR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATEDBYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATEDBY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WHOLE_NAME_CREATEDBY_PERSONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWHOLE_NAME_CREATEDBY_PERSON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATEDBY_EMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATEDBY_EMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATEDBY_DEFAULTLANGUAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATEDBY_DEFAULTLANGUAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESPONSIBLEUSERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPONSIBLEUSERNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WHOLE_NAME_RESPONSIBLE_PERSONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWHOLE_NAME_RESPONSIBLE_PERSON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESPONSIBLE_EMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPONSIBLE_EMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESPONSIBLE_DEFAULTLANGUAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPONSIBLE_DEFAULTLANGUAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESPONSIBLE_ROLE_NAMESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPONSIBLE_ROLE_NAMES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROLEDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLEDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MTTCOMMENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMTTCOMMENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImmediateEmailRow
            Get
                Return CType(Me.Rows(index),ImmediateEmailRow)
            End Get
        End Property
        
        Public Event ImmediateEmailRowChanging As ImmediateEmailRowChangeEventHandler
        
        Public Event ImmediateEmailRowChanged As ImmediateEmailRowChangeEventHandler
        
        Public Event ImmediateEmailRowDeleting As ImmediateEmailRowChangeEventHandler
        
        Public Event ImmediateEmailRowDeleted As ImmediateEmailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddImmediateEmailRow(ByVal row As ImmediateEmailRow)
            Me.Rows.Add(row)
        End Sub
        
        '<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddImmediateEmailRow( _
                    ByVal RECTYPE As String, _
                    ByVal RECNUM As String, _
                    ByVal TASKHEADERSEQID As Decimal, _
                    ByVal TASKITEMSEQID As Decimal, _
                    ByVal SITENAME As String, _
                    ByVal TASKHEADERTITLE As String, _
                    ByVal TASKITEMSEQID1 As Decimal, _
                    ByVal ITEM_TITLE As String, _
                    ByVal ITEM_DESCRIPTION As String, _
                    ByVal ITEM_DUEDATE As Date, _
                    ByVal LEADTIME As Decimal, _
                    ByVal ITEM_CLOSEDDATE As Date, _
                    ByVal ACTIVITYNAME As String, _
                    ByVal HEADERTYPENAME As String, _
                    ByVal BUSUNITMGR As String, _
                    ByVal TYPEMGR As String, _
                    ByVal MGR As String, _
                    ByVal CREATEDBY As String, _
                    ByVal WHOLE_NAME_CREATEDBY_PERSON As String, _
                    ByVal CREATEDBY_EMAIL As String, _
                    ByVal CREATEDBY_DEFAULTLANGUAGE As String, _
                    ByVal RESPONSIBLEUSERNAME As String, _
                    ByVal WHOLE_NAME_RESPONSIBLE_PERSON As String, _
                    ByVal RESPONSIBLE_EMAIL As String, _
                    ByVal RESPONSIBLE_DEFAULTLANGUAGE As String, _
                    ByVal RESPONSIBLE_ROLE_NAMES As String, _
                    ByVal ROLEDESCRIPTION As String, _
                    ByVal MTTCOMMENT As String) As ImmediateEmailRow
            Dim rowImmediateEmailRow As ImmediateEmailRow = CType(Me.NewRow, ImmediateEmailRow)
            Dim columnValuesArray() As Object = New Object() {RECTYPE, RECNUM, TASKHEADERSEQID, TASKITEMSEQID, SITENAME, TASKHEADERTITLE, TASKITEMSEQID1, ITEM_TITLE, ITEM_DESCRIPTION, ITEM_DUEDATE, LEADTIME, ITEM_CLOSEDDATE, ACTIVITYNAME, HEADERTYPENAME, BUSUNITMGR, TYPEMGR, MGR, CREATEDBY, WHOLE_NAME_CREATEDBY_PERSON, CREATEDBY_EMAIL, CREATEDBY_DEFAULTLANGUAGE, RESPONSIBLEUSERNAME, WHOLE_NAME_RESPONSIBLE_PERSON, RESPONSIBLE_EMAIL, RESPONSIBLE_DEFAULTLANGUAGE, RESPONSIBLE_ROLE_NAMES, ROLEDESCRIPTION, MTTCOMMENT}
            rowImmediateEmailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowImmediateEmailRow)
            Return rowImmediateEmailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ImmediateEmailDataTable = CType(MyBase.Clone,ImmediateEmailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ImmediateEmailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRECTYPE = MyBase.Columns("RECTYPE")
            Me.columnRECNUM = MyBase.Columns("RECNUM")
            Me.columnTASKHEADERSEQID = MyBase.Columns("TASKHEADERSEQID")
            Me.columnTASKITEMSEQID = MyBase.Columns("TASKITEMSEQID")
            Me.columnSITENAME = MyBase.Columns("SITENAME")
            Me.columnTASKHEADERTITLE = MyBase.Columns("TASKHEADERTITLE")
            Me.columnTASKITEMSEQID1 = MyBase.Columns("TASKITEMSEQID1")
            Me.columnITEM_TITLE = MyBase.Columns("ITEM_TITLE")
            Me.columnITEM_DESCRIPTION = MyBase.Columns("ITEM_DESCRIPTION")
            Me.columnITEM_DUEDATE = MyBase.Columns("ITEM_DUEDATE")
            Me.columnLEADTIME = MyBase.Columns("LEADTIME")
            Me.columnITEM_CLOSEDDATE = MyBase.Columns("ITEM_CLOSEDDATE")
            Me.columnACTIVITYNAME = MyBase.Columns("ACTIVITYNAME")
            Me.columnHEADERTYPENAME = MyBase.Columns("HEADERTYPENAME")
            Me.columnBUSUNITMGR = MyBase.Columns("BUSUNITMGR")
            Me.columnTYPEMGR = MyBase.Columns("TYPEMGR")
            Me.columnMGR = MyBase.Columns("MGR")
            Me.columnCREATEDBY = MyBase.Columns("CREATEDBY")
            Me.columnWHOLE_NAME_CREATEDBY_PERSON = MyBase.Columns("WHOLE_NAME_CREATEDBY_PERSON")
            Me.columnCREATEDBY_EMAIL = MyBase.Columns("CREATEDBY_EMAIL")
            Me.columnCREATEDBY_DEFAULTLANGUAGE = MyBase.Columns("CREATEDBY_DEFAULTLANGUAGE")
            Me.columnRESPONSIBLEUSERNAME = MyBase.Columns("RESPONSIBLEUSERNAME")
            Me.columnWHOLE_NAME_RESPONSIBLE_PERSON = MyBase.Columns("WHOLE_NAME_RESPONSIBLE_PERSON")
            Me.columnRESPONSIBLE_EMAIL = MyBase.Columns("RESPONSIBLE_EMAIL")
            Me.columnRESPONSIBLE_DEFAULTLANGUAGE = MyBase.Columns("RESPONSIBLE_DEFAULTLANGUAGE")
            Me.columnRESPONSIBLE_ROLE_NAMES = MyBase.Columns("RESPONSIBLE_ROLE_NAMES")
            Me.columnROLEDESCRIPTION = MyBase.Columns("ROLEDESCRIPTION")
            Me.columnMTTCOMMENT = MyBase.Columns("MTTCOMMENT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRECTYPE = New Global.System.Data.DataColumn("RECTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECTYPE)
            Me.columnRECNUM = New Global.System.Data.DataColumn("RECNUM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECNUM)
            Me.columnTASKHEADERSEQID = New Global.System.Data.DataColumn("TASKHEADERSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKHEADERSEQID)
            Me.columnTASKITEMSEQID = New Global.System.Data.DataColumn("TASKITEMSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKITEMSEQID)
            Me.columnSITENAME = New Global.System.Data.DataColumn("SITENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSITENAME)
            Me.columnTASKHEADERTITLE = New Global.System.Data.DataColumn("TASKHEADERTITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKHEADERTITLE)
            Me.columnTASKITEMSEQID1 = New Global.System.Data.DataColumn("TASKITEMSEQID1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKITEMSEQID1)
            Me.columnITEM_TITLE = New Global.System.Data.DataColumn("ITEM_TITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_TITLE)
            Me.columnITEM_DESCRIPTION = New Global.System.Data.DataColumn("ITEM_DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_DESCRIPTION)
            Me.columnITEM_DUEDATE = New Global.System.Data.DataColumn("ITEM_DUEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_DUEDATE)
            Me.columnLEADTIME = New Global.System.Data.DataColumn("LEADTIME", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLEADTIME)
            Me.columnITEM_CLOSEDDATE = New Global.System.Data.DataColumn("ITEM_CLOSEDDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_CLOSEDDATE)
            Me.columnACTIVITYNAME = New Global.System.Data.DataColumn("ACTIVITYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTIVITYNAME)
            Me.columnHEADERTYPENAME = New Global.System.Data.DataColumn("HEADERTYPENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEADERTYPENAME)
            Me.columnBUSUNITMGR = New Global.System.Data.DataColumn("BUSUNITMGR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUSUNITMGR)
            Me.columnTYPEMGR = New Global.System.Data.DataColumn("TYPEMGR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTYPEMGR)
            Me.columnMGR = New Global.System.Data.DataColumn("MGR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMGR)
            Me.columnCREATEDBY = New Global.System.Data.DataColumn("CREATEDBY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATEDBY)
            Me.columnWHOLE_NAME_CREATEDBY_PERSON = New Global.System.Data.DataColumn("WHOLE_NAME_CREATEDBY_PERSON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWHOLE_NAME_CREATEDBY_PERSON)
            Me.columnCREATEDBY_EMAIL = New Global.System.Data.DataColumn("CREATEDBY_EMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATEDBY_EMAIL)
            Me.columnCREATEDBY_DEFAULTLANGUAGE = New Global.System.Data.DataColumn("CREATEDBY_DEFAULTLANGUAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATEDBY_DEFAULTLANGUAGE)
            Me.columnRESPONSIBLEUSERNAME = New Global.System.Data.DataColumn("RESPONSIBLEUSERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPONSIBLEUSERNAME)
            Me.columnWHOLE_NAME_RESPONSIBLE_PERSON = New Global.System.Data.DataColumn("WHOLE_NAME_RESPONSIBLE_PERSON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWHOLE_NAME_RESPONSIBLE_PERSON)
            Me.columnRESPONSIBLE_EMAIL = New Global.System.Data.DataColumn("RESPONSIBLE_EMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPONSIBLE_EMAIL)
            Me.columnRESPONSIBLE_DEFAULTLANGUAGE = New Global.System.Data.DataColumn("RESPONSIBLE_DEFAULTLANGUAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPONSIBLE_DEFAULTLANGUAGE)
            Me.columnRESPONSIBLE_ROLE_NAMES = New Global.System.Data.DataColumn("RESPONSIBLE_ROLE_NAMES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPONSIBLE_ROLE_NAMES)
            Me.columnROLEDESCRIPTION = New Global.System.Data.DataColumn("ROLEDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLEDESCRIPTION)
            Me.columnMTTCOMMENT = New Global.System.Data.DataColumn("MTTCOMMENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMTTCOMMENT)
            Me.columnRECTYPE.MaxLength = 7
            Me.columnRECNUM.MaxLength = 1
            Me.columnTASKHEADERSEQID.AllowDBNull = false
            Me.columnTASKITEMSEQID.AllowDBNull = false
            Me.columnSITENAME.MaxLength = 100
            Me.columnTASKHEADERTITLE.MaxLength = 250
            Me.columnTASKITEMSEQID1.AllowDBNull = false
            Me.columnITEM_TITLE.MaxLength = 250
            Me.columnITEM_DESCRIPTION.MaxLength = 4000
            Me.columnACTIVITYNAME.MaxLength = 4000
            Me.columnHEADERTYPENAME.MaxLength = 4000
            Me.columnBUSUNITMGR.MaxLength = 4000
            Me.columnTYPEMGR.MaxLength = 4000
            Me.columnMGR.MaxLength = 4000
            Me.columnCREATEDBY.MaxLength = 50
            Me.columnWHOLE_NAME_CREATEDBY_PERSON.MaxLength = 41
            Me.columnCREATEDBY_EMAIL.MaxLength = 50
            Me.columnCREATEDBY_DEFAULTLANGUAGE.MaxLength = 6
            Me.columnRESPONSIBLEUSERNAME.MaxLength = 50
            Me.columnWHOLE_NAME_RESPONSIBLE_PERSON.MaxLength = 41
            Me.columnRESPONSIBLE_EMAIL.MaxLength = 50
            Me.columnRESPONSIBLE_DEFAULTLANGUAGE.MaxLength = 6
            Me.columnRESPONSIBLE_ROLE_NAMES.MaxLength = 4000
            Me.columnROLEDESCRIPTION.MaxLength = 250
            Me.columnMTTCOMMENT.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewImmediateEmailRow() As ImmediateEmailRow
            Return CType(Me.NewRow,ImmediateEmailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ImmediateEmailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ImmediateEmailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImmediateEmailRowChangedEvent) Is Nothing) Then
                RaiseEvent ImmediateEmailRowChanged(Me, New ImmediateEmailRowChangeEvent(CType(e.Row,ImmediateEmailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImmediateEmailRowChangingEvent) Is Nothing) Then
                RaiseEvent ImmediateEmailRowChanging(Me, New ImmediateEmailRowChangeEvent(CType(e.Row,ImmediateEmailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImmediateEmailRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImmediateEmailRowDeleted(Me, New ImmediateEmailRowChangeEvent(CType(e.Row,ImmediateEmailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImmediateEmailRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImmediateEmailRowDeleting(Me, New ImmediateEmailRowChangeEvent(CType(e.Row,ImmediateEmailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveImmediateEmailRow(ByVal row As ImmediateEmailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TaskDetail = New TaskDetail
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ImmediateEmailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CriticalDateDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTASKITEMSEQID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CriticalDate"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TASKITEMSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKITEMSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CriticalDateRow
            Get
                Return CType(Me.Rows(index),CriticalDateRow)
            End Get
        End Property
        
        Public Event CriticalDateRowChanging As CriticalDateRowChangeEventHandler
        
        Public Event CriticalDateRowChanged As CriticalDateRowChangeEventHandler
        
        Public Event CriticalDateRowDeleting As CriticalDateRowChangeEventHandler
        
        Public Event CriticalDateRowDeleted As CriticalDateRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCriticalDateRow(ByVal row As CriticalDateRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCriticalDateRow(ByVal TASKITEMSEQID As Decimal) As CriticalDateRow
            Dim rowCriticalDateRow As CriticalDateRow = CType(Me.NewRow,CriticalDateRow)
            Dim columnValuesArray() As Object = New Object() {TASKITEMSEQID}
            rowCriticalDateRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCriticalDateRow)
            Return rowCriticalDateRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CriticalDateDataTable = CType(MyBase.Clone,CriticalDateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CriticalDateDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTASKITEMSEQID = MyBase.Columns("TASKITEMSEQID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTASKITEMSEQID = New Global.System.Data.DataColumn("TASKITEMSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKITEMSEQID)
            Me.columnTASKITEMSEQID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCriticalDateRow() As CriticalDateRow
            Return CType(Me.NewRow,CriticalDateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CriticalDateRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CriticalDateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CriticalDateRowChangedEvent) Is Nothing) Then
                RaiseEvent CriticalDateRowChanged(Me, New CriticalDateRowChangeEvent(CType(e.Row,CriticalDateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CriticalDateRowChangingEvent) Is Nothing) Then
                RaiseEvent CriticalDateRowChanging(Me, New CriticalDateRowChangeEvent(CType(e.Row,CriticalDateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CriticalDateRowDeletedEvent) Is Nothing) Then
                RaiseEvent CriticalDateRowDeleted(Me, New CriticalDateRowChangeEvent(CType(e.Row,CriticalDateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CriticalDateRowDeletingEvent) Is Nothing) Then
                RaiseEvent CriticalDateRowDeleting(Me, New CriticalDateRowChangeEvent(CType(e.Row,CriticalDateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCriticalDateRow(ByVal row As CriticalDateRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TaskDetail = New TaskDetail
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CriticalDateDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MTTBATCHREPLICATIONDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnEMAIL_SECTION As Global.System.Data.DataColumn
        
        Private columnSITENAME As Global.System.Data.DataColumn
        
        Private columnTEMPLATE_TITLE As Global.System.Data.DataColumn
        
        Private columnSTATUS As Global.System.Data.DataColumn
        
        Private columnROLEDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnCREATEDBY As Global.System.Data.DataColumn
        
        Private columnTEMPLATESEQID As Global.System.Data.DataColumn
        
        Private columnEMAIL As Global.System.Data.DataColumn
        
        Private columnREPLICATOR_DEFAULTLANGUAGE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MTTBATCHREPLICATION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMAIL_SECTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMAIL_SECTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SITENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSITENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEMPLATE_TITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEMPLATE_TITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROLEDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLEDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATEDBYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATEDBY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TEMPLATESEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEMPLATESEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REPLICATOR_DEFAULTLANGUAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPLICATOR_DEFAULTLANGUAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MTTBATCHREPLICATIONRow
            Get
                Return CType(Me.Rows(index),MTTBATCHREPLICATIONRow)
            End Get
        End Property
        
        Public Event MTTBATCHREPLICATIONRowChanging As MTTBATCHREPLICATIONRowChangeEventHandler
        
        Public Event MTTBATCHREPLICATIONRowChanged As MTTBATCHREPLICATIONRowChangeEventHandler
        
        Public Event MTTBATCHREPLICATIONRowDeleting As MTTBATCHREPLICATIONRowChangeEventHandler
        
        Public Event MTTBATCHREPLICATIONRowDeleted As MTTBATCHREPLICATIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMTTBATCHREPLICATIONRow(ByVal row As MTTBATCHREPLICATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMTTBATCHREPLICATIONRow(ByVal EMAIL_SECTION As String, ByVal SITENAME As String, ByVal TEMPLATE_TITLE As String, ByVal STATUS As String, ByVal ROLEDESCRIPTION As String, ByVal CREATEDBY As String, ByVal TEMPLATESEQID As Decimal, ByVal EMAIL As String, ByVal REPLICATOR_DEFAULTLANGUAGE As String) As MTTBATCHREPLICATIONRow
            Dim rowMTTBATCHREPLICATIONRow As MTTBATCHREPLICATIONRow = CType(Me.NewRow,MTTBATCHREPLICATIONRow)
            Dim columnValuesArray() As Object = New Object() {EMAIL_SECTION, SITENAME, TEMPLATE_TITLE, STATUS, ROLEDESCRIPTION, CREATEDBY, TEMPLATESEQID, EMAIL, REPLICATOR_DEFAULTLANGUAGE}
            rowMTTBATCHREPLICATIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMTTBATCHREPLICATIONRow)
            Return rowMTTBATCHREPLICATIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MTTBATCHREPLICATIONDataTable = CType(MyBase.Clone,MTTBATCHREPLICATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MTTBATCHREPLICATIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEMAIL_SECTION = MyBase.Columns("EMAIL_SECTION")
            Me.columnSITENAME = MyBase.Columns("SITENAME")
            Me.columnTEMPLATE_TITLE = MyBase.Columns("TEMPLATE_TITLE")
            Me.columnSTATUS = MyBase.Columns("STATUS")
            Me.columnROLEDESCRIPTION = MyBase.Columns("ROLEDESCRIPTION")
            Me.columnCREATEDBY = MyBase.Columns("CREATEDBY")
            Me.columnTEMPLATESEQID = MyBase.Columns("TEMPLATESEQID")
            Me.columnEMAIL = MyBase.Columns("EMAIL")
            Me.columnREPLICATOR_DEFAULTLANGUAGE = MyBase.Columns("REPLICATOR_DEFAULTLANGUAGE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEMAIL_SECTION = New Global.System.Data.DataColumn("EMAIL_SECTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMAIL_SECTION)
            Me.columnSITENAME = New Global.System.Data.DataColumn("SITENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSITENAME)
            Me.columnTEMPLATE_TITLE = New Global.System.Data.DataColumn("TEMPLATE_TITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEMPLATE_TITLE)
            Me.columnSTATUS = New Global.System.Data.DataColumn("STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS)
            Me.columnROLEDESCRIPTION = New Global.System.Data.DataColumn("ROLEDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLEDESCRIPTION)
            Me.columnCREATEDBY = New Global.System.Data.DataColumn("CREATEDBY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATEDBY)
            Me.columnTEMPLATESEQID = New Global.System.Data.DataColumn("TEMPLATESEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEMPLATESEQID)
            Me.columnEMAIL = New Global.System.Data.DataColumn("EMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMAIL)
            Me.columnREPLICATOR_DEFAULTLANGUAGE = New Global.System.Data.DataColumn("REPLICATOR_DEFAULTLANGUAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPLICATOR_DEFAULTLANGUAGE)
            Me.columnEMAIL_SECTION.MaxLength = 9
            Me.columnSITENAME.MaxLength = 100
            Me.columnTEMPLATE_TITLE.MaxLength = 2000
            Me.columnSTATUS.MaxLength = 500
            Me.columnROLEDESCRIPTION.MaxLength = 250
            Me.columnCREATEDBY.MaxLength = 50
            Me.columnEMAIL.MaxLength = 50
            Me.columnREPLICATOR_DEFAULTLANGUAGE.MaxLength = 6
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMTTBATCHREPLICATIONRow() As MTTBATCHREPLICATIONRow
            Return CType(Me.NewRow,MTTBATCHREPLICATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MTTBATCHREPLICATIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MTTBATCHREPLICATIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MTTBATCHREPLICATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent MTTBATCHREPLICATIONRowChanged(Me, New MTTBATCHREPLICATIONRowChangeEvent(CType(e.Row,MTTBATCHREPLICATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MTTBATCHREPLICATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent MTTBATCHREPLICATIONRowChanging(Me, New MTTBATCHREPLICATIONRowChangeEvent(CType(e.Row,MTTBATCHREPLICATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MTTBATCHREPLICATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent MTTBATCHREPLICATIONRowDeleted(Me, New MTTBATCHREPLICATIONRowChangeEvent(CType(e.Row,MTTBATCHREPLICATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MTTBATCHREPLICATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent MTTBATCHREPLICATIONRowDeleting(Me, New MTTBATCHREPLICATIONRowChangeEvent(CType(e.Row,MTTBATCHREPLICATIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMTTBATCHREPLICATIONRow(ByVal row As MTTBATCHREPLICATIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TaskDetail = New TaskDetail
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MTTBATCHREPLICATIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ResponsibleUserRow
        Inherits Global.System.Data.DataRow
        
        Private tableResponsibleUser As ResponsibleUserDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableResponsibleUser = CType(Me.Table,ResponsibleUserDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SORTORDER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableResponsibleUser.SORTORDERColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SORTORDER' in table 'ResponsibleUser' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResponsibleUser.SORTORDERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROLEDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableResponsibleUser.ROLEDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROLEDESCRIPTION' in table 'ResponsibleUser' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResponsibleUser.ROLEDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableResponsibleUser.NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NAME' in table 'ResponsibleUser' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResponsibleUser.NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USERNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableResponsibleUser.USERNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USERNAME' in table 'ResponsibleUser' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResponsibleUser.USERNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROLESEQID() As String
            Get
                If Me.IsROLESEQIDNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tableResponsibleUser.ROLESEQIDColumn),String)
                End If
            End Get
            Set
                Me(Me.tableResponsibleUser.ROLESEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROLENAME() As String
            Get
                If Me.IsROLENAMENull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableResponsibleUser.ROLENAMEColumn),String)
                End If
            End Get
            Set
                Me(Me.tableResponsibleUser.ROLENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSORTORDERNull() As Boolean
            Return Me.IsNull(Me.tableResponsibleUser.SORTORDERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSORTORDERNull()
            Me(Me.tableResponsibleUser.SORTORDERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROLEDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableResponsibleUser.ROLEDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROLEDESCRIPTIONNull()
            Me(Me.tableResponsibleUser.ROLEDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tableResponsibleUser.NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNAMENull()
            Me(Me.tableResponsibleUser.NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSERNAMENull() As Boolean
            Return Me.IsNull(Me.tableResponsibleUser.USERNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSERNAMENull()
            Me(Me.tableResponsibleUser.USERNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROLESEQIDNull() As Boolean
            Return Me.IsNull(Me.tableResponsibleUser.ROLESEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROLESEQIDNull()
            Me(Me.tableResponsibleUser.ROLESEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROLENAMENull() As Boolean
            Return Me.IsNull(Me.tableResponsibleUser.ROLENAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROLENAMENull()
            Me(Me.tableResponsibleUser.ROLENAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TaskItemRow
        Inherits Global.System.Data.DataRow
        
        Private tableTaskItem As TaskItemDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTaskItem = CType(Me.Table,TaskItemDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TASKITEMSEQID() As Integer
            Get
                Return CType(Me(Me.tableTaskItem.TASKITEMSEQIDColumn),Integer)
            End Get
            Set
                Me(Me.tableTaskItem.TASKITEMSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TASKHEADERSEQID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.TASKHEADERSEQIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TASKHEADERSEQID' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.TASKHEADERSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TITLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.TITLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TITLE' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.TITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRIORITY() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.PRIORITYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRIORITY' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.PRIORITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATECRITICAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.DATECRITICALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATECRITICAL' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.DATECRITICALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DUEDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.DUEDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DUEDATE' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.DUEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLOSEDDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.CLOSEDDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLOSEDDATE' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.CLOSEDDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUSSEQID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.STATUSSEQIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATUSSEQID' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.STATUSSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUSNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.STATUSNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATUSNAME' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.STATUSNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LEADTIME() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.LEADTIMEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LEADTIME' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.LEADTIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROOTTASKITEMSEQID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.ROOTTASKITEMSEQIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROOTTASKITEMSEQID' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.ROOTTASKITEMSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESPONSIBLENAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.RESPONSIBLENAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESPONSIBLENAME' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.RESPONSIBLENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESPONSIBLEUSERNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.RESPONSIBLEUSERNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESPONSIBLEUSERNAME' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.RESPONSIBLEUSERNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROLENAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.ROLENAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROLENAME' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.ROLENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESPONSIBLEROLESEQID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.RESPONSIBLEROLESEQIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESPONSIBLEROLESEQID' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.RESPONSIBLEROLESEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATEDBY() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.CREATEDBYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATEDBY' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.CREATEDBYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATEDDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.CREATEDDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATEDDATE' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.CREATEDDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LASTUPDATEUSERNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.LASTUPDATEUSERNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LASTUPDATEUSERNAME' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.LASTUPDATEUSERNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LASTUPDATEDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.LASTUPDATEDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LASTUPDATEDATE' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.LASTUPDATEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.DESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESCRIPTION' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESPROLEPLANTCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.RESPROLEPLANTCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESPROLEPLANTCODE' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.RESPROLEPLANTCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROLEDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.ROLEDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROLEDESCRIPTION' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.ROLEDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESPROLESITENAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.RESPROLESITENAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESPROLESITENAME' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.RESPROLESITENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEPENDENTTASKSEQID() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.DEPENDENTTASKSEQIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEPENDENTTASKSEQID' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.DEPENDENTTASKSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DAYSBEFORE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.DAYSBEFOREColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DAYSBEFORE' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.DAYSBEFOREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEPENDENTCHILDID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.DEPENDENTCHILDIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEPENDENTCHILDID' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.DEPENDENTCHILDIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DAYSAFTER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.DAYSAFTERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DAYSAFTER' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.DAYSAFTERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WORKORDER() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItem.WORKORDERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WORKORDER' in table 'TaskItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItem.WORKORDERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTASKHEADERSEQIDNull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.TASKHEADERSEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTASKHEADERSEQIDNull()
            Me(Me.tableTaskItem.TASKHEADERSEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTITLENull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.TITLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTITLENull()
            Me(Me.tableTaskItem.TITLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRIORITYNull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.PRIORITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRIORITYNull()
            Me(Me.tableTaskItem.PRIORITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATECRITICALNull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.DATECRITICALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATECRITICALNull()
            Me(Me.tableTaskItem.DATECRITICALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDUEDATENull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.DUEDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDUEDATENull()
            Me(Me.tableTaskItem.DUEDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLOSEDDATENull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.CLOSEDDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLOSEDDATENull()
            Me(Me.tableTaskItem.CLOSEDDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUSSEQIDNull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.STATUSSEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUSSEQIDNull()
            Me(Me.tableTaskItem.STATUSSEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUSNAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.STATUSNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUSNAMENull()
            Me(Me.tableTaskItem.STATUSNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLEADTIMENull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.LEADTIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLEADTIMENull()
            Me(Me.tableTaskItem.LEADTIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROOTTASKITEMSEQIDNull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.ROOTTASKITEMSEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROOTTASKITEMSEQIDNull()
            Me(Me.tableTaskItem.ROOTTASKITEMSEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESPONSIBLENAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.RESPONSIBLENAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESPONSIBLENAMENull()
            Me(Me.tableTaskItem.RESPONSIBLENAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESPONSIBLEUSERNAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.RESPONSIBLEUSERNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESPONSIBLEUSERNAMENull()
            Me(Me.tableTaskItem.RESPONSIBLEUSERNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROLENAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.ROLENAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROLENAMENull()
            Me(Me.tableTaskItem.ROLENAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESPONSIBLEROLESEQIDNull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.RESPONSIBLEROLESEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESPONSIBLEROLESEQIDNull()
            Me(Me.tableTaskItem.RESPONSIBLEROLESEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATEDBYNull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.CREATEDBYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATEDBYNull()
            Me(Me.tableTaskItem.CREATEDBYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATEDDATENull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.CREATEDDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATEDDATENull()
            Me(Me.tableTaskItem.CREATEDDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLASTUPDATEUSERNAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.LASTUPDATEUSERNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLASTUPDATEUSERNAMENull()
            Me(Me.tableTaskItem.LASTUPDATEUSERNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLASTUPDATEDATENull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.LASTUPDATEDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLASTUPDATEDATENull()
            Me(Me.tableTaskItem.LASTUPDATEDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.DESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tableTaskItem.DESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESPROLEPLANTCODENull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.RESPROLEPLANTCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESPROLEPLANTCODENull()
            Me(Me.tableTaskItem.RESPROLEPLANTCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROLEDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.ROLEDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROLEDESCRIPTIONNull()
            Me(Me.tableTaskItem.ROLEDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESPROLESITENAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.RESPROLESITENAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESPROLESITENAMENull()
            Me(Me.tableTaskItem.RESPROLESITENAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEPENDENTTASKSEQIDNull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.DEPENDENTTASKSEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEPENDENTTASKSEQIDNull()
            Me(Me.tableTaskItem.DEPENDENTTASKSEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDAYSBEFORENull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.DAYSBEFOREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDAYSBEFORENull()
            Me(Me.tableTaskItem.DAYSBEFOREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEPENDENTCHILDIDNull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.DEPENDENTCHILDIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEPENDENTCHILDIDNull()
            Me(Me.tableTaskItem.DEPENDENTCHILDIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDAYSAFTERNull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.DAYSAFTERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDAYSAFTERNull()
            Me(Me.tableTaskItem.DAYSAFTERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWORKORDERNull() As Boolean
            Return Me.IsNull(Me.tableTaskItem.WORKORDERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWORKORDERNull()
            Me(Me.tableTaskItem.WORKORDERColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RecurringTasksRow
        Inherits Global.System.Data.DataRow
        
        Private tableRecurringTasks As RecurringTasksDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRecurringTasks = CType(Me.Table,RecurringTasksDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DUEDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecurringTasks.DUEDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DUEDATE' in table 'RecurringTasks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecurringTasks.DUEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TASKITEMSEQID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRecurringTasks.TASKITEMSEQIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TASKITEMSEQID' in table 'RecurringTasks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecurringTasks.TASKITEMSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROOTTASKITEMSEQID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRecurringTasks.ROOTTASKITEMSEQIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROOTTASKITEMSEQID' in table 'RecurringTasks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecurringTasks.ROOTTASKITEMSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUSSEQID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableRecurringTasks.STATUSSEQIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATUSSEQID' in table 'RecurringTasks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecurringTasks.STATUSSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WORKORDER() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecurringTasks.WORKORDERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WORKORDER' in table 'RecurringTasks' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecurringTasks.WORKORDERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDUEDATENull() As Boolean
            Return Me.IsNull(Me.tableRecurringTasks.DUEDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDUEDATENull()
            Me(Me.tableRecurringTasks.DUEDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTASKITEMSEQIDNull() As Boolean
            Return Me.IsNull(Me.tableRecurringTasks.TASKITEMSEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTASKITEMSEQIDNull()
            Me(Me.tableRecurringTasks.TASKITEMSEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROOTTASKITEMSEQIDNull() As Boolean
            Return Me.IsNull(Me.tableRecurringTasks.ROOTTASKITEMSEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROOTTASKITEMSEQIDNull()
            Me(Me.tableRecurringTasks.ROOTTASKITEMSEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUSSEQIDNull() As Boolean
            Return Me.IsNull(Me.tableRecurringTasks.STATUSSEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUSSEQIDNull()
            Me(Me.tableRecurringTasks.STATUSSEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWORKORDERNull() As Boolean
            Return Me.IsNull(Me.tableRecurringTasks.WORKORDERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWORKORDERNull()
            Me(Me.tableRecurringTasks.WORKORDERColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SubTaskRow
        Inherits Global.System.Data.DataRow
        
        Private tableSubTask As SubTaskDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSubTask = CType(Me.Table,SubTaskDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TASKITEMSEQID() As Decimal
            Get
                Return CType(Me(Me.tableSubTask.TASKITEMSEQIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableSubTask.TASKITEMSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TASKHEADERSEQID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSubTask.TASKHEADERSEQIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TASKHEADERSEQID' in table 'SubTask' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubTask.TASKHEADERSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TITLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSubTask.TITLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TITLE' in table 'SubTask' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubTask.TITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROOTTASKITEMSEQID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSubTask.ROOTTASKITEMSEQIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROOTTASKITEMSEQID' in table 'SubTask' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubTask.ROOTTASKITEMSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PARENTSUBTASKSEQID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSubTask.PARENTSUBTASKSEQIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PARENTSUBTASKSEQID' in table 'SubTask' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubTask.PARENTSUBTASKSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESPONSIBLENAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableSubTask.RESPONSIBLENAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESPONSIBLENAME' in table 'SubTask' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubTask.RESPONSIBLENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESPONSIBLEUSERNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableSubTask.RESPONSIBLEUSERNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESPONSIBLEUSERNAME' in table 'SubTask' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubTask.RESPONSIBLEUSERNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROLENAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableSubTask.ROLENAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROLENAME' in table 'SubTask' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubTask.ROLENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESPONSIBLEROLESEQID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSubTask.RESPONSIBLEROLESEQIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESPONSIBLEROLESEQID' in table 'SubTask' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubTask.RESPONSIBLEROLESEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATEDBY() As String
            Get
                Try 
                    Return CType(Me(Me.tableSubTask.CREATEDBYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATEDBY' in table 'SubTask' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubTask.CREATEDBYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATEDDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSubTask.CREATEDDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATEDDATE' in table 'SubTask' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubTask.CREATEDDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LASTUPDATEUSERNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableSubTask.LASTUPDATEUSERNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LASTUPDATEUSERNAME' in table 'SubTask' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubTask.LASTUPDATEUSERNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LASTUPDATEDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSubTask.LASTUPDATEDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LASTUPDATEDATE' in table 'SubTask' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubTask.LASTUPDATEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSubTask.DESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESCRIPTION' in table 'SubTask' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubTask.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DAYSAFTER() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSubTask.DAYSAFTERColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DAYSAFTER' in table 'SubTask' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubTask.DAYSAFTERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESPROLEPLANTCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSubTask.RESPROLEPLANTCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESPROLEPLANTCODE' in table 'SubTask' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubTask.RESPROLEPLANTCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROLEDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSubTask.ROLEDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROLEDESCRIPTION' in table 'SubTask' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubTask.ROLEDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESPROLESITENAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableSubTask.RESPROLESITENAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESPROLESITENAME' in table 'SubTask' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubTask.RESPROLESITENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTASKHEADERSEQIDNull() As Boolean
            Return Me.IsNull(Me.tableSubTask.TASKHEADERSEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTASKHEADERSEQIDNull()
            Me(Me.tableSubTask.TASKHEADERSEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTITLENull() As Boolean
            Return Me.IsNull(Me.tableSubTask.TITLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTITLENull()
            Me(Me.tableSubTask.TITLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROOTTASKITEMSEQIDNull() As Boolean
            Return Me.IsNull(Me.tableSubTask.ROOTTASKITEMSEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROOTTASKITEMSEQIDNull()
            Me(Me.tableSubTask.ROOTTASKITEMSEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPARENTSUBTASKSEQIDNull() As Boolean
            Return Me.IsNull(Me.tableSubTask.PARENTSUBTASKSEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPARENTSUBTASKSEQIDNull()
            Me(Me.tableSubTask.PARENTSUBTASKSEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESPONSIBLENAMENull() As Boolean
            Return Me.IsNull(Me.tableSubTask.RESPONSIBLENAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESPONSIBLENAMENull()
            Me(Me.tableSubTask.RESPONSIBLENAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESPONSIBLEUSERNAMENull() As Boolean
            Return Me.IsNull(Me.tableSubTask.RESPONSIBLEUSERNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESPONSIBLEUSERNAMENull()
            Me(Me.tableSubTask.RESPONSIBLEUSERNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROLENAMENull() As Boolean
            Return Me.IsNull(Me.tableSubTask.ROLENAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROLENAMENull()
            Me(Me.tableSubTask.ROLENAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESPONSIBLEROLESEQIDNull() As Boolean
            Return Me.IsNull(Me.tableSubTask.RESPONSIBLEROLESEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESPONSIBLEROLESEQIDNull()
            Me(Me.tableSubTask.RESPONSIBLEROLESEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATEDBYNull() As Boolean
            Return Me.IsNull(Me.tableSubTask.CREATEDBYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATEDBYNull()
            Me(Me.tableSubTask.CREATEDBYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATEDDATENull() As Boolean
            Return Me.IsNull(Me.tableSubTask.CREATEDDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATEDDATENull()
            Me(Me.tableSubTask.CREATEDDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLASTUPDATEUSERNAMENull() As Boolean
            Return Me.IsNull(Me.tableSubTask.LASTUPDATEUSERNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLASTUPDATEUSERNAMENull()
            Me(Me.tableSubTask.LASTUPDATEUSERNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLASTUPDATEDATENull() As Boolean
            Return Me.IsNull(Me.tableSubTask.LASTUPDATEDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLASTUPDATEDATENull()
            Me(Me.tableSubTask.LASTUPDATEDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableSubTask.DESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tableSubTask.DESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDAYSAFTERNull() As Boolean
            Return Me.IsNull(Me.tableSubTask.DAYSAFTERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDAYSAFTERNull()
            Me(Me.tableSubTask.DAYSAFTERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESPROLEPLANTCODENull() As Boolean
            Return Me.IsNull(Me.tableSubTask.RESPROLEPLANTCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESPROLEPLANTCODENull()
            Me(Me.tableSubTask.RESPROLEPLANTCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROLEDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableSubTask.ROLEDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROLEDESCRIPTIONNull()
            Me(Me.tableSubTask.ROLEDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESPROLESITENAMENull() As Boolean
            Return Me.IsNull(Me.tableSubTask.RESPROLESITENAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESPROLESITENAMENull()
            Me(Me.tableSubTask.RESPROLESITENAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UserDefaultsRow
        Inherits Global.System.Data.DataRow
        
        Private tableUserDefaults As UserDefaultsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUserDefaults = CType(Me.Table,UserDefaultsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USERNAME() As String
            Get
                Return CType(Me(Me.tableUserDefaults.USERNAMEColumn),String)
            End Get
            Set
                Me(Me.tableUserDefaults.USERNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROFILETYPESEQID() As Decimal
            Get
                Return CType(Me(Me.tableUserDefaults.PROFILETYPESEQIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableUserDefaults.PROFILETYPESEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APPLICATION() As String
            Get
                Return CType(Me(Me.tableUserDefaults.APPLICATIONColumn),String)
            End Get
            Set
                Me(Me.tableUserDefaults.APPLICATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROFILETYPEVALUE() As String
            Get
                Try 
                    Return CType(Me(Me.tableUserDefaults.PROFILETYPEVALUEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROFILETYPEVALUE' in table 'UserDefaults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserDefaults.PROFILETYPEVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LASTUPDATEUSERNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableUserDefaults.LASTUPDATEUSERNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LASTUPDATEUSERNAME' in table 'UserDefaults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserDefaults.LASTUPDATEUSERNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LASTUPDATEDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUserDefaults.LASTUPDATEDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LASTUPDATEDATE' in table 'UserDefaults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserDefaults.LASTUPDATEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROFILETYPENAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableUserDefaults.PROFILETYPENAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROFILETYPENAME' in table 'UserDefaults' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserDefaults.PROFILETYPENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROFILETYPEVALUENull() As Boolean
            Return Me.IsNull(Me.tableUserDefaults.PROFILETYPEVALUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROFILETYPEVALUENull()
            Me(Me.tableUserDefaults.PROFILETYPEVALUEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLASTUPDATEUSERNAMENull() As Boolean
            Return Me.IsNull(Me.tableUserDefaults.LASTUPDATEUSERNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLASTUPDATEUSERNAMENull()
            Me(Me.tableUserDefaults.LASTUPDATEUSERNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLASTUPDATEDATENull() As Boolean
            Return Me.IsNull(Me.tableUserDefaults.LASTUPDATEDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLASTUPDATEDATENull()
            Me(Me.tableUserDefaults.LASTUPDATEDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROFILETYPENAMENull() As Boolean
            Return Me.IsNull(Me.tableUserDefaults.PROFILETYPENAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROFILETYPENAMENull()
            Me(Me.tableUserDefaults.PROFILETYPENAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RecurringParametersRow
        Inherits Global.System.Data.DataRow
        
        Private tableRecurringParameters As RecurringParametersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRecurringParameters = CType(Me.Table,RecurringParametersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TASKITEMSEQID() As Decimal
            Get
                Return CType(Me(Me.tableRecurringParameters.TASKITEMSEQIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableRecurringParameters.TASKITEMSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROFILETYPESEQID() As Decimal
            Get
                Return CType(Me(Me.tableRecurringParameters.PROFILETYPESEQIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableRecurringParameters.PROFILETYPESEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROFILETYPEVALUE() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecurringParameters.PROFILETYPEVALUEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROFILETYPEVALUE' in table 'RecurringParameters' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableRecurringParameters.PROFILETYPEVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LASTUPDATEUSERNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecurringParameters.LASTUPDATEUSERNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LASTUPDATEUSERNAME' in table 'RecurringParameters' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecurringParameters.LASTUPDATEUSERNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LASTUPDATEDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRecurringParameters.LASTUPDATEDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LASTUPDATEDATE' in table 'RecurringParameters' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecurringParameters.LASTUPDATEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROFILETYPENAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecurringParameters.PROFILETYPENAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROFILETYPENAME' in table 'RecurringParameters' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecurringParameters.PROFILETYPENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROFILETYPEVALUENull() As Boolean
            Return Me.IsNull(Me.tableRecurringParameters.PROFILETYPEVALUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROFILETYPEVALUENull()
            Me(Me.tableRecurringParameters.PROFILETYPEVALUEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLASTUPDATEUSERNAMENull() As Boolean
            Return Me.IsNull(Me.tableRecurringParameters.LASTUPDATEUSERNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLASTUPDATEUSERNAMENull()
            Me(Me.tableRecurringParameters.LASTUPDATEUSERNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLASTUPDATEDATENull() As Boolean
            Return Me.IsNull(Me.tableRecurringParameters.LASTUPDATEDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLASTUPDATEDATENull()
            Me(Me.tableRecurringParameters.LASTUPDATEDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROFILETYPENAMENull() As Boolean
            Return Me.IsNull(Me.tableRecurringParameters.PROFILETYPENAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROFILETYPENAMENull()
            Me(Me.tableRecurringParameters.PROFILETYPENAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RecurringParametersListRow
        Inherits Global.System.Data.DataRow
        
        Private tableRecurringParametersList As RecurringParametersListDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRecurringParametersList = CType(Me.Table,RecurringParametersListDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROFILETYPESEQID() As Decimal
            Get
                Return CType(Me(Me.tableRecurringParametersList.PROFILETYPESEQIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableRecurringParametersList.PROFILETYPESEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROFILETYPENAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecurringParametersList.PROFILETYPENAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROFILETYPENAME' in table 'RecurringParametersList' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecurringParametersList.PROFILETYPENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROFILETYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecurringParametersList.PROFILETYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROFILETYPE' in table 'RecurringParametersList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecurringParametersList.PROFILETYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROFILETYPENAMENull() As Boolean
            Return Me.IsNull(Me.tableRecurringParametersList.PROFILETYPENAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROFILETYPENAMENull()
            Me(Me.tableRecurringParametersList.PROFILETYPENAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROFILETYPENull() As Boolean
            Return Me.IsNull(Me.tableRecurringParametersList.PROFILETYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROFILETYPENull()
            Me(Me.tableRecurringParametersList.PROFILETYPEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TaskItemCommentsRow
        Inherits Global.System.Data.DataRow
        
        Private tableTaskItemComments As TaskItemCommentsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTaskItemComments = CType(Me.Table,TaskItemCommentsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMENTSEQID() As Decimal
            Get
                Return CType(Me(Me.tableTaskItemComments.COMMENTSEQIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableTaskItemComments.COMMENTSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USERNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItemComments.USERNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USERNAME' in table 'TaskItemComments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItemComments.USERNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LASTUPDATEUSERNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItemComments.LASTUPDATEUSERNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LASTUPDATEUSERNAME' in table 'TaskItemComments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItemComments.LASTUPDATEUSERNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LASTUPDATEDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItemComments.LASTUPDATEDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LASTUPDATEDATE' in table 'TaskItemComments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItemComments.LASTUPDATEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskItemComments.COMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENTS' in table 'TaskItemComments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskItemComments.COMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSERNAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskItemComments.USERNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSERNAMENull()
            Me(Me.tableTaskItemComments.USERNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLASTUPDATEUSERNAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskItemComments.LASTUPDATEUSERNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLASTUPDATEUSERNAMENull()
            Me(Me.tableTaskItemComments.LASTUPDATEUSERNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLASTUPDATEDATENull() As Boolean
            Return Me.IsNull(Me.tableTaskItemComments.LASTUPDATEDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLASTUPDATEDATENull()
            Me(Me.tableTaskItemComments.LASTUPDATEDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tableTaskItemComments.COMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMENTSNull()
            Me(Me.tableTaskItemComments.COMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ImmediateEmailRow
        Inherits Global.System.Data.DataRow
        
        Private tableImmediateEmail As ImmediateEmailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableImmediateEmail = CType(Me.Table,ImmediateEmailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.RECTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECTYPE' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.RECTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECNUM() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.RECNUMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECNUM' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.RECNUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TASKHEADERSEQID() As Decimal
            Get
                Return CType(Me(Me.tableImmediateEmail.TASKHEADERSEQIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableImmediateEmail.TASKHEADERSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TASKITEMSEQID() As Decimal
            Get
                Return CType(Me(Me.tableImmediateEmail.TASKITEMSEQIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableImmediateEmail.TASKITEMSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SITENAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.SITENAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SITENAME' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.SITENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TASKHEADERTITLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.TASKHEADERTITLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TASKHEADERTITLE' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.TASKHEADERTITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TASKITEMSEQID1() As Decimal
            Get
                Return CType(Me(Me.tableImmediateEmail.TASKITEMSEQID1Column),Decimal)
            End Get
            Set
                Me(Me.tableImmediateEmail.TASKITEMSEQID1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_TITLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.ITEM_TITLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_TITLE' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.ITEM_TITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_DESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.ITEM_DESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_DESCRIPTION' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.ITEM_DESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_DUEDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.ITEM_DUEDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_DUEDATE' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.ITEM_DUEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LEADTIME() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.LEADTIMEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LEADTIME' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.LEADTIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_CLOSEDDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.ITEM_CLOSEDDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_CLOSEDDATE' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.ITEM_CLOSEDDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACTIVITYNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.ACTIVITYNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACTIVITYNAME' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.ACTIVITYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HEADERTYPENAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.HEADERTYPENAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEADERTYPENAME' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.HEADERTYPENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BUSUNITMGR() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.BUSUNITMGRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUSUNITMGR' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.BUSUNITMGRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TYPEMGR() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.TYPEMGRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TYPEMGR' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.TYPEMGRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MGR() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.MGRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MGR' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.MGRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATEDBY() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.CREATEDBYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATEDBY' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.CREATEDBYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WHOLE_NAME_CREATEDBY_PERSON() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.WHOLE_NAME_CREATEDBY_PERSONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WHOLE_NAME_CREATEDBY_PERSON' in table 'ImmediateEmail' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.WHOLE_NAME_CREATEDBY_PERSONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATEDBY_EMAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.CREATEDBY_EMAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATEDBY_EMAIL' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.CREATEDBY_EMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATEDBY_DEFAULTLANGUAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.CREATEDBY_DEFAULTLANGUAGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATEDBY_DEFAULTLANGUAGE' in table 'ImmediateEmail' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.CREATEDBY_DEFAULTLANGUAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESPONSIBLEUSERNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.RESPONSIBLEUSERNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESPONSIBLEUSERNAME' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.RESPONSIBLEUSERNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WHOLE_NAME_RESPONSIBLE_PERSON() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.WHOLE_NAME_RESPONSIBLE_PERSONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WHOLE_NAME_RESPONSIBLE_PERSON' in table 'ImmediateEmail' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.WHOLE_NAME_RESPONSIBLE_PERSONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESPONSIBLE_EMAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.RESPONSIBLE_EMAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESPONSIBLE_EMAIL' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.RESPONSIBLE_EMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESPONSIBLE_DEFAULTLANGUAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.RESPONSIBLE_DEFAULTLANGUAGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESPONSIBLE_DEFAULTLANGUAGE' in table 'ImmediateEmail' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.RESPONSIBLE_DEFAULTLANGUAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESPONSIBLE_ROLE_NAMES() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.RESPONSIBLE_ROLE_NAMESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESPONSIBLE_ROLE_NAMES' in table 'ImmediateEmail' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.RESPONSIBLE_ROLE_NAMESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROLEDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.ROLEDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROLEDESCRIPTION' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.ROLEDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MTTCOMMENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableImmediateEmail.MTTCOMMENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MTTCOMMENT' in table 'ImmediateEmail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImmediateEmail.MTTCOMMENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECTYPENull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.RECTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECTYPENull()
            Me(Me.tableImmediateEmail.RECTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECNUMNull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.RECNUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECNUMNull()
            Me(Me.tableImmediateEmail.RECNUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSITENAMENull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.SITENAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSITENAMENull()
            Me(Me.tableImmediateEmail.SITENAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTASKHEADERTITLENull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.TASKHEADERTITLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTASKHEADERTITLENull()
            Me(Me.tableImmediateEmail.TASKHEADERTITLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_TITLENull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.ITEM_TITLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_TITLENull()
            Me(Me.tableImmediateEmail.ITEM_TITLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_DESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.ITEM_DESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_DESCRIPTIONNull()
            Me(Me.tableImmediateEmail.ITEM_DESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_DUEDATENull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.ITEM_DUEDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_DUEDATENull()
            Me(Me.tableImmediateEmail.ITEM_DUEDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLEADTIMENull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.LEADTIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLEADTIMENull()
            Me(Me.tableImmediateEmail.LEADTIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_CLOSEDDATENull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.ITEM_CLOSEDDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_CLOSEDDATENull()
            Me(Me.tableImmediateEmail.ITEM_CLOSEDDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACTIVITYNAMENull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.ACTIVITYNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACTIVITYNAMENull()
            Me(Me.tableImmediateEmail.ACTIVITYNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHEADERTYPENAMENull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.HEADERTYPENAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHEADERTYPENAMENull()
            Me(Me.tableImmediateEmail.HEADERTYPENAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBUSUNITMGRNull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.BUSUNITMGRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBUSUNITMGRNull()
            Me(Me.tableImmediateEmail.BUSUNITMGRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTYPEMGRNull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.TYPEMGRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTYPEMGRNull()
            Me(Me.tableImmediateEmail.TYPEMGRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMGRNull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.MGRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMGRNull()
            Me(Me.tableImmediateEmail.MGRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATEDBYNull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.CREATEDBYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATEDBYNull()
            Me(Me.tableImmediateEmail.CREATEDBYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWHOLE_NAME_CREATEDBY_PERSONNull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.WHOLE_NAME_CREATEDBY_PERSONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWHOLE_NAME_CREATEDBY_PERSONNull()
            Me(Me.tableImmediateEmail.WHOLE_NAME_CREATEDBY_PERSONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATEDBY_EMAILNull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.CREATEDBY_EMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATEDBY_EMAILNull()
            Me(Me.tableImmediateEmail.CREATEDBY_EMAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATEDBY_DEFAULTLANGUAGENull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.CREATEDBY_DEFAULTLANGUAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATEDBY_DEFAULTLANGUAGENull()
            Me(Me.tableImmediateEmail.CREATEDBY_DEFAULTLANGUAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESPONSIBLEUSERNAMENull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.RESPONSIBLEUSERNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESPONSIBLEUSERNAMENull()
            Me(Me.tableImmediateEmail.RESPONSIBLEUSERNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWHOLE_NAME_RESPONSIBLE_PERSONNull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.WHOLE_NAME_RESPONSIBLE_PERSONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWHOLE_NAME_RESPONSIBLE_PERSONNull()
            Me(Me.tableImmediateEmail.WHOLE_NAME_RESPONSIBLE_PERSONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESPONSIBLE_EMAILNull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.RESPONSIBLE_EMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESPONSIBLE_EMAILNull()
            Me(Me.tableImmediateEmail.RESPONSIBLE_EMAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESPONSIBLE_DEFAULTLANGUAGENull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.RESPONSIBLE_DEFAULTLANGUAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESPONSIBLE_DEFAULTLANGUAGENull()
            Me(Me.tableImmediateEmail.RESPONSIBLE_DEFAULTLANGUAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESPONSIBLE_ROLE_NAMESNull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.RESPONSIBLE_ROLE_NAMESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESPONSIBLE_ROLE_NAMESNull()
            Me(Me.tableImmediateEmail.RESPONSIBLE_ROLE_NAMESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROLEDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.ROLEDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROLEDESCRIPTIONNull()
            Me(Me.tableImmediateEmail.ROLEDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMTTCOMMENTNull() As Boolean
            Return Me.IsNull(Me.tableImmediateEmail.MTTCOMMENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMTTCOMMENTNull()
            Me(Me.tableImmediateEmail.MTTCOMMENTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CriticalDateRow
        Inherits Global.System.Data.DataRow
        
        Private tableCriticalDate As CriticalDateDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCriticalDate = CType(Me.Table,CriticalDateDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TASKITEMSEQID() As Decimal
            Get
                Return CType(Me(Me.tableCriticalDate.TASKITEMSEQIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableCriticalDate.TASKITEMSEQIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MTTBATCHREPLICATIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableMTTBATCHREPLICATION As MTTBATCHREPLICATIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMTTBATCHREPLICATION = CType(Me.Table,MTTBATCHREPLICATIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMAIL_SECTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableMTTBATCHREPLICATION.EMAIL_SECTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMAIL_SECTION' in table 'MTTBATCHREPLICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTTBATCHREPLICATION.EMAIL_SECTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SITENAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMTTBATCHREPLICATION.SITENAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SITENAME' in table 'MTTBATCHREPLICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTTBATCHREPLICATION.SITENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEMPLATE_TITLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMTTBATCHREPLICATION.TEMPLATE_TITLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TEMPLATE_TITLE' in table 'MTTBATCHREPLICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTTBATCHREPLICATION.TEMPLATE_TITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tableMTTBATCHREPLICATION.STATUSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATUS' in table 'MTTBATCHREPLICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTTBATCHREPLICATION.STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROLEDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableMTTBATCHREPLICATION.ROLEDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROLEDESCRIPTION' in table 'MTTBATCHREPLICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTTBATCHREPLICATION.ROLEDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATEDBY() As String
            Get
                Try 
                    Return CType(Me(Me.tableMTTBATCHREPLICATION.CREATEDBYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATEDBY' in table 'MTTBATCHREPLICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTTBATCHREPLICATION.CREATEDBYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEMPLATESEQID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMTTBATCHREPLICATION.TEMPLATESEQIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TEMPLATESEQID' in table 'MTTBATCHREPLICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTTBATCHREPLICATION.TEMPLATESEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableMTTBATCHREPLICATION.EMAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMAIL' in table 'MTTBATCHREPLICATION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTTBATCHREPLICATION.EMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REPLICATOR_DEFAULTLANGUAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMTTBATCHREPLICATION.REPLICATOR_DEFAULTLANGUAGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REPLICATOR_DEFAULTLANGUAGE' in table 'MTTBATCHREPLICATION' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTTBATCHREPLICATION.REPLICATOR_DEFAULTLANGUAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMAIL_SECTIONNull() As Boolean
            Return Me.IsNull(Me.tableMTTBATCHREPLICATION.EMAIL_SECTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMAIL_SECTIONNull()
            Me(Me.tableMTTBATCHREPLICATION.EMAIL_SECTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSITENAMENull() As Boolean
            Return Me.IsNull(Me.tableMTTBATCHREPLICATION.SITENAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSITENAMENull()
            Me(Me.tableMTTBATCHREPLICATION.SITENAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEMPLATE_TITLENull() As Boolean
            Return Me.IsNull(Me.tableMTTBATCHREPLICATION.TEMPLATE_TITLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEMPLATE_TITLENull()
            Me(Me.tableMTTBATCHREPLICATION.TEMPLATE_TITLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableMTTBATCHREPLICATION.STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUSNull()
            Me(Me.tableMTTBATCHREPLICATION.STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROLEDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableMTTBATCHREPLICATION.ROLEDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROLEDESCRIPTIONNull()
            Me(Me.tableMTTBATCHREPLICATION.ROLEDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATEDBYNull() As Boolean
            Return Me.IsNull(Me.tableMTTBATCHREPLICATION.CREATEDBYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATEDBYNull()
            Me(Me.tableMTTBATCHREPLICATION.CREATEDBYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTEMPLATESEQIDNull() As Boolean
            Return Me.IsNull(Me.tableMTTBATCHREPLICATION.TEMPLATESEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTEMPLATESEQIDNull()
            Me(Me.tableMTTBATCHREPLICATION.TEMPLATESEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMAILNull() As Boolean
            Return Me.IsNull(Me.tableMTTBATCHREPLICATION.EMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMAILNull()
            Me(Me.tableMTTBATCHREPLICATION.EMAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREPLICATOR_DEFAULTLANGUAGENull() As Boolean
            Return Me.IsNull(Me.tableMTTBATCHREPLICATION.REPLICATOR_DEFAULTLANGUAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREPLICATOR_DEFAULTLANGUAGENull()
            Me(Me.tableMTTBATCHREPLICATION.REPLICATOR_DEFAULTLANGUAGEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ResponsibleUserRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ResponsibleUserRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ResponsibleUserRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ResponsibleUserRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TaskItemRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TaskItemRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TaskItemRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TaskItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RecurringTasksRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RecurringTasksRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RecurringTasksRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RecurringTasksRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SubTaskRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SubTaskRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SubTaskRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SubTaskRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UserDefaultsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UserDefaultsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UserDefaultsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UserDefaultsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RecurringParametersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RecurringParametersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RecurringParametersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RecurringParametersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RecurringParametersListRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RecurringParametersListRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RecurringParametersListRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RecurringParametersListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TaskItemCommentsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TaskItemCommentsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TaskItemCommentsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TaskItemCommentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ImmediateEmailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ImmediateEmailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ImmediateEmailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ImmediateEmailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CriticalDateRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CriticalDateRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CriticalDateRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CriticalDateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MTTBATCHREPLICATIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MTTBATCHREPLICATIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MTTBATCHREPLICATIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MTTBATCHREPLICATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace TaskDetailTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ResponsibleUserTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As OracleDataAdapter
        
        Private _connection As OracleConnection
        
        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ResponsibleUser"
            tableMapping.ColumnMappings.Add("SORTORDER", "SORTORDER")
            tableMapping.ColumnMappings.Add("ROLEDESCRIPTION", "ROLEDESCRIPTION")
            tableMapping.ColumnMappings.Add("NAME", "NAME")
            tableMapping.ColumnMappings.Add("USERNAME", "USERNAME")
            tableMapping.ColumnMappings.Add("ROLENAME", "ROLENAME")
            tableMapping.ColumnMappings.Add("ROLESEQID", "ROLESEQID")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(0) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTTASKITEM.GETRESPONSIBLELIST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_PLANTCODE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSRESPONSIBLELIST"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetResponsibleList(ByVal IN_PLANTCODE As String, ByRef RSRESPONSIBLELIST As Object) As TaskDetail.ResponsibleUserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_PLANTCODE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_PLANTCODE, String)
            End If
            Dim dataTable As TaskDetail.ResponsibleUserDataTable = New TaskDetail.ResponsibleUserDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSRESPONSIBLELIST = Global.System.DBNull.Value
            Else
                RSRESPONSIBLELIST = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class TaskItemTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TaskItem"
            tableMapping.ColumnMappings.Add("TASKITEMSEQID", "TASKITEMSEQID")
            tableMapping.ColumnMappings.Add("TASKHEADERSEQID", "TASKHEADERSEQID")
            tableMapping.ColumnMappings.Add("TITLE", "TITLE")
            tableMapping.ColumnMappings.Add("PRIORITY", "PRIORITY")
            tableMapping.ColumnMappings.Add("DATECRITICAL", "DATECRITICAL")
            tableMapping.ColumnMappings.Add("DUEDATE", "DUEDATE")
            tableMapping.ColumnMappings.Add("CLOSEDDATE", "CLOSEDDATE")
            tableMapping.ColumnMappings.Add("STATUSSEQID", "STATUSSEQID")
            tableMapping.ColumnMappings.Add("STATUSNAME", "STATUSNAME")
            tableMapping.ColumnMappings.Add("LEADTIME", "LEADTIME")
            tableMapping.ColumnMappings.Add("ROOTTASKITEMSEQID", "ROOTTASKITEMSEQID")
            tableMapping.ColumnMappings.Add("RESPONSIBLENAME", "RESPONSIBLENAME")
            tableMapping.ColumnMappings.Add("RESPONSIBLEUSERNAME", "RESPONSIBLEUSERNAME")
            tableMapping.ColumnMappings.Add("ROLENAME", "ROLENAME")
            tableMapping.ColumnMappings.Add("RESPONSIBLEROLESEQID", "RESPONSIBLEROLESEQID")
            tableMapping.ColumnMappings.Add("CREATEDBY", "CREATEDBY")
            tableMapping.ColumnMappings.Add("CREATEDDATE", "CREATEDDATE")
            tableMapping.ColumnMappings.Add("LASTUPDATEUSERNAME", "LASTUPDATEUSERNAME")
            tableMapping.ColumnMappings.Add("LASTUPDATEDATE", "LASTUPDATEDATE")
            tableMapping.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION")
            tableMapping.ColumnMappings.Add("RESPROLEPLANTCODE", "RESPROLEPLANTCODE")
            tableMapping.ColumnMappings.Add("ROLEDESCRIPTION", "ROLEDESCRIPTION")
            tableMapping.ColumnMappings.Add("RESPROLESITENAME", "RESPROLESITENAME")
            tableMapping.ColumnMappings.Add("DEPENDENTTASKSEQID", "DEPENDENTTASKSEQID")
            tableMapping.ColumnMappings.Add("DAYSBEFORE", "DAYSBEFORE")
            tableMapping.ColumnMappings.Add("DEPENDENTCHILDID", "DEPENDENTCHILDID")
            tableMapping.ColumnMappings.Add("DAYSAFTER", "DAYSAFTER")
            tableMapping.ColumnMappings.Add("WORKORDER", "WORKORDER")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(8) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTTASKITEM.GETTASKITEM"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_TASKITEM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSTASKITEM"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            Me._commandCollection(1) = New OracleCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "RELADMIN.MTTTASKITEM.DELETEDEPENDENTTASK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_DEPENDENTTASKITEM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_UPDATEFLAG"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_PARENTTASK"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DUEDATE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DEPENDENTCHILDID"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracledbType = OracledbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New OracleCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "RELADMIN.MTTTASKITEM.GETDEPENDENTTASKS"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_TASKITEM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSTASKITEM"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New OracleCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "RELADMIN.MTTTASKITEM.GETLASTCREATEDTASK"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_USERNAME"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSTASKITEM"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            Me._commandCollection(4) = New OracleCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "RELADMIN.MTTTASKITEM.GETOUTAGETEMPLATETASKITEM"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_TASKITEM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSTASKITEM"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            Me._commandCollection(5) = New OracleCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "RELADMIN.MTTTASKITEM.GETOUTAGETEMPLATETASKITEMLIST"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_TASKHEADER"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(5).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSTASKITEMLIST"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(5).Parameters.Add(param)
            Me._commandCollection(6) = New OracleCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "RELADMIN.MTTTASKITEM.GETTASKITEMLIST"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_TASKHEADER"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(6).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSTASKITEMLIST"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(6).Parameters.Add(param)
            Me._commandCollection(7) = New OracleCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "RELADMIN.MTTTASKITEM.UPDATEDEPENDENTTASKITEM"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_DEPENDENTTASKITEM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TASKHEADER"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_PARENTTASK"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_PARENTDUEDATE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TITLE"
            param.OracledbType = OracledbType.NVarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_USERNAME"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DESCRIPTION"
            param.OracledbType = OracledbType.NClob
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_RESPONSIBLEUSERNAME"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_RESPONSIBLEROLESEQID"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_RESPROLEPLANTCODE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DUEDATE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_CLOSEDDATE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_STATUSSEQID"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_PRIORITY"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DATECRITICAL"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DAYSBEFORE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_ROOTTASKITEMSEQID"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_UPDATEFLAG"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DEPENDENTCHILD"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_COMMENT"
            param.OracledbType = OracledbType.NClob
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_LEADTIME"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_WORKORDER"
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_DEPENDENTTASKITEM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracledbType = OracledbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracledbType = OracledbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(7).Parameters.Add(param)
            Me._commandCollection(8) = New OracleCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "RELADMIN.MTTTASKITEM.UPDATETASKITEM"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_TASKITEM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TASKHEADER"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DUEDATE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_CLOSEDDATE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TITLE"
            param.OracledbType = OracledbType.NVarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_USERNAME"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DESCRIPTION"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.NClob
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_PRIORITY"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DATECRITICAL"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_STATUSSEQID"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_LEADTIME"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_RESPONSIBLEUSERNAME"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_RESPONSIBLEROLESEQID"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_RESPROLEPLANTCODE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_UPDATEFLAG"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_COMMENT"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.NClob
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DAYSBEFORE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DAYSAFTER"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_WORKORDER"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_TASKITEM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracledbType = OracledbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracledbType = OracledbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(8).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetTaskItem(ByVal IN_TASKITEM As String, ByRef RSTASKITEM As Object) As TaskDetail.TaskItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_TASKITEM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TASKITEM, String)
            End If
            Dim dataTable As TaskDetail.TaskItemDataTable = New TaskDetail.TaskItemDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSTASKITEM = Global.System.DBNull.Value
            Else
                RSTASKITEM = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetDependentTasks(ByVal IN_TASKITEM As String, ByRef RSTASKITEM As Object) As TaskDetail.TaskItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (IN_TASKITEM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TASKITEM, String)
            End If
            Dim dataTable As TaskDetail.TaskItemDataTable = New TaskDetail.TaskItemDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSTASKITEM = Global.System.DBNull.Value
            Else
                RSTASKITEM = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetLastCreatedTaskItem(ByVal IN_USERNAME As String, ByRef RSTASKITEM As Object) As TaskDetail.TaskItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (IN_USERNAME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_USERNAME, String)
            End If
            Dim dataTable As TaskDetail.TaskItemDataTable = New TaskDetail.TaskItemDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSTASKITEM = Global.System.DBNull.Value
            Else
                RSTASKITEM = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetOutageTemplateTaskItem(ByVal IN_TASKITEM As String, ByRef RSTASKITEM As Object) As TaskDetail.TaskItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (IN_TASKITEM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TASKITEM, String)
            End If
            Dim dataTable As TaskDetail.TaskItemDataTable = New TaskDetail.TaskItemDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSTASKITEM = Global.System.DBNull.Value
            Else
                RSTASKITEM = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetOutageTemplateTaskItemList(ByVal IN_TASKHEADER As String, ByRef RSTASKITEMLIST As Object) As TaskDetail.TaskItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (IN_TASKHEADER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TASKHEADER, String)
            End If
            Dim dataTable As TaskDetail.TaskItemDataTable = New TaskDetail.TaskItemDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSTASKITEMLIST = Global.System.DBNull.Value
            Else
                RSTASKITEMLIST = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetTaskItemList(ByVal IN_TASKHEADER As String, ByRef RSTASKITEMLIST As Object) As TaskDetail.TaskItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (IN_TASKHEADER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TASKHEADER, String)
            End If
            Dim dataTable As TaskDetail.TaskItemDataTable = New TaskDetail.TaskItemDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSTASKITEMLIST = Global.System.DBNull.Value
            Else
                RSTASKITEMLIST = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function UpdateTaskItem( _
                    ByVal IN_TASKITEM As String, _
                    ByVal IN_TASKHEADER As String, _
                    ByVal IN_DUEDATE As String, _
                    ByVal IN_CLOSEDDATE As String, _
                    ByVal IN_TITLE As String, _
                    ByVal IN_USERNAME As String, _
                    ByVal IN_DESCRIPTION As Object, _
                    ByVal IN_PRIORITY As String, _
                    ByVal IN_DATECRITICAL As String, _
                    ByVal IN_STATUSSEQID As String, _
                    ByVal IN_LEADTIME As String, _
                    ByVal IN_RESPONSIBLEUSERNAME As String, _
                    ByVal IN_RESPONSIBLEROLESEQID As String, _
                    ByVal IN_RESPROLEPLANTCODE As String, _
                    ByVal IN_UPDATEFLAG As String, _
                    ByVal IN_COMMENT As Object, _
                    ByVal IN_DAYSBEFORE As String, _
                    ByVal IN_DAYSAFTER As String, _
                    ByVal IN_WORKORDER As String, _
                    ByRef OUT_TASKITEM As Global.System.Nullable(Of Decimal), _
                    ByRef OUT_STATUS As Global.System.Nullable(Of Decimal)) As TaskDetail.TaskItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (IN_TASKITEM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TASKITEM, String)
            End If
            If (IN_TASKHEADER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(IN_TASKHEADER, String)
            End If
            If (IN_DUEDATE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IN_DUEDATE, String)
            End If
            If (IN_CLOSEDDATE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(IN_CLOSEDDATE, String)
            End If
            If (IN_TITLE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(IN_TITLE, String)
            End If
            If (IN_USERNAME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(IN_USERNAME, String)
            End If
            If (IN_DESCRIPTION Is Nothing) OrElse IN_DESCRIPTION.ToString.Length = 0 Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(IN_DESCRIPTION, Object)
            End If
            If (IN_PRIORITY Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(IN_PRIORITY, String)
            End If
            If (IN_DATECRITICAL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(IN_DATECRITICAL, String)
            End If
            If (IN_STATUSSEQID Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(IN_STATUSSEQID, String)
            End If
            If (IN_LEADTIME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(IN_LEADTIME, String)
            End If
            If (IN_RESPONSIBLEUSERNAME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(IN_RESPONSIBLEUSERNAME, String)
            End If
            If (IN_RESPONSIBLEROLESEQID Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(IN_RESPONSIBLEROLESEQID, String)
            End If
            If (IN_RESPROLEPLANTCODE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(IN_RESPROLEPLANTCODE, String)
            End If
            If (IN_UPDATEFLAG Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(IN_UPDATEFLAG, String)
            End If
            If (IN_COMMENT Is Nothing) OrElse IN_COMMENT.ToString.Length = 0 Then
                Me.Adapter.SelectCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(15).Value = CType(IN_COMMENT, Object)
            End If
            If (IN_DAYSBEFORE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(16).Value = CType(IN_DAYSBEFORE, String)
            End If
            If (IN_DAYSAFTER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(17).Value = CType(IN_DAYSAFTER, String)
            End If
            If (IN_WORKORDER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(18).Value = CType(IN_WORKORDER, String)
            End If
            Dim dataTable As TaskDetail.TaskItemDataTable = New TaskDetail.TaskItemDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(19).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(19).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_TASKITEM = New Global.System.Nullable(Of Decimal)
            Else
                OUT_TASKITEM = New Global.System.Nullable(Of Decimal)(CType(Me.Adapter.SelectCommand.Parameters(19).Value, Decimal))
            End If
            If ((Me.Adapter.SelectCommand.Parameters(20).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(20).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_STATUS = New Global.System.Nullable(Of Decimal)
            Else
                OUT_STATUS = New Global.System.Nullable(Of Decimal)(CType(Me.Adapter.SelectCommand.Parameters(20).Value, Decimal))
            End If
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function DeleteDependentTask(ByVal IN_DEPENDENTTASKITEM As String, ByVal IN_UPDATEFLAG As String, ByVal IN_PARENTTASK As String, ByVal IN_DUEDATE As String, ByVal IN_DEPENDENTCHILDID As String, ByRef OUT_STATUS As Global.System.Nullable(Of Decimal)) As Object
            Dim command As OracleCommand = Me.CommandCollection(1)
            If (IN_DEPENDENTTASKITEM Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(IN_DEPENDENTTASKITEM, String)
            End If
            If (IN_UPDATEFLAG Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(IN_UPDATEFLAG, String)
            End If
            If (IN_PARENTTASK Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(IN_PARENTTASK, String)
            End If
            If (IN_DUEDATE Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(IN_DUEDATE, String)
            End If
            If (IN_DEPENDENTCHILDID Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(IN_DEPENDENTCHILDID, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((command.Parameters(5).Value Is Nothing) _
                        OrElse (command.Parameters(5).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_STATUS = New Global.System.Nullable(Of Decimal)
            Else
                OUT_STATUS = New Global.System.Nullable(Of Decimal)(CType(command.Parameters(5).Value, Decimal))
            End If
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function UpdateDependentTask( _
                    ByVal IN_DEPENDENTTASKITEM As String, _
                    ByVal IN_TASKHEADER As String, _
                    ByVal IN_PARENTTASK As String, _
                    ByVal IN_PARENTDUEDATE As String, _
                    ByVal IN_TITLE As String, _
                    ByVal IN_USERNAME As String, _
                    ByVal IN_DESCRIPTION As String, _
                    ByVal IN_RESPONSIBLEUSERNAME As String, _
                    ByVal IN_RESPONSIBLEROLESEQID As String, _
                    ByVal IN_RESPROLEPLANTCODE As String, _
                    ByVal IN_DUEDATE As String, _
                    ByVal IN_CLOSEDDATE As String, _
                    ByVal IN_STATUSSEQID As String, _
                    ByVal IN_PRIORITY As String, _
                    ByVal IN_DATECRITICAL As String, _
                    ByVal IN_DAYSBEFORE As String, _
                    ByVal IN_ROOTTASKITEMSEQID As String, _
                    ByVal IN_UPDATEFLAG As String, _
                    ByVal IN_DEPENDENTCHILD As String, _
                    ByVal IN_COMMENT As String, _
                    ByVal IN_LEADTIME As String, _
                    ByVal IN_WORKORDER As String, _
                    ByRef OUT_DEPENDENTTASKITEM As Global.System.Nullable(Of Decimal), _
                    ByRef OUT_STATUS As Global.System.Nullable(Of Decimal)) As Object
            Dim command As OracleCommand = Me.CommandCollection(7)
            If (IN_DEPENDENTTASKITEM Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(IN_DEPENDENTTASKITEM, String)
            End If
            If (IN_TASKHEADER Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(IN_TASKHEADER, String)
            End If
            If (IN_PARENTTASK Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(IN_PARENTTASK, String)
            End If
            If (IN_PARENTDUEDATE Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(IN_PARENTDUEDATE, String)
            End If
            If (IN_TITLE Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(IN_TITLE, String)
            End If
            If (IN_USERNAME Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(IN_USERNAME, String)
            End If
            If (IN_DESCRIPTION Is Nothing) OrElse IN_DESCRIPTION.ToString.Length = 0 Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(IN_DESCRIPTION, String)
            End If
            If (IN_RESPONSIBLEUSERNAME Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(IN_RESPONSIBLEUSERNAME, String)
            End If
            If (IN_RESPONSIBLEROLESEQID Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(IN_RESPONSIBLEROLESEQID, String)
            End If
            If (IN_RESPROLEPLANTCODE Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(IN_RESPROLEPLANTCODE, String)
            End If
            If (IN_DUEDATE Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(IN_DUEDATE, String)
            End If
            If (IN_CLOSEDDATE Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(IN_CLOSEDDATE, String)
            End If
            If (IN_STATUSSEQID Is Nothing) Then
                command.Parameters(12).Value = Global.System.DBNull.Value
            Else
                command.Parameters(12).Value = CType(IN_STATUSSEQID, String)
            End If
            If (IN_PRIORITY Is Nothing) Then
                command.Parameters(13).Value = Global.System.DBNull.Value
            Else
                command.Parameters(13).Value = CType(IN_PRIORITY, String)
            End If
            If (IN_DATECRITICAL Is Nothing) Then
                command.Parameters(14).Value = Global.System.DBNull.Value
            Else
                command.Parameters(14).Value = CType(IN_DATECRITICAL, String)
            End If
            If (IN_DAYSBEFORE Is Nothing) Then
                command.Parameters(15).Value = Global.System.DBNull.Value
            Else
                command.Parameters(15).Value = CType(IN_DAYSBEFORE, String)
            End If
            If (IN_ROOTTASKITEMSEQID Is Nothing) Then
                command.Parameters(16).Value = Global.System.DBNull.Value
            Else
                command.Parameters(16).Value = CType(IN_ROOTTASKITEMSEQID, String)
            End If
            If (IN_UPDATEFLAG Is Nothing) Then
                command.Parameters(17).Value = Global.System.DBNull.Value
            Else
                command.Parameters(17).Value = CType(IN_UPDATEFLAG, String)
            End If
            If (IN_DEPENDENTCHILD Is Nothing) Then
                command.Parameters(18).Value = Global.System.DBNull.Value
            Else
                command.Parameters(18).Value = CType(IN_DEPENDENTCHILD, String)
            End If
            If (IN_COMMENT Is Nothing) OrElse IN_COMMENT.ToString.Length = 0 Then
                command.Parameters(19).Value = Global.System.DBNull.Value
            Else
                command.Parameters(19).Value = CType(IN_COMMENT, String)
            End If
            If (IN_LEADTIME Is Nothing) Then
                command.Parameters(20).Value = Global.System.DBNull.Value
            Else
                command.Parameters(20).Value = CType(IN_LEADTIME, String)
            End If
            If (IN_WORKORDER Is Nothing) Then
                command.Parameters(21).Value = Global.System.DBNull.Value
            Else
                command.Parameters(21).Value = CType(IN_WORKORDER, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((command.Parameters(22).Value Is Nothing) _
                        OrElse (command.Parameters(22).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_DEPENDENTTASKITEM = New Global.System.Nullable(Of Decimal)
            Else
                OUT_DEPENDENTTASKITEM = New Global.System.Nullable(Of Decimal)(CType(command.Parameters(22).Value, Decimal))
            End If
            If ((command.Parameters(23).Value Is Nothing) _
                        OrElse (command.Parameters(23).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_STATUS = New Global.System.Nullable(Of Decimal)
            Else
                OUT_STATUS = New Global.System.Nullable(Of Decimal)(CType(command.Parameters(23).Value, Decimal))
            End If
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class RecurringTasksTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RecurringTasks"
            tableMapping.ColumnMappings.Add("DUEDATE", "DUEDATE")
            tableMapping.ColumnMappings.Add("TASKITEMSEQID", "TASKITEMSEQID")
            tableMapping.ColumnMappings.Add("ROOTTASKITEMSEQID", "ROOTTASKITEMSEQID")
            tableMapping.ColumnMappings.Add("STATUSSEQID", "STATUSSEQID")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(0) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTTASKITEM.GETRECURRINGTASKS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_TASKITEM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSRECURRINGTASKS"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetRecurringTasks(ByVal IN_TASKITEM As String, ByRef RSRECURRINGTASKS As Object) As TaskDetail.RecurringTasksDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_TASKITEM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TASKITEM, String)
            End If
            Dim dataTable As TaskDetail.RecurringTasksDataTable = New TaskDetail.RecurringTasksDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSRECURRINGTASKS = Global.System.DBNull.Value
            Else
                RSRECURRINGTASKS = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SubTaskTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SubTask"
            tableMapping.ColumnMappings.Add("TASKITEMSEQID", "TASKITEMSEQID")
            tableMapping.ColumnMappings.Add("TASKHEADERSEQID", "TASKHEADERSEQID")
            tableMapping.ColumnMappings.Add("TITLE", "TITLE")
            tableMapping.ColumnMappings.Add("ROOTTASKITEMSEQID", "ROOTTASKITEMSEQID")
            tableMapping.ColumnMappings.Add("PARENTSUBTASKSEQID", "PARENTSUBTASKSEQID")
            tableMapping.ColumnMappings.Add("RESPONSIBLENAME", "RESPONSIBLENAME")
            tableMapping.ColumnMappings.Add("RESPONSIBLEUSERNAME", "RESPONSIBLEUSERNAME")
            tableMapping.ColumnMappings.Add("ROLENAME", "ROLENAME")
            tableMapping.ColumnMappings.Add("RESPONSIBLEROLESEQID", "RESPONSIBLEROLESEQID")
            tableMapping.ColumnMappings.Add("CREATEDBY", "CREATEDBY")
            tableMapping.ColumnMappings.Add("CREATEDDATE", "CREATEDDATE")
            tableMapping.ColumnMappings.Add("LASTUPDATEUSERNAME", "LASTUPDATEUSERNAME")
            tableMapping.ColumnMappings.Add("LASTUPDATEDATE", "LASTUPDATEDATE")
            tableMapping.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION")
            tableMapping.ColumnMappings.Add("DAYSAFTER", "DAYSAFTER")
            tableMapping.ColumnMappings.Add("RESPROLEPLANTCODE", "RESPROLEPLANTCODE")
            tableMapping.ColumnMappings.Add("ROLEDESCRIPTION", "ROLEDESCRIPTION")
            tableMapping.ColumnMappings.Add("RESPROLESITENAME", "RESPROLESITENAME")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "RELADMIN.MTTTASKITEM.DELETESUBTASK"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_SUBTASKITEM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracledbType = OracledbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "RELADMIN.MTTTASKITEM.UPDATESUBTASKITEM"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_SUBTASKITEM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TASKHEADER"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_PARENTTASK"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TITLE"
            param.OracledbType = OracledbType.NVarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_USERNAME"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DESCRIPTION"
            param.OracledbType = OracledbType.NClob
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DAYSAFTER"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_RESPONSIBLEUSERNAME"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_RESPONSIBLEROLESEQID"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_RESPROLEPLANTCODE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_SUBTASKITEM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracledbType = OracledbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracledbType = OracledbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(2) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTTASKITEM.GETSUBTASKS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_TASKITEM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSTASKITEM"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            Me._commandCollection(1) = New OracleCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "RELADMIN.MTTTASKITEM.DELETESUBTASK"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_SUBTASKITEM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracledbType = OracledbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New OracleCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "RELADMIN.MTTTASKITEM.UPDATESUBTASKITEM"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_SUBTASKITEM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TASKHEADER"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_PARENTTASK"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TITLE"
            param.OracledbType = OracledbType.NVarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_USERNAME"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DESCRIPTION"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.NClob
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DAYSAFTER"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_RESPONSIBLEUSERNAME"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_RESPONSIBLEROLESEQID"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_RESPROLEPLANTCODE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_SUBTASKITEM"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracledbType = OracledbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracledbType = OracledbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetSubTasks(ByVal IN_TASKITEM As String, ByRef RSTASKITEM As Object) As TaskDetail.SubTaskDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_TASKITEM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TASKITEM, String)
            End If
            Dim dataTable As TaskDetail.SubTaskDataTable = New TaskDetail.SubTaskDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSTASKITEM = Global.System.DBNull.Value
            Else
                RSTASKITEM = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function UpdateSubTask(ByVal IN_SUBTASKITEM As String, ByVal IN_TASKHEADER As String, ByVal IN_PARENTTASK As String, ByVal IN_TITLE As String, ByVal IN_USERNAME As String, ByVal IN_DESCRIPTION As Object, ByVal IN_DAYSAFTER As String, ByVal IN_RESPONSIBLEUSERNAME As String, ByVal IN_RESPONSIBLEROLESEQID As String, ByVal IN_RESPROLEPLANTCODE As String, ByRef OUT_SUBTASKITEM As Global.System.Nullable(Of Decimal), ByRef OUT_STATUS As Global.System.Nullable(Of Decimal)) As TaskDetail.SubTaskDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (IN_SUBTASKITEM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_SUBTASKITEM, String)
            End If
            If (IN_TASKHEADER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(IN_TASKHEADER, String)
            End If
            If (IN_PARENTTASK Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IN_PARENTTASK, String)
            End If
            If (IN_TITLE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(IN_TITLE, String)
            End If
            If (IN_USERNAME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(IN_USERNAME, String)
            End If
            If (IN_DESCRIPTION Is Nothing) OrElse IN_DESCRIPTION.ToString.Length = 0 Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(IN_DESCRIPTION, Object)
            End If
            If (IN_DAYSAFTER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(IN_DAYSAFTER, String)
            End If
            If (IN_RESPONSIBLEUSERNAME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(IN_RESPONSIBLEUSERNAME, String)
            End If
            If (IN_RESPONSIBLEROLESEQID Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(IN_RESPONSIBLEROLESEQID, String)
            End If
            If (IN_RESPROLEPLANTCODE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(IN_RESPROLEPLANTCODE, String)
            End If
            Dim dataTable As TaskDetail.SubTaskDataTable = New TaskDetail.SubTaskDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(10).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(10).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_SUBTASKITEM = New Global.System.Nullable(Of Decimal)
            Else
                OUT_SUBTASKITEM = New Global.System.Nullable(Of Decimal)(CType(Me.Adapter.SelectCommand.Parameters(10).Value, Decimal))
            End If
            If ((Me.Adapter.SelectCommand.Parameters(11).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(11).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_STATUS = New Global.System.Nullable(Of Decimal)
            Else
                OUT_STATUS = New Global.System.Nullable(Of Decimal)(CType(Me.Adapter.SelectCommand.Parameters(11).Value, Decimal))
            End If
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As TaskDetail.SubTaskDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As TaskDetail) As Integer
            Return Me.Adapter.Update(dataSet, "SubTask")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal IN_SUBTASKITEM As String, ByRef OUT_STATUS As Global.System.Nullable(Of Decimal)) As Integer
            If (IN_SUBTASKITEM Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(IN_SUBTASKITEM, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                If ((Me.Adapter.DeleteCommand.Parameters(1).Value Is Nothing) _
                            OrElse (Me.Adapter.DeleteCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                    OUT_STATUS = New Global.System.Nullable(Of Decimal)
                Else
                    OUT_STATUS = New Global.System.Nullable(Of Decimal)(CType(Me.Adapter.DeleteCommand.Parameters(1).Value, Decimal))
                End If
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal IN_SUBTASKITEM As String, ByVal IN_TASKHEADER As String, ByVal IN_PARENTTASK As String, ByVal IN_TITLE As String, ByVal IN_USERNAME As String, ByVal IN_DESCRIPTION As String, ByVal IN_DAYSAFTER As String, ByVal IN_RESPONSIBLEUSERNAME As String, ByVal IN_RESPONSIBLEROLESEQID As String, ByVal IN_RESPROLEPLANTCODE As String, ByRef OUT_SUBTASKITEM As Global.System.Nullable(Of Decimal), ByRef OUT_STATUS As Global.System.Nullable(Of Decimal)) As Integer
            If (IN_SUBTASKITEM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(IN_SUBTASKITEM, String)
            End If
            If (IN_TASKHEADER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IN_TASKHEADER, String)
            End If
            If (IN_PARENTTASK Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IN_PARENTTASK, String)
            End If
            If (IN_TITLE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IN_TITLE, String)
            End If
            If (IN_USERNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(IN_USERNAME, String)
            End If
            If (IN_DESCRIPTION Is Nothing) OrElse IN_DESCRIPTION.ToString.Length = 0 Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(IN_DESCRIPTION, String)
            End If
            If (IN_DAYSAFTER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(IN_DAYSAFTER, String)
            End If
            If (IN_RESPONSIBLEUSERNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(IN_RESPONSIBLEUSERNAME, String)
            End If
            If (IN_RESPONSIBLEROLESEQID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(IN_RESPONSIBLEROLESEQID, String)
            End If
            If (IN_RESPROLEPLANTCODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(IN_RESPROLEPLANTCODE, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                If ((Me.Adapter.InsertCommand.Parameters(10).Value Is Nothing) _
                            OrElse (Me.Adapter.InsertCommand.Parameters(10).Value.GetType Is GetType(Global.System.DBNull))) Then
                    OUT_SUBTASKITEM = New Global.System.Nullable(Of Decimal)
                Else
                    OUT_SUBTASKITEM = New Global.System.Nullable(Of Decimal)(CType(Me.Adapter.InsertCommand.Parameters(10).Value, Decimal))
                End If
                If ((Me.Adapter.InsertCommand.Parameters(11).Value Is Nothing) _
                            OrElse (Me.Adapter.InsertCommand.Parameters(11).Value.GetType Is GetType(Global.System.DBNull))) Then
                    OUT_STATUS = New Global.System.Nullable(Of Decimal)
                Else
                    OUT_STATUS = New Global.System.Nullable(Of Decimal)(CType(Me.Adapter.InsertCommand.Parameters(11).Value, Decimal))
                End If
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function DeleteSubTasks(ByVal IN_SUBTASKITEM As String, ByRef OUT_STATUS As Global.System.Nullable(Of Decimal)) As Object
            Dim command As OracleCommand = Me.CommandCollection(1)
            If (IN_SUBTASKITEM Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(IN_SUBTASKITEM, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((command.Parameters(1).Value Is Nothing) _
                        OrElse (command.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_STATUS = New Global.System.Nullable(Of Decimal)
            Else
                OUT_STATUS = New Global.System.Nullable(Of Decimal)(CType(command.Parameters(1).Value, Decimal))
            End If
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class UserDefaultsTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "UserDefaults"
            tableMapping.ColumnMappings.Add("USERNAME", "USERNAME")
            tableMapping.ColumnMappings.Add("PROFILETYPESEQID", "PROFILETYPESEQID")
            tableMapping.ColumnMappings.Add("APPLICATION", "APPLICATION")
            tableMapping.ColumnMappings.Add("PROFILETYPEVALUE", "PROFILETYPEVALUE")
            tableMapping.ColumnMappings.Add("LASTUPDATEUSERNAME", "LASTUPDATEUSERNAME")
            tableMapping.ColumnMappings.Add("LASTUPDATEDATE", "LASTUPDATEDATE")
            tableMapping.ColumnMappings.Add("PROFILETYPENAME", "PROFILETYPENAME")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(0) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTGENERALDATA.MTTUSERDEFAULTS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_USERNAME"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSUSERDEFAULTS"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetUserDefaults(ByVal IN_USERNAME As String, ByRef RSUSERDEFAULTS As Object) As TaskDetail.UserDefaultsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_USERNAME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_USERNAME, String)
            End If
            Dim dataTable As TaskDetail.UserDefaultsDataTable = New TaskDetail.UserDefaultsDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSUSERDEFAULTS = Global.System.DBNull.Value
            Else
                RSUSERDEFAULTS = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class RecurringParametersTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RecurringParameters"
            tableMapping.ColumnMappings.Add("TASKITEMSEQID", "TASKITEMSEQID")
            tableMapping.ColumnMappings.Add("PROFILETYPESEQID", "PROFILETYPESEQID")
            tableMapping.ColumnMappings.Add("PROFILETYPEVALUE", "PROFILETYPEVALUE")
            tableMapping.ColumnMappings.Add("LASTUPDATEUSERNAME", "LASTUPDATEUSERNAME")
            tableMapping.ColumnMappings.Add("LASTUPDATEDATE", "LASTUPDATEDATE")
            tableMapping.ColumnMappings.Add("PROFILETYPENAME", "PROFILETYPENAME")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(1) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTTASKITEM.GETRECURRINGPARAMETERS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_TASKITEM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSRECURRINGPARAMETERS"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            Me._commandCollection(1) = New OracleCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "RELADMIN.MTTTASKITEM.UPDATERECURRINGPARAMETERS"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_TASKITEM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_REPEATINGDATA"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_USERNAME"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracledbType = OracledbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetRecurringParameters(ByVal IN_TASKITEM As String, ByRef RSRECURRINGPARAMETERS As Object) As TaskDetail.RecurringParametersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_TASKITEM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TASKITEM, String)
            End If
            Dim dataTable As TaskDetail.RecurringParametersDataTable = New TaskDetail.RecurringParametersDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSRECURRINGPARAMETERS = Global.System.DBNull.Value
            Else
                RSRECURRINGPARAMETERS = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function UpdateRecurringParameters(ByVal IN_TASKITEM As String, ByVal IN_REPEATINGDATA As String, ByVal IN_USERNAME As String, ByRef OUT_STATUS As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As OracleCommand = Me.CommandCollection(1)
            If (IN_TASKITEM Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(IN_TASKITEM, String)
            End If
            If (IN_REPEATINGDATA Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(IN_REPEATINGDATA, String)
            End If
            If (IN_USERNAME Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(IN_USERNAME, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Integer
            Try
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((command.Parameters(3).Value Is Nothing) _
                        OrElse (command.Parameters(3).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_STATUS = New Global.System.Nullable(Of Decimal)
            Else
                OUT_STATUS = New Global.System.Nullable(Of Decimal)(CType(command.Parameters(3).Value, Decimal))
            End If
            Return returnValue
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class RecurringParametersListTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RecurringParametersList"
            tableMapping.ColumnMappings.Add("PROFILETYPESEQID", "PROFILETYPESEQID")
            tableMapping.ColumnMappings.Add("PROFILETYPENAME", "PROFILETYPENAME")
            tableMapping.ColumnMappings.Add("PROFILETYPE", "PROFILETYPE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(0) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTTASKITEM.GETRECURRINGPARAMETERSLIST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "RSRECURRINGPARAMETERLIST"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetRecurringParametersList(ByRef RSRECURRINGPARAMETERLIST As Object) As TaskDetail.RecurringParametersListDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TaskDetail.RecurringParametersListDataTable = New TaskDetail.RecurringParametersListDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(0).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(0).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSRECURRINGPARAMETERLIST = Global.System.DBNull.Value
            Else
                RSRECURRINGPARAMETERLIST = CType(Me.Adapter.SelectCommand.Parameters(0).Value, Object)
            End If
            Return dataTable
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class TaskItemCommentsTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TaskItemComments"
            tableMapping.ColumnMappings.Add("COMMENTSEQID", "COMMENTSEQID")
            tableMapping.ColumnMappings.Add("USERNAME", "USERNAME")
            tableMapping.ColumnMappings.Add("LASTUPDATEUSERNAME", "LASTUPDATEUSERNAME")
            tableMapping.ColumnMappings.Add("LASTUPDATEDATE", "LASTUPDATEDATE")
            tableMapping.ColumnMappings.Add("COMMENTS", "COMMENTS")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(0) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTTASKITEM.GETTASKITEMCOMMENTS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_TASKITEM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSCOMMENTS"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetComments(ByVal IN_TASKITEM As String, ByRef RSCOMMENTS As Object) As TaskDetail.TaskItemCommentsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_TASKITEM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TASKITEM, String)
            End If
            Dim dataTable As TaskDetail.TaskItemCommentsDataTable = New TaskDetail.TaskItemCommentsDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSCOMMENTS = Global.System.DBNull.Value
            Else
                RSCOMMENTS = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class ImmediateEmailTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ImmediateEmail"
            tableMapping.ColumnMappings.Add("RECTYPE", "RECTYPE")
            tableMapping.ColumnMappings.Add("RECNUM", "RECNUM")
            tableMapping.ColumnMappings.Add("TASKHEADERSEQID", "TASKHEADERSEQID")
            tableMapping.ColumnMappings.Add("TASKITEMSEQID", "TASKITEMSEQID")
            tableMapping.ColumnMappings.Add("SITENAME", "SITENAME")
            tableMapping.ColumnMappings.Add("TASKHEADERTITLE", "TASKHEADERTITLE")
            tableMapping.ColumnMappings.Add("TASKITEMSEQID1", "TASKITEMSEQID1")
            tableMapping.ColumnMappings.Add("ITEM_TITLE", "ITEM_TITLE")
            tableMapping.ColumnMappings.Add("ITEM_DESCRIPTION", "ITEM_DESCRIPTION")
            tableMapping.ColumnMappings.Add("ITEM_DUEDATE", "ITEM_DUEDATE")
            tableMapping.ColumnMappings.Add("LEADTIME", "LEADTIME")
            tableMapping.ColumnMappings.Add("ITEM_CLOSEDDATE", "ITEM_CLOSEDDATE")
            tableMapping.ColumnMappings.Add("ACTIVITYNAME", "ACTIVITYNAME")
            tableMapping.ColumnMappings.Add("HEADERTYPENAME", "HEADERTYPENAME")
            tableMapping.ColumnMappings.Add("BUSUNITMGR", "BUSUNITMGR")
            tableMapping.ColumnMappings.Add("TYPEMGR", "TYPEMGR")
            tableMapping.ColumnMappings.Add("MGR", "MGR")
            tableMapping.ColumnMappings.Add("CREATEDBY", "CREATEDBY")
            tableMapping.ColumnMappings.Add("WHOLE_NAME_CREATEDBY_PERSON", "WHOLE_NAME_CREATEDBY_PERSON")
            tableMapping.ColumnMappings.Add("CREATEDBY_EMAIL", "CREATEDBY_EMAIL")
            tableMapping.ColumnMappings.Add("CREATEDBY_DEFAULTLANGUAGE", "CREATEDBY_DEFAULTLANGUAGE")
            tableMapping.ColumnMappings.Add("RESPONSIBLEUSERNAME", "RESPONSIBLEUSERNAME")
            tableMapping.ColumnMappings.Add("WHOLE_NAME_RESPONSIBLE_PERSON", "WHOLE_NAME_RESPONSIBLE_PERSON")
            tableMapping.ColumnMappings.Add("RESPONSIBLE_EMAIL", "RESPONSIBLE_EMAIL")
            tableMapping.ColumnMappings.Add("RESPONSIBLE_DEFAULTLANGUAGE", "RESPONSIBLE_DEFAULTLANGUAGE")
            tableMapping.ColumnMappings.Add("RESPONSIBLE_ROLE_NAMES", "RESPONSIBLE_ROLE_NAMES")
            tableMapping.ColumnMappings.Add("ROLEDESCRIPTION", "ROLEDESCRIPTION")
            tableMapping.ColumnMappings.Add("MTTCOMMENT", "MTTCOMMENT")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(0) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTBATCHEMAILS.INDTASKLISTING"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_TASKID"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSINDTASK"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetImmediateEmail(ByVal IN_TASKID As String, ByRef RSINDTASK As Object) As TaskDetail.ImmediateEmailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_TASKID Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TASKID, String)
            End If
            Dim dataTable As TaskDetail.ImmediateEmailDataTable = New TaskDetail.ImmediateEmailDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSINDTASK = Global.System.DBNull.Value
            Else
                RSINDTASK = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class CriticalDateTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CriticalDate"
            tableMapping.ColumnMappings.Add("TASKITEMSEQID", "TASKITEMSEQID")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(0) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTTASKITEM.CHECKDATECRITICAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_TASKITEM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_USERNAME"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSDATECRITICAL"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetCriticalDateAccess(ByVal IN_TASKITEM As String, ByVal IN_USERNAME As String, ByRef RSDATECRITICAL As Object) As TaskDetail.CriticalDateDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_TASKITEM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TASKITEM, String)
            End If
            If (IN_USERNAME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(IN_USERNAME, String)
            End If
            Dim dataTable As TaskDetail.CriticalDateDataTable = New TaskDetail.CriticalDateDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(2).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(2).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSDATECRITICAL = Global.System.DBNull.Value
            Else
                RSDATECRITICAL = CType(Me.Adapter.SelectCommand.Parameters(2).Value, Object)
            End If
            Return dataTable
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class MTTBATCHREPLICATIONTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MTTBATCHREPLICATION"
            tableMapping.ColumnMappings.Add("EMAIL_SECTION", "EMAIL_SECTION")
            tableMapping.ColumnMappings.Add("SITENAME", "SITENAME")
            tableMapping.ColumnMappings.Add("TEMPLATE_TITLE", "TEMPLATE_TITLE")
            tableMapping.ColumnMappings.Add("STATUS", "STATUS")
            tableMapping.ColumnMappings.Add("ROLEDESCRIPTION", "ROLEDESCRIPTION")
            tableMapping.ColumnMappings.Add("CREATEDBY", "CREATEDBY")
            tableMapping.ColumnMappings.Add("TEMPLATESEQID", "TEMPLATESEQID")
            tableMapping.ColumnMappings.Add("EMAIL", "EMAIL")
            tableMapping.ColumnMappings.Add("REPLICATOR_DEFAULTLANGUAGE", "REPLICATOR_DEFAULTLANGUAGE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(0) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTBATCHREPLICATION.SELECTEMAILTASKS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_TEMPLATETASKNBR"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSEMAILTASKS"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetEmailData(ByVal IN_TEMPLATETASKNBR As String, ByRef RSEMAILTASKS As Object) As TaskDetail.MTTBATCHREPLICATIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_TEMPLATETASKNBR Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TEMPLATETASKNBR, String)
            End If
            Dim dataTable As TaskDetail.MTTBATCHREPLICATIONDataTable = New TaskDetail.MTTBATCHREPLICATIONDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSEMAILTASKS = Global.System.DBNull.Value
            Else
                RSEMAILTASKS = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function
    End Class
End Namespace
