'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3625
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


'
'This source code was auto-generated by xsd, Version=2.0.50727.42.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("TaskListingDAL"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class TaskListingDAL
    Inherits Global.System.Data.DataSet
    
    Private tableTaskListing As TaskListingDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TaskListing")) Is Nothing) Then
                MyBase.Tables.Add(New TaskListingDataTable(ds.Tables("TaskListing")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TaskListing() As TaskListingDataTable
        Get
            Return Me.tableTaskListing
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As TaskListingDAL = CType(MyBase.Clone,TaskListingDAL)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("TaskListing")) Is Nothing) Then
                MyBase.Tables.Add(New TaskListingDataTable(ds.Tables("TaskListing")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTaskListing = CType(MyBase.Tables("TaskListing"),TaskListingDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTaskListing) Is Nothing) Then
                Me.tableTaskListing.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "TaskListingDAL"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/TaskListing.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTaskListing = New TaskListingDataTable
        MyBase.Tables.Add(Me.tableTaskListing)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTaskListing() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As TaskListingDAL = New TaskListingDAL
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub TaskListingRowChangeEventHandler(ByVal sender As Object, ByVal e As TaskListingRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TaskListingDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnBUSUNIT_AREA As Global.System.Data.DataColumn
        
        Private columnLINE As Global.System.Data.DataColumn
        
        Private columnSITENAME As Global.System.Data.DataColumn
        
        Private columnACTIVITYNAME As Global.System.Data.DataColumn
        
        Private columnSTARTDATE As Global.System.Data.DataColumn
        
        Private columnENDDATE As Global.System.Data.DataColumn
        
        Private columnATTACHMENTCOUNT As Global.System.Data.DataColumn
        
        Private columnEXTERNALSOURCENAME As Global.System.Data.DataColumn
        
        Private columnTASKHEADERSEQID As Global.System.Data.DataColumn
        
        Private columnEXTERNALREF As Global.System.Data.DataColumn
        
        Private columnEXTERNALSOURCESEQID As Global.System.Data.DataColumn
        
        Private columnSECURITYLEVEL As Global.System.Data.DataColumn
        
        Private columnACTIVITYSEQID As Global.System.Data.DataColumn
        
        Private columnPLANTCODE As Global.System.Data.DataColumn
        
        Private columnTASKTYPE As Global.System.Data.DataColumn
        
        Private columnREGION As Global.System.Data.DataColumn
        
        Private columnDIVISION As Global.System.Data.DataColumn
        
        Private columnHEADERCREATEDDATE As Global.System.Data.DataColumn
        
        Private columnHEADERLASTUPDATEDATE As Global.System.Data.DataColumn
        
        Private columnITEMCREATEDDATE As Global.System.Data.DataColumn
        
        Private columnITEMLASTUPDATEDATE As Global.System.Data.DataColumn
        
        Private columnHEADERTITLE As Global.System.Data.DataColumn
        
        Private columnHEADERCREATEDBY As Global.System.Data.DataColumn
        
        Private columnHEADERLASTUPDATEUSERNAME As Global.System.Data.DataColumn
        
        Private columnHEADERDESC As Global.System.Data.DataColumn
        
        Private columnITEMDESC As Global.System.Data.DataColumn
        
        Private columnTASKITEMSEQID As Global.System.Data.DataColumn
        
        Private columnITEMTITLE As Global.System.Data.DataColumn
        
        Private columnSTATUSNAME As Global.System.Data.DataColumn
        
        Private columnSTATUSSEQID As Global.System.Data.DataColumn
        
        Private columnHEADERSTATUS As Global.System.Data.DataColumn
        
        Private columnDUEDATE As Global.System.Data.DataColumn
        
        Private columnRESPNAME As Global.System.Data.DataColumn
        
        Private columnROLEDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnRESPROLESITENAME As Global.System.Data.DataColumn
        
        Private columnEXTERNALSOURCEURL As Global.System.Data.DataColumn
        
        Private columnCOMMENTS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TaskListing"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BUSUNIT_AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUSUNIT_AREA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SITENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSITENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACTIVITYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTIVITYNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STARTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTARTDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ENDDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENDDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ATTACHMENTCOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnATTACHMENTCOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXTERNALSOURCENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTERNALSOURCENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TASKHEADERSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKHEADERSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXTERNALREFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTERNALREF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXTERNALSOURCESEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTERNALSOURCESEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SECURITYLEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSECURITYLEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACTIVITYSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTIVITYSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLANTCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLANTCODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TASKTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REGIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREGION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIVISIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIVISION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HEADERCREATEDDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEADERCREATEDDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HEADERLASTUPDATEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEADERLASTUPDATEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEMCREATEDDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEMCREATEDDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEMLASTUPDATEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEMLASTUPDATEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HEADERTITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEADERTITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HEADERCREATEDBYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEADERCREATEDBY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HEADERLASTUPDATEUSERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEADERLASTUPDATEUSERNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HEADERDESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEADERDESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEMDESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEMDESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TASKITEMSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKITEMSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEMTITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEMTITLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUSNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUSNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUSSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUSSEQID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HEADERSTATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEADERSTATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DUEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDUEDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESPNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ROLEDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLEDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RESPROLESITENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRESPROLESITENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXTERNALSOURCEURLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTERNALSOURCEURL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TaskListingRow
            Get
                Return CType(Me.Rows(index),TaskListingRow)
            End Get
        End Property
        
        Public Event TaskListingRowChanging As TaskListingRowChangeEventHandler
        
        Public Event TaskListingRowChanged As TaskListingRowChangeEventHandler
        
        Public Event TaskListingRowDeleting As TaskListingRowChangeEventHandler
        
        Public Event TaskListingRowDeleted As TaskListingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTaskListingRow(ByVal row As TaskListingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTaskListingRow( _
                    ByVal BUSUNIT_AREA As String,  _
                    ByVal LINE As String,  _
                    ByVal SITENAME As String,  _
                    ByVal ACTIVITYNAME As String,  _
                    ByVal STARTDATE As String,  _
                    ByVal ENDDATE As String,  _
                    ByVal ATTACHMENTCOUNT As Decimal,  _
                    ByVal EXTERNALSOURCENAME As String,  _
                    ByVal TASKHEADERSEQID As Decimal,  _
                    ByVal EXTERNALREF As String,  _
                    ByVal EXTERNALSOURCESEQID As Decimal,  _
                    ByVal SECURITYLEVEL As String,  _
                    ByVal ACTIVITYSEQID As Decimal,  _
                    ByVal PLANTCODE As String,  _
                    ByVal TASKTYPE As String,  _
                    ByVal _REGION As String,  _
                    ByVal DIVISION As String,  _
                    ByVal HEADERCREATEDDATE As Date,  _
                    ByVal HEADERLASTUPDATEDATE As Date,  _
                    ByVal ITEMCREATEDDATE As Date,  _
                    ByVal ITEMLASTUPDATEDATE As Date,  _
                    ByVal HEADERTITLE As String,  _
                    ByVal HEADERCREATEDBY As String,  _
                    ByVal HEADERLASTUPDATEUSERNAME As String,  _
                    ByVal HEADERDESC As String,  _
                    ByVal ITEMDESC As String,  _
                    ByVal TASKITEMSEQID As Decimal,  _
                    ByVal ITEMTITLE As String,  _
                    ByVal STATUSNAME As String,  _
                    ByVal STATUSSEQID As Decimal,  _
                    ByVal HEADERSTATUS As String,  _
                    ByVal DUEDATE As String,  _
                    ByVal RESPNAME As String,  _
                    ByVal ROLEDESCRIPTION As String,  _
                    ByVal RESPROLESITENAME As String,  _
                    ByVal EXTERNALSOURCEURL As String,  _
                    ByVal COMMENTS As String) As TaskListingRow
            Dim rowTaskListingRow As TaskListingRow = CType(Me.NewRow,TaskListingRow)
            Dim columnValuesArray() As Object = New Object() {BUSUNIT_AREA, LINE, SITENAME, ACTIVITYNAME, STARTDATE, ENDDATE, ATTACHMENTCOUNT, EXTERNALSOURCENAME, TASKHEADERSEQID, EXTERNALREF, EXTERNALSOURCESEQID, SECURITYLEVEL, ACTIVITYSEQID, PLANTCODE, TASKTYPE, _REGION, DIVISION, HEADERCREATEDDATE, HEADERLASTUPDATEDATE, ITEMCREATEDDATE, ITEMLASTUPDATEDATE, HEADERTITLE, HEADERCREATEDBY, HEADERLASTUPDATEUSERNAME, HEADERDESC, ITEMDESC, TASKITEMSEQID, ITEMTITLE, STATUSNAME, STATUSSEQID, HEADERSTATUS, DUEDATE, RESPNAME, ROLEDESCRIPTION, RESPROLESITENAME, EXTERNALSOURCEURL, COMMENTS}
            rowTaskListingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTaskListingRow)
            Return rowTaskListingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TaskListingDataTable = CType(MyBase.Clone,TaskListingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TaskListingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBUSUNIT_AREA = MyBase.Columns("BUSUNIT_AREA")
            Me.columnLINE = MyBase.Columns("LINE")
            Me.columnSITENAME = MyBase.Columns("SITENAME")
            Me.columnACTIVITYNAME = MyBase.Columns("ACTIVITYNAME")
            Me.columnSTARTDATE = MyBase.Columns("STARTDATE")
            Me.columnENDDATE = MyBase.Columns("ENDDATE")
            Me.columnATTACHMENTCOUNT = MyBase.Columns("ATTACHMENTCOUNT")
            Me.columnEXTERNALSOURCENAME = MyBase.Columns("EXTERNALSOURCENAME")
            Me.columnTASKHEADERSEQID = MyBase.Columns("TASKHEADERSEQID")
            Me.columnEXTERNALREF = MyBase.Columns("EXTERNALREF")
            Me.columnEXTERNALSOURCESEQID = MyBase.Columns("EXTERNALSOURCESEQID")
            Me.columnSECURITYLEVEL = MyBase.Columns("SECURITYLEVEL")
            Me.columnACTIVITYSEQID = MyBase.Columns("ACTIVITYSEQID")
            Me.columnPLANTCODE = MyBase.Columns("PLANTCODE")
            Me.columnTASKTYPE = MyBase.Columns("TASKTYPE")
            Me.columnREGION = MyBase.Columns("REGION")
            Me.columnDIVISION = MyBase.Columns("DIVISION")
            Me.columnHEADERCREATEDDATE = MyBase.Columns("HEADERCREATEDDATE")
            Me.columnHEADERLASTUPDATEDATE = MyBase.Columns("HEADERLASTUPDATEDATE")
            Me.columnITEMCREATEDDATE = MyBase.Columns("ITEMCREATEDDATE")
            Me.columnITEMLASTUPDATEDATE = MyBase.Columns("ITEMLASTUPDATEDATE")
            Me.columnHEADERTITLE = MyBase.Columns("HEADERTITLE")
            Me.columnHEADERCREATEDBY = MyBase.Columns("HEADERCREATEDBY")
            Me.columnHEADERLASTUPDATEUSERNAME = MyBase.Columns("HEADERLASTUPDATEUSERNAME")
            Me.columnHEADERDESC = MyBase.Columns("HEADERDESC")
            Me.columnITEMDESC = MyBase.Columns("ITEMDESC")
            Me.columnTASKITEMSEQID = MyBase.Columns("TASKITEMSEQID")
            Me.columnITEMTITLE = MyBase.Columns("ITEMTITLE")
            Me.columnSTATUSNAME = MyBase.Columns("STATUSNAME")
            Me.columnSTATUSSEQID = MyBase.Columns("STATUSSEQID")
            Me.columnHEADERSTATUS = MyBase.Columns("HEADERSTATUS")
            Me.columnDUEDATE = MyBase.Columns("DUEDATE")
            Me.columnRESPNAME = MyBase.Columns("RESPNAME")
            Me.columnROLEDESCRIPTION = MyBase.Columns("ROLEDESCRIPTION")
            Me.columnRESPROLESITENAME = MyBase.Columns("RESPROLESITENAME")
            Me.columnEXTERNALSOURCEURL = MyBase.Columns("EXTERNALSOURCEURL")
            Me.columnCOMMENTS = MyBase.Columns("COMMENTS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBUSUNIT_AREA = New Global.System.Data.DataColumn("BUSUNIT_AREA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUSUNIT_AREA)
            Me.columnLINE = New Global.System.Data.DataColumn("LINE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLINE)
            Me.columnSITENAME = New Global.System.Data.DataColumn("SITENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSITENAME)
            Me.columnACTIVITYNAME = New Global.System.Data.DataColumn("ACTIVITYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTIVITYNAME)
            Me.columnSTARTDATE = New Global.System.Data.DataColumn("STARTDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTARTDATE)
            Me.columnENDDATE = New Global.System.Data.DataColumn("ENDDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENDDATE)
            Me.columnATTACHMENTCOUNT = New Global.System.Data.DataColumn("ATTACHMENTCOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnATTACHMENTCOUNT)
            Me.columnEXTERNALSOURCENAME = New Global.System.Data.DataColumn("EXTERNALSOURCENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTERNALSOURCENAME)
            Me.columnTASKHEADERSEQID = New Global.System.Data.DataColumn("TASKHEADERSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKHEADERSEQID)
            Me.columnEXTERNALREF = New Global.System.Data.DataColumn("EXTERNALREF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTERNALREF)
            Me.columnEXTERNALSOURCESEQID = New Global.System.Data.DataColumn("EXTERNALSOURCESEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTERNALSOURCESEQID)
            Me.columnSECURITYLEVEL = New Global.System.Data.DataColumn("SECURITYLEVEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSECURITYLEVEL)
            Me.columnACTIVITYSEQID = New Global.System.Data.DataColumn("ACTIVITYSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTIVITYSEQID)
            Me.columnPLANTCODE = New Global.System.Data.DataColumn("PLANTCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLANTCODE)
            Me.columnTASKTYPE = New Global.System.Data.DataColumn("TASKTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKTYPE)
            Me.columnREGION = New Global.System.Data.DataColumn("REGION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnREGION.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "REGIONColumn")
            Me.columnREGION.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnREGION")
            Me.columnREGION.ExtendedProperties.Add("Generator_UserColumnName", "REGION")
            MyBase.Columns.Add(Me.columnREGION)
            Me.columnDIVISION = New Global.System.Data.DataColumn("DIVISION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIVISION)
            Me.columnHEADERCREATEDDATE = New Global.System.Data.DataColumn("HEADERCREATEDDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEADERCREATEDDATE)
            Me.columnHEADERLASTUPDATEDATE = New Global.System.Data.DataColumn("HEADERLASTUPDATEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEADERLASTUPDATEDATE)
            Me.columnITEMCREATEDDATE = New Global.System.Data.DataColumn("ITEMCREATEDDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEMCREATEDDATE)
            Me.columnITEMLASTUPDATEDATE = New Global.System.Data.DataColumn("ITEMLASTUPDATEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEMLASTUPDATEDATE)
            Me.columnHEADERTITLE = New Global.System.Data.DataColumn("HEADERTITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEADERTITLE)
            Me.columnHEADERCREATEDBY = New Global.System.Data.DataColumn("HEADERCREATEDBY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEADERCREATEDBY)
            Me.columnHEADERLASTUPDATEUSERNAME = New Global.System.Data.DataColumn("HEADERLASTUPDATEUSERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEADERLASTUPDATEUSERNAME)
            Me.columnHEADERDESC = New Global.System.Data.DataColumn("HEADERDESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEADERDESC)
            Me.columnITEMDESC = New Global.System.Data.DataColumn("ITEMDESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEMDESC)
            Me.columnTASKITEMSEQID = New Global.System.Data.DataColumn("TASKITEMSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKITEMSEQID)
            Me.columnITEMTITLE = New Global.System.Data.DataColumn("ITEMTITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEMTITLE)
            Me.columnSTATUSNAME = New Global.System.Data.DataColumn("STATUSNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUSNAME)
            Me.columnSTATUSSEQID = New Global.System.Data.DataColumn("STATUSSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUSSEQID)
            Me.columnHEADERSTATUS = New Global.System.Data.DataColumn("HEADERSTATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEADERSTATUS)
            Me.columnDUEDATE = New Global.System.Data.DataColumn("DUEDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDUEDATE)
            Me.columnRESPNAME = New Global.System.Data.DataColumn("RESPNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPNAME)
            Me.columnROLEDESCRIPTION = New Global.System.Data.DataColumn("ROLEDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLEDESCRIPTION)
            Me.columnRESPROLESITENAME = New Global.System.Data.DataColumn("RESPROLESITENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRESPROLESITENAME)
            Me.columnEXTERNALSOURCEURL = New Global.System.Data.DataColumn("EXTERNALSOURCEURL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTERNALSOURCEURL)
            Me.columnCOMMENTS = New Global.System.Data.DataColumn("COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTS)
            Me.columnBUSUNIT_AREA.MaxLength = 203
            Me.columnLINE.MaxLength = 203
            Me.columnSITENAME.MaxLength = 100
            Me.columnACTIVITYNAME.MaxLength = 100
            Me.columnSTARTDATE.MaxLength = 10
            Me.columnENDDATE.MaxLength = 10
            Me.columnEXTERNALSOURCENAME.MaxLength = 100
            Me.columnEXTERNALREF.MaxLength = 100
            Me.columnSECURITYLEVEL.MaxLength = 2
            Me.columnPLANTCODE.MaxLength = 4
            Me.columnTASKTYPE.MaxLength = 4000
            Me.columnREGION.MaxLength = 100
            Me.columnDIVISION.MaxLength = 100
            Me.columnHEADERTITLE.MaxLength = 2000
            Me.columnHEADERCREATEDBY.MaxLength = 41
            Me.columnHEADERLASTUPDATEUSERNAME.MaxLength = 41
            Me.columnHEADERDESC.MaxLength = 2147483647
            Me.columnITEMDESC.MaxLength = 2147483647
            Me.columnITEMTITLE.MaxLength = 2000
            Me.columnSTATUSNAME.MaxLength = 100
            Me.columnHEADERSTATUS.MaxLength = 4000
            Me.columnDUEDATE.MaxLength = 10
            Me.columnRESPNAME.MaxLength = 42
            Me.columnROLEDESCRIPTION.MaxLength = 250
            Me.columnRESPROLESITENAME.MaxLength = 100
            Me.columnEXTERNALSOURCEURL.MaxLength = 600
            Me.columnCOMMENTS.MaxLength = 4000
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTaskListingRow() As TaskListingRow
            Return CType(Me.NewRow,TaskListingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TaskListingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TaskListingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TaskListingRowChangedEvent) Is Nothing) Then
                RaiseEvent TaskListingRowChanged(Me, New TaskListingRowChangeEvent(CType(e.Row,TaskListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TaskListingRowChangingEvent) Is Nothing) Then
                RaiseEvent TaskListingRowChanging(Me, New TaskListingRowChangeEvent(CType(e.Row,TaskListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TaskListingRowDeletedEvent) Is Nothing) Then
                RaiseEvent TaskListingRowDeleted(Me, New TaskListingRowChangeEvent(CType(e.Row,TaskListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TaskListingRowDeletingEvent) Is Nothing) Then
                RaiseEvent TaskListingRowDeleting(Me, New TaskListingRowChangeEvent(CType(e.Row,TaskListingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTaskListingRow(ByVal row As TaskListingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TaskListingDAL = New TaskListingDAL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TaskListingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TaskListingRow
        Inherits Global.System.Data.DataRow
        
        Private tableTaskListing As TaskListingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTaskListing = CType(Me.Table,TaskListingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BUSUNIT_AREA() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.BUSUNIT_AREAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUSUNIT_AREA' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.BUSUNIT_AREAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LINE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.LINEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LINE' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.LINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SITENAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.SITENAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SITENAME' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.SITENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACTIVITYNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.ACTIVITYNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACTIVITYNAME' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.ACTIVITYNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STARTDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.STARTDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STARTDATE' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.STARTDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ENDDATE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.ENDDATEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ENDDATE' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.ENDDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ATTACHMENTCOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.ATTACHMENTCOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ATTACHMENTCOUNT' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.ATTACHMENTCOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXTERNALSOURCENAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.EXTERNALSOURCENAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTERNALSOURCENAME' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.EXTERNALSOURCENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TASKHEADERSEQID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.TASKHEADERSEQIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TASKHEADERSEQID' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.TASKHEADERSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXTERNALREF() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.EXTERNALREFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTERNALREF' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.EXTERNALREFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXTERNALSOURCESEQID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.EXTERNALSOURCESEQIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTERNALSOURCESEQID' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.EXTERNALSOURCESEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SECURITYLEVEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.SECURITYLEVELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SECURITYLEVEL' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.SECURITYLEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACTIVITYSEQID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.ACTIVITYSEQIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACTIVITYSEQID' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.ACTIVITYSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLANTCODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.PLANTCODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLANTCODE' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.PLANTCODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TASKTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.TASKTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TASKTYPE' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.TASKTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _REGION() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.REGIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REGION' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.REGIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIVISION() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.DIVISIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIVISION' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.DIVISIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HEADERCREATEDDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.HEADERCREATEDDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEADERCREATEDDATE' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.HEADERCREATEDDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HEADERLASTUPDATEDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.HEADERLASTUPDATEDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEADERLASTUPDATEDATE' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.HEADERLASTUPDATEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEMCREATEDDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.ITEMCREATEDDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEMCREATEDDATE' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.ITEMCREATEDDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEMLASTUPDATEDATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.ITEMLASTUPDATEDATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEMLASTUPDATEDATE' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.ITEMLASTUPDATEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HEADERTITLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.HEADERTITLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEADERTITLE' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.HEADERTITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HEADERCREATEDBY() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.HEADERCREATEDBYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEADERCREATEDBY' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.HEADERCREATEDBYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HEADERLASTUPDATEUSERNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.HEADERLASTUPDATEUSERNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEADERLASTUPDATEUSERNAME' in table 'TaskListing' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.HEADERLASTUPDATEUSERNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HEADERDESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.HEADERDESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEADERDESC' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.HEADERDESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEMDESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.ITEMDESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEMDESC' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.ITEMDESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TASKITEMSEQID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.TASKITEMSEQIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TASKITEMSEQID' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.TASKITEMSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEMTITLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.ITEMTITLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEMTITLE' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.ITEMTITLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUSNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.STATUSNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATUSNAME' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.STATUSNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUSSEQID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.STATUSSEQIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATUSSEQID' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.STATUSSEQIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HEADERSTATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.HEADERSTATUSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEADERSTATUS' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.HEADERSTATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DUEDATE() As String
            Get
                If Me.IsDUEDATENull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableTaskListing.DUEDATEColumn),String)
                End If
            End Get
            Set
                Me(Me.tableTaskListing.DUEDATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESPNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.RESPNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESPNAME' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.RESPNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ROLEDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.ROLEDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROLEDESCRIPTION' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.ROLEDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RESPROLESITENAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.RESPROLESITENAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RESPROLESITENAME' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.RESPROLESITENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXTERNALSOURCEURL() As String
            Get
                Try 
                    Return CType(Me(Me.tableTaskListing.EXTERNALSOURCEURLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTERNALSOURCEURL' in table 'TaskListing' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaskListing.EXTERNALSOURCEURLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMMENTS() As String
            Get
                If Me.IsCOMMENTSNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableTaskListing.COMMENTSColumn),String)
                End If
            End Get
            Set
                Me(Me.tableTaskListing.COMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBUSUNIT_AREANull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.BUSUNIT_AREAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBUSUNIT_AREANull()
            Me(Me.tableTaskListing.BUSUNIT_AREAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLINENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.LINEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLINENull()
            Me(Me.tableTaskListing.LINEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSITENAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.SITENAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSITENAMENull()
            Me(Me.tableTaskListing.SITENAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACTIVITYNAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.ACTIVITYNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACTIVITYNAMENull()
            Me(Me.tableTaskListing.ACTIVITYNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTARTDATENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.STARTDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTARTDATENull()
            Me(Me.tableTaskListing.STARTDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsENDDATENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.ENDDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetENDDATENull()
            Me(Me.tableTaskListing.ENDDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsATTACHMENTCOUNTNull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.ATTACHMENTCOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetATTACHMENTCOUNTNull()
            Me(Me.tableTaskListing.ATTACHMENTCOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXTERNALSOURCENAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.EXTERNALSOURCENAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXTERNALSOURCENAMENull()
            Me(Me.tableTaskListing.EXTERNALSOURCENAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTASKHEADERSEQIDNull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.TASKHEADERSEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTASKHEADERSEQIDNull()
            Me(Me.tableTaskListing.TASKHEADERSEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXTERNALREFNull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.EXTERNALREFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXTERNALREFNull()
            Me(Me.tableTaskListing.EXTERNALREFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXTERNALSOURCESEQIDNull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.EXTERNALSOURCESEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXTERNALSOURCESEQIDNull()
            Me(Me.tableTaskListing.EXTERNALSOURCESEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSECURITYLEVELNull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.SECURITYLEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSECURITYLEVELNull()
            Me(Me.tableTaskListing.SECURITYLEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACTIVITYSEQIDNull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.ACTIVITYSEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACTIVITYSEQIDNull()
            Me(Me.tableTaskListing.ACTIVITYSEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPLANTCODENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.PLANTCODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPLANTCODENull()
            Me(Me.tableTaskListing.PLANTCODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTASKTYPENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.TASKTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTASKTYPENull()
            Me(Me.tableTaskListing.TASKTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_REGIONNull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.REGIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_REGIONNull()
            Me(Me.tableTaskListing.REGIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIVISIONNull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.DIVISIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIVISIONNull()
            Me(Me.tableTaskListing.DIVISIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHEADERCREATEDDATENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.HEADERCREATEDDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHEADERCREATEDDATENull()
            Me(Me.tableTaskListing.HEADERCREATEDDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHEADERLASTUPDATEDATENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.HEADERLASTUPDATEDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHEADERLASTUPDATEDATENull()
            Me(Me.tableTaskListing.HEADERLASTUPDATEDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEMCREATEDDATENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.ITEMCREATEDDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEMCREATEDDATENull()
            Me(Me.tableTaskListing.ITEMCREATEDDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEMLASTUPDATEDATENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.ITEMLASTUPDATEDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEMLASTUPDATEDATENull()
            Me(Me.tableTaskListing.ITEMLASTUPDATEDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHEADERTITLENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.HEADERTITLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHEADERTITLENull()
            Me(Me.tableTaskListing.HEADERTITLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHEADERCREATEDBYNull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.HEADERCREATEDBYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHEADERCREATEDBYNull()
            Me(Me.tableTaskListing.HEADERCREATEDBYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHEADERLASTUPDATEUSERNAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.HEADERLASTUPDATEUSERNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHEADERLASTUPDATEUSERNAMENull()
            Me(Me.tableTaskListing.HEADERLASTUPDATEUSERNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHEADERDESCNull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.HEADERDESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHEADERDESCNull()
            Me(Me.tableTaskListing.HEADERDESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.ITEMDESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEMDESCNull()
            Me(Me.tableTaskListing.ITEMDESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTASKITEMSEQIDNull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.TASKITEMSEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTASKITEMSEQIDNull()
            Me(Me.tableTaskListing.TASKITEMSEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEMTITLENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.ITEMTITLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEMTITLENull()
            Me(Me.tableTaskListing.ITEMTITLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUSNAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.STATUSNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUSNAMENull()
            Me(Me.tableTaskListing.STATUSNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUSSEQIDNull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.STATUSSEQIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUSSEQIDNull()
            Me(Me.tableTaskListing.STATUSSEQIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHEADERSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.HEADERSTATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHEADERSTATUSNull()
            Me(Me.tableTaskListing.HEADERSTATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDUEDATENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.DUEDATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDUEDATENull()
            Me(Me.tableTaskListing.DUEDATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESPNAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.RESPNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESPNAMENull()
            Me(Me.tableTaskListing.RESPNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsROLEDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.ROLEDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetROLEDESCRIPTIONNull()
            Me(Me.tableTaskListing.ROLEDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRESPROLESITENAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.RESPROLESITENAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRESPROLESITENAMENull()
            Me(Me.tableTaskListing.RESPROLESITENAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXTERNALSOURCEURLNull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.EXTERNALSOURCEURLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXTERNALSOURCEURLNull()
            Me(Me.tableTaskListing.EXTERNALSOURCEURLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tableTaskListing.COMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMMENTSNull()
            Me(Me.tableTaskListing.COMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TaskListingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TaskListingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TaskListingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TaskListingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace TaskListingDALTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TaskListingTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As OracleDataAdapter
        
        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TaskListing"
            tableMapping.ColumnMappings.Add("BUSUNIT_AREA", "BUSUNIT_AREA")
            tableMapping.ColumnMappings.Add("LINE", "LINE")
            tableMapping.ColumnMappings.Add("SITENAME", "SITENAME")
            tableMapping.ColumnMappings.Add("ACTIVITYNAME", "ACTIVITYNAME")
            tableMapping.ColumnMappings.Add("STARTDATE", "STARTDATE")
            tableMapping.ColumnMappings.Add("ENDDATE", "ENDDATE")
            tableMapping.ColumnMappings.Add("ATTACHMENTCOUNT", "ATTACHMENTCOUNT")
            tableMapping.ColumnMappings.Add("EXTERNALSOURCENAME", "EXTERNALSOURCENAME")
            tableMapping.ColumnMappings.Add("TASKHEADERSEQID", "TASKHEADERSEQID")
            tableMapping.ColumnMappings.Add("EXTERNALREF", "EXTERNALREF")
            tableMapping.ColumnMappings.Add("EXTERNALSOURCESEQID", "EXTERNALSOURCESEQID")
            tableMapping.ColumnMappings.Add("SECURITYLEVEL", "SECURITYLEVEL")
            tableMapping.ColumnMappings.Add("ACTIVITYSEQID", "ACTIVITYSEQID")
            tableMapping.ColumnMappings.Add("PLANTCODE", "PLANTCODE")
            tableMapping.ColumnMappings.Add("TASKTYPE", "TASKTYPE")
            tableMapping.ColumnMappings.Add("REGION", "REGION")
            tableMapping.ColumnMappings.Add("DIVISION", "DIVISION")
            tableMapping.ColumnMappings.Add("HEADERCREATEDDATE", "HEADERCREATEDDATE")
            tableMapping.ColumnMappings.Add("HEADERLASTUPDATEDATE", "HEADERLASTUPDATEDATE")
            tableMapping.ColumnMappings.Add("ITEMCREATEDDATE", "ITEMCREATEDDATE")
            tableMapping.ColumnMappings.Add("ITEMLASTUPDATEDATE", "ITEMLASTUPDATEDATE")
            tableMapping.ColumnMappings.Add("HEADERTITLE", "HEADERTITLE")
            tableMapping.ColumnMappings.Add("HEADERCREATEDBY", "HEADERCREATEDBY")
            tableMapping.ColumnMappings.Add("HEADERLASTUPDATEUSERNAME", "HEADERLASTUPDATEUSERNAME")
            tableMapping.ColumnMappings.Add("HEADERDESC", "HEADERDESC")
            tableMapping.ColumnMappings.Add("ITEMDESC", "ITEMDESC")
            tableMapping.ColumnMappings.Add("TASKITEMSEQID", "TASKITEMSEQID")
            tableMapping.ColumnMappings.Add("ITEMTITLE", "ITEMTITLE")
            tableMapping.ColumnMappings.Add("STATUSNAME", "STATUSNAME")
            tableMapping.ColumnMappings.Add("STATUSSEQID", "STATUSSEQID")
            tableMapping.ColumnMappings.Add("HEADERSTATUS", "HEADERSTATUS")
            tableMapping.ColumnMappings.Add("DUEDATE", "DUEDATE")
            tableMapping.ColumnMappings.Add("RESPNAME", "RESPNAME")
            tableMapping.ColumnMappings.Add("ROLEDESCRIPTION", "ROLEDESCRIPTION")
            tableMapping.ColumnMappings.Add("RESPROLESITENAME", "RESPROLESITENAME")
            tableMapping.ColumnMappings.Add("EXTERNALSOURCEURL", "EXTERNALSOURCEURL")
            tableMapping.ColumnMappings.Add("COMMENTS", "COMMENTS")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(0) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTVIEW.MTTVIEW"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_PLANTCODE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_BUSUNIT"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_AREA"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_LINE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_MACHINE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DIVISION"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_REGION"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_CREATEDBY"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_RESPONSIBLE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_SOURCESYSTEM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_SOURCESYSTEMREF"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_SECURITYLEVEL"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TITLE"
            param.OracledbType = OracledbType.NVarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DESCRIPTION"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TYPE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_ACTIVITY"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TASKSTATUS"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_HEADERDATEFROM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_HEADERDATETO"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DUEDATEFROM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DUEDATETO"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_CLOSEDDATEFROM"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_CLOSEDDATETO"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_ANDOR"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_USERNAME"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TASKHEADER"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_RESPROLEPLANTCODE"
            param.OracledbType = OracledbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSTASKLIST"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracledbType = OracledbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetTaskListing( _
                    ByVal IN_PLANTCODE As String,  _
                    ByVal IN_BUSUNIT As String,  _
                    ByVal IN_AREA As String,  _
                    ByVal IN_LINE As String,  _
                    ByVal IN_MACHINE As String,  _
                    ByVal IN_DIVISION As String,  _
                    ByVal IN_REGION As String,  _
                    ByVal IN_CREATEDBY As String,  _
                    ByVal IN_RESPONSIBLE As String,  _
                    ByVal IN_SOURCESYSTEM As String,  _
                    ByVal IN_SOURCESYSTEMREF As String,  _
                    ByVal IN_SECURITYLEVEL As String,  _
                    ByVal IN_TITLE As String,  _
                    ByVal IN_DESCRIPTION As String,  _
                    ByVal IN_TYPE As String,  _
                    ByVal IN_ACTIVITY As String,  _
                    ByVal IN_TASKSTATUS As String,  _
                    ByVal IN_HEADERDATEFROM As String,  _
                    ByVal IN_HEADERDATETO As String,  _
                    ByVal IN_DUEDATEFROM As String,  _
                    ByVal IN_DUEDATETO As String,  _
                    ByVal IN_CLOSEDDATEFROM As String,  _
                    ByVal IN_CLOSEDDATETO As String,  _
                    ByVal IN_ANDOR As String,  _
                    ByVal IN_USERNAME As String,  _
                    ByVal IN_TASKHEADER As String,  _
                    ByVal IN_RESPROLEPLANTCODE As String,  _
                    ByRef RSTASKLIST As Object) As TaskListingDAL.TaskListingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_PLANTCODE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_PLANTCODE,String)
            End If
            If (IN_BUSUNIT Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(IN_BUSUNIT,String)
            End If
            If (IN_AREA Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IN_AREA,String)
            End If
            If (IN_LINE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(IN_LINE,String)
            End If
            If (IN_MACHINE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(IN_MACHINE,String)
            End If
            If (IN_DIVISION Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(IN_DIVISION,String)
            End If
            If (IN_REGION Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(IN_REGION,String)
            End If
            If (IN_CREATEDBY Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(IN_CREATEDBY,String)
            End If
            If (IN_RESPONSIBLE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(IN_RESPONSIBLE,String)
            End If
            If (IN_SOURCESYSTEM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(9).Value = CType(IN_SOURCESYSTEM,String)
            End If
            If (IN_SOURCESYSTEMREF Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(10).Value = CType(IN_SOURCESYSTEMREF,String)
            End If
            If (IN_SECURITYLEVEL Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(11).Value = CType(IN_SECURITYLEVEL,String)
            End If
            If (IN_TITLE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(12).Value = CType(IN_TITLE,String)
            End If
            If (IN_DESCRIPTION Is Nothing) OrElse IN_DESCRIPTION.Length = 0 Then
                Me.Adapter.SelectCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(13).Value = CType(IN_DESCRIPTION, String)
            End If
            If (IN_TYPE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(14).Value = CType(IN_TYPE,String)
            End If
            If (IN_ACTIVITY Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(15).Value = CType(IN_ACTIVITY,String)
            End If
            If (IN_TASKSTATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(16).Value = CType(IN_TASKSTATUS,String)
            End If
            If (IN_HEADERDATEFROM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(17).Value = CType(IN_HEADERDATEFROM,String)
            End If
            If (IN_HEADERDATETO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(18).Value = CType(IN_HEADERDATETO,String)
            End If
            If (IN_DUEDATEFROM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(19).Value = CType(IN_DUEDATEFROM,String)
            End If
            If (IN_DUEDATETO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(20).Value = CType(IN_DUEDATETO,String)
            End If
            If (IN_CLOSEDDATEFROM Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(21).Value = CType(IN_CLOSEDDATEFROM,String)
            End If
            If (IN_CLOSEDDATETO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(22).Value = CType(IN_CLOSEDDATETO,String)
            End If
            If (IN_ANDOR Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(23).Value = CType(IN_ANDOR,String)
            End If
            If (IN_USERNAME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(24).Value = CType(IN_USERNAME,String)
            End If
            If (IN_TASKHEADER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(25).Value = CType(IN_TASKHEADER,String)
            End If
            If (IN_RESPROLEPLANTCODE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(26).Value = CType(IN_RESPROLEPLANTCODE,String)
            End If
            Dim dataTable As TaskListingDAL.TaskListingDataTable = New TaskListingDAL.TaskListingDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(27).Value Is Nothing)  _
                        OrElse (Me.Adapter.SelectCommand.Parameters(27).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSTASKLIST = Global.System.DBNull.Value
            Else
                RSTASKLIST = CType(Me.Adapter.SelectCommand.Parameters(27).Value,Object)
            End If
            Return dataTable
        End Function
    End Class
End Namespace
