'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3625
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Devart.Data.Oracle


'
'This source code was auto-generated by xsd, Version=2.0.50727.42.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
 Global.System.Serializable(), _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
 Global.System.ComponentModel.ToolboxItem(True), _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
 Global.System.Xml.Serialization.XmlRootAttribute("DataMaintenanceDAL"), _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
Partial Public Class DataMaintenanceDAL
    Inherits Global.System.Data.DataSet

    Private tableNotificationProfile As NotificationProfileDataTable

    Private tableEmployee As EmployeeDataTable

    Private tableServiceName As ServiceNameDataTable

    Private tableDOMAINLIST As DOMAINLISTDataTable

    Private tableFacilitybyUser As FacilitybyUserDataTable

    Private tableSiteUserRoleList As SiteUserRoleListDataTable

    Private tableRoleList As RoleListDataTable

    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("NotificationProfile")) Is Nothing) Then
                MyBase.Tables.Add(New NotificationProfileDataTable(ds.Tables("NotificationProfile")))
            End If
            If (Not (ds.Tables("Employee")) Is Nothing) Then
                MyBase.Tables.Add(New EmployeeDataTable(ds.Tables("Employee")))
            End If
            If (Not (ds.Tables("ServiceName")) Is Nothing) Then
                MyBase.Tables.Add(New ServiceNameDataTable(ds.Tables("ServiceName")))
            End If
            If (Not (ds.Tables("DOMAINLIST")) Is Nothing) Then
                MyBase.Tables.Add(New DOMAINLISTDataTable(ds.Tables("DOMAINLIST")))
            End If
            If (Not (ds.Tables("FacilitybyUser")) Is Nothing) Then
                MyBase.Tables.Add(New FacilitybyUserDataTable(ds.Tables("FacilitybyUser")))
            End If
            If (Not (ds.Tables("SiteUserRoleList")) Is Nothing) Then
                MyBase.Tables.Add(New SiteUserRoleListDataTable(ds.Tables("SiteUserRoleList")))
            End If
            If (Not (ds.Tables("RoleList")) Is Nothing) Then
                MyBase.Tables.Add(New RoleListDataTable(ds.Tables("RoleList")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property NotificationProfile() As NotificationProfileDataTable
        Get
            Return Me.tableNotificationProfile
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Employee() As EmployeeDataTable
        Get
            Return Me.tableEmployee
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property ServiceName() As ServiceNameDataTable
        Get
            Return Me.tableServiceName
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property DOMAINLIST() As DOMAINLISTDataTable
        Get
            Return Me.tableDOMAINLIST
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property FacilitybyUser() As FacilitybyUserDataTable
        Get
            Return Me.tableFacilitybyUser
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property SiteUserRoleList() As SiteUserRoleListDataTable
        Get
            Return Me.tableSiteUserRoleList
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property RoleList() As RoleListDataTable
        Get
            Return Me.tableRoleList
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.BrowsableAttribute(True), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(value As Global.System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataMaintenanceDAL = CType(MyBase.Clone, DataMaintenanceDAL)
        cln.InitVars()
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("NotificationProfile")) Is Nothing) Then
                MyBase.Tables.Add(New NotificationProfileDataTable(ds.Tables("NotificationProfile")))
            End If
            If (Not (ds.Tables("Employee")) Is Nothing) Then
                MyBase.Tables.Add(New EmployeeDataTable(ds.Tables("Employee")))
            End If
            If (Not (ds.Tables("ServiceName")) Is Nothing) Then
                MyBase.Tables.Add(New ServiceNameDataTable(ds.Tables("ServiceName")))
            End If
            If (Not (ds.Tables("DOMAINLIST")) Is Nothing) Then
                MyBase.Tables.Add(New DOMAINLISTDataTable(ds.Tables("DOMAINLIST")))
            End If
            If (Not (ds.Tables("FacilitybyUser")) Is Nothing) Then
                MyBase.Tables.Add(New FacilitybyUserDataTable(ds.Tables("FacilitybyUser")))
            End If
            If (Not (ds.Tables("SiteUserRoleList")) Is Nothing) Then
                MyBase.Tables.Add(New SiteUserRoleListDataTable(ds.Tables("SiteUserRoleList")))
            End If
            If (Not (ds.Tables("RoleList")) Is Nothing) Then
                MyBase.Tables.Add(New RoleListDataTable(ds.Tables("RoleList")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableNotificationProfile = CType(MyBase.Tables("NotificationProfile"), NotificationProfileDataTable)
        If (initTable = True) Then
            If (Not (Me.tableNotificationProfile) Is Nothing) Then
                Me.tableNotificationProfile.InitVars()
            End If
        End If
        Me.tableEmployee = CType(MyBase.Tables("Employee"), EmployeeDataTable)
        If (initTable = True) Then
            If (Not (Me.tableEmployee) Is Nothing) Then
                Me.tableEmployee.InitVars()
            End If
        End If
        Me.tableServiceName = CType(MyBase.Tables("ServiceName"), ServiceNameDataTable)
        If (initTable = True) Then
            If (Not (Me.tableServiceName) Is Nothing) Then
                Me.tableServiceName.InitVars()
            End If
        End If
        Me.tableDOMAINLIST = CType(MyBase.Tables("DOMAINLIST"), DOMAINLISTDataTable)
        If (initTable = True) Then
            If (Not (Me.tableDOMAINLIST) Is Nothing) Then
                Me.tableDOMAINLIST.InitVars()
            End If
        End If
        Me.tableFacilitybyUser = CType(MyBase.Tables("FacilitybyUser"), FacilitybyUserDataTable)
        If (initTable = True) Then
            If (Not (Me.tableFacilitybyUser) Is Nothing) Then
                Me.tableFacilitybyUser.InitVars()
            End If
        End If
        Me.tableSiteUserRoleList = CType(MyBase.Tables("SiteUserRoleList"), SiteUserRoleListDataTable)
        If (initTable = True) Then
            If (Not (Me.tableSiteUserRoleList) Is Nothing) Then
                Me.tableSiteUserRoleList.InitVars()
            End If
        End If
        Me.tableRoleList = CType(MyBase.Tables("RoleList"), RoleListDataTable)
        If (initTable = True) Then
            If (Not (Me.tableRoleList) Is Nothing) Then
                Me.tableRoleList.InitVars()
            End If
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
        Me.DataSetName = "DataMaintenanceDAL"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataMaintenanceDAL.xsd"
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableNotificationProfile = New NotificationProfileDataTable
        MyBase.Tables.Add(Me.tableNotificationProfile)
        Me.tableEmployee = New EmployeeDataTable
        MyBase.Tables.Add(Me.tableEmployee)
        Me.tableServiceName = New ServiceNameDataTable
        MyBase.Tables.Add(Me.tableServiceName)
        Me.tableDOMAINLIST = New DOMAINLISTDataTable
        MyBase.Tables.Add(Me.tableDOMAINLIST)
        Me.tableFacilitybyUser = New FacilitybyUserDataTable
        MyBase.Tables.Add(Me.tableFacilitybyUser)
        Me.tableSiteUserRoleList = New SiteUserRoleListDataTable
        MyBase.Tables.Add(Me.tableSiteUserRoleList)
        Me.tableRoleList = New RoleListDataTable
        MyBase.Tables.Add(Me.tableRoleList)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeNotificationProfile() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeEmployee() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeServiceName() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeDOMAINLIST() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeFacilitybyUser() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeSiteUserRoleList() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeRoleList() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataMaintenanceDAL = New DataMaintenanceDAL
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close()
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close()
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function

    Public Delegate Sub NotificationProfileRowChangeEventHandler(ByVal sender As Object, ByVal e As NotificationProfileRowChangeEvent)

    Public Delegate Sub EmployeeRowChangeEventHandler(ByVal sender As Object, ByVal e As EmployeeRowChangeEvent)

    Public Delegate Sub ServiceNameRowChangeEventHandler(ByVal sender As Object, ByVal e As ServiceNameRowChangeEvent)

    Public Delegate Sub DOMAINLISTRowChangeEventHandler(ByVal sender As Object, ByVal e As DOMAINLISTRowChangeEvent)

    Public Delegate Sub FacilitybyUserRowChangeEventHandler(ByVal sender As Object, ByVal e As FacilitybyUserRowChangeEvent)

    Public Delegate Sub SiteUserRoleListRowChangeEventHandler(ByVal sender As Object, ByVal e As SiteUserRoleListRowChangeEvent)

    Public Delegate Sub RoleListRowChangeEventHandler(ByVal sender As Object, ByVal e As RoleListRowChangeEvent)

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class NotificationProfileDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnROLENAME As Global.System.Data.DataColumn

        Private columnROLESEQID As Global.System.Data.DataColumn

        Private columnEMAILTYPE As Global.System.Data.DataColumn

        Private columnPROFILETYPESEQID As Global.System.Data.DataColumn

        Private columnPROFILETYPEVALUE As Global.System.Data.DataColumn

        Private columnPROFILETYPENAME As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "NotificationProfile"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ROLENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLENAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ROLESEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLESEQID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property EMAILTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMAILTYPE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PROFILETYPESEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROFILETYPESEQID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PROFILETYPEVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROFILETYPEVALUE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PROFILETYPENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROFILETYPENAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As NotificationProfileRow
            Get
                Return CType(Me.Rows(index), NotificationProfileRow)
            End Get
        End Property

        Public Event NotificationProfileRowChanging As NotificationProfileRowChangeEventHandler

        Public Event NotificationProfileRowChanged As NotificationProfileRowChangeEventHandler

        Public Event NotificationProfileRowDeleting As NotificationProfileRowChangeEventHandler

        Public Event NotificationProfileRowDeleted As NotificationProfileRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddNotificationProfileRow(ByVal row As NotificationProfileRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddNotificationProfileRow(ByVal ROLENAME As String, ByVal ROLESEQID As Decimal, ByVal EMAILTYPE As String, ByVal PROFILETYPESEQID As Decimal, ByVal PROFILETYPEVALUE As String, ByVal PROFILETYPENAME As String) As NotificationProfileRow
            Dim rowNotificationProfileRow As NotificationProfileRow = CType(Me.NewRow, NotificationProfileRow)
            Dim columnValuesArray() As Object = New Object() {ROLENAME, ROLESEQID, EMAILTYPE, PROFILETYPESEQID, PROFILETYPEVALUE, PROFILETYPENAME}
            rowNotificationProfileRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNotificationProfileRow)
            Return rowNotificationProfileRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NotificationProfileDataTable = CType(MyBase.Clone, NotificationProfileDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NotificationProfileDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnROLENAME = MyBase.Columns("ROLENAME")
            Me.columnROLESEQID = MyBase.Columns("ROLESEQID")
            Me.columnEMAILTYPE = MyBase.Columns("EMAILTYPE")
            Me.columnPROFILETYPESEQID = MyBase.Columns("PROFILETYPESEQID")
            Me.columnPROFILETYPEVALUE = MyBase.Columns("PROFILETYPEVALUE")
            Me.columnPROFILETYPENAME = MyBase.Columns("PROFILETYPENAME")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnROLENAME = New Global.System.Data.DataColumn("ROLENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLENAME)
            Me.columnROLESEQID = New Global.System.Data.DataColumn("ROLESEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLESEQID)
            Me.columnEMAILTYPE = New Global.System.Data.DataColumn("EMAILTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMAILTYPE)
            Me.columnPROFILETYPESEQID = New Global.System.Data.DataColumn("PROFILETYPESEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROFILETYPESEQID)
            Me.columnPROFILETYPEVALUE = New Global.System.Data.DataColumn("PROFILETYPEVALUE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROFILETYPEVALUE)
            Me.columnPROFILETYPENAME = New Global.System.Data.DataColumn("PROFILETYPENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROFILETYPENAME)
            Me.columnROLENAME.MaxLength = 100
            Me.columnEMAILTYPE.MaxLength = 50
            Me.columnPROFILETYPEVALUE.MaxLength = 100
            Me.columnPROFILETYPENAME.MaxLength = 100
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewNotificationProfileRow() As NotificationProfileRow
            Return CType(Me.NewRow, NotificationProfileRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NotificationProfileRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NotificationProfileRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NotificationProfileRowChangedEvent) Is Nothing) Then
                RaiseEvent NotificationProfileRowChanged(Me, New NotificationProfileRowChangeEvent(CType(e.Row, NotificationProfileRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NotificationProfileRowChangingEvent) Is Nothing) Then
                RaiseEvent NotificationProfileRowChanging(Me, New NotificationProfileRowChangeEvent(CType(e.Row, NotificationProfileRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NotificationProfileRowDeletedEvent) Is Nothing) Then
                RaiseEvent NotificationProfileRowDeleted(Me, New NotificationProfileRowChangeEvent(CType(e.Row, NotificationProfileRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NotificationProfileRowDeletingEvent) Is Nothing) Then
                RaiseEvent NotificationProfileRowDeleting(Me, New NotificationProfileRowChangeEvent(CType(e.Row, NotificationProfileRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveNotificationProfileRow(ByVal row As NotificationProfileRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataMaintenanceDAL = New DataMaintenanceDAL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NotificationProfileDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class EmployeeDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnUSERNAME As Global.System.Data.DataColumn

        Private columnSITEID As Global.System.Data.DataColumn

        Private columnDOMAIN As Global.System.Data.DataColumn

        Private columnFIRSTNAME As Global.System.Data.DataColumn

        Private columnLASTNAME As Global.System.Data.DataColumn

        Private columnEMAIL As Global.System.Data.DataColumn

        Private columnINACTIVE_FLAG As Global.System.Data.DataColumn

        Private columnDEFAULT_LANGUAGE As Global.System.Data.DataColumn

        Private columnMIDDLEINIT As Global.System.Data.DataColumn

        Private columnPLANTCODE As Global.System.Data.DataColumn

        Private columnNETWORKIDKEY As Global.System.Data.DataColumn

        Private columnTASKCOUNT As Global.System.Data.DataColumn

        Private columnEXTENSION As Global.System.Data.DataColumn

        Private columnTRANSFEREMP_FLAG As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Employee"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property USERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSERNAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SITEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSITEID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DOMAINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOMAIN
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property FIRSTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIRSTNAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LASTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLASTNAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property EMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMAIL
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property INACTIVE_FLAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINACTIVE_FLAG
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DEFAULT_LANGUAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEFAULT_LANGUAGE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property MIDDLEINITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMIDDLEINIT
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PLANTCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLANTCODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NETWORKIDKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNETWORKIDKEY
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TASKCOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKCOUNT
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property EXTENSIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTENSION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TRANSFEREMP_FLAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRANSFEREMP_FLAG
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As EmployeeRow
            Get
                Return CType(Me.Rows(index), EmployeeRow)
            End Get
        End Property

        Public Event EmployeeRowChanging As EmployeeRowChangeEventHandler

        Public Event EmployeeRowChanged As EmployeeRowChangeEventHandler

        Public Event EmployeeRowDeleting As EmployeeRowChangeEventHandler

        Public Event EmployeeRowDeleted As EmployeeRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddEmployeeRow(ByVal row As EmployeeRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddEmployeeRow(ByVal USERNAME As String, ByVal SITEID As String, ByVal DOMAIN As String, ByVal FIRSTNAME As String, ByVal LASTNAME As String, ByVal EMAIL As String, ByVal INACTIVE_FLAG As String, ByVal DEFAULT_LANGUAGE As String, ByVal MIDDLEINIT As String, ByVal PLANTCODE As String, ByVal NETWORKIDKEY As String, ByVal TASKCOUNT As String, ByVal EXTENSION As String, ByVal TRANSFEREMP_FLAG As String) As EmployeeRow
            Dim rowEmployeeRow As EmployeeRow = CType(Me.NewRow, EmployeeRow)
            Dim columnValuesArray() As Object = New Object() {USERNAME, SITEID, DOMAIN, FIRSTNAME, LASTNAME, EMAIL, INACTIVE_FLAG, DEFAULT_LANGUAGE, MIDDLEINIT, PLANTCODE, NETWORKIDKEY, TASKCOUNT, EXTENSION, TRANSFEREMP_FLAG}
            rowEmployeeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEmployeeRow)
            Return rowEmployeeRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EmployeeDataTable = CType(MyBase.Clone, EmployeeDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EmployeeDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnUSERNAME = MyBase.Columns("USERNAME")
            Me.columnSITEID = MyBase.Columns("SITEID")
            Me.columnDOMAIN = MyBase.Columns("DOMAIN")
            Me.columnFIRSTNAME = MyBase.Columns("FIRSTNAME")
            Me.columnLASTNAME = MyBase.Columns("LASTNAME")
            Me.columnEMAIL = MyBase.Columns("EMAIL")
            Me.columnINACTIVE_FLAG = MyBase.Columns("INACTIVE_FLAG")
            Me.columnDEFAULT_LANGUAGE = MyBase.Columns("DEFAULT_LANGUAGE")
            Me.columnMIDDLEINIT = MyBase.Columns("MIDDLEINIT")
            Me.columnPLANTCODE = MyBase.Columns("PLANTCODE")
            Me.columnNETWORKIDKEY = MyBase.Columns("NETWORKIDKEY")
            Me.columnTASKCOUNT = MyBase.Columns("TASKCOUNT")
            Me.columnEXTENSION = MyBase.Columns("EXTENSION")
            Me.columnTRANSFEREMP_FLAG = MyBase.Columns("TRANSFEREMP_FLAG")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnUSERNAME = New Global.System.Data.DataColumn("USERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSERNAME)
            Me.columnSITEID = New Global.System.Data.DataColumn("SITEID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSITEID)
            Me.columnDOMAIN = New Global.System.Data.DataColumn("DOMAIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOMAIN)
            Me.columnFIRSTNAME = New Global.System.Data.DataColumn("FIRSTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIRSTNAME)
            Me.columnLASTNAME = New Global.System.Data.DataColumn("LASTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLASTNAME)
            Me.columnEMAIL = New Global.System.Data.DataColumn("EMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMAIL)
            Me.columnINACTIVE_FLAG = New Global.System.Data.DataColumn("INACTIVE_FLAG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINACTIVE_FLAG)
            Me.columnDEFAULT_LANGUAGE = New Global.System.Data.DataColumn("DEFAULT_LANGUAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEFAULT_LANGUAGE)
            Me.columnMIDDLEINIT = New Global.System.Data.DataColumn("MIDDLEINIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMIDDLEINIT)
            Me.columnPLANTCODE = New Global.System.Data.DataColumn("PLANTCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLANTCODE)
            Me.columnNETWORKIDKEY = New Global.System.Data.DataColumn("NETWORKIDKEY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNETWORKIDKEY)
            Me.columnTASKCOUNT = New Global.System.Data.DataColumn("TASKCOUNT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKCOUNT)
            Me.columnEXTENSION = New Global.System.Data.DataColumn("EXTENSION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTENSION)
            Me.columnTRANSFEREMP_FLAG = New Global.System.Data.DataColumn("TRANSFEREMP_FLAG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRANSFEREMP_FLAG)
            Me.columnUSERNAME.AllowDBNull = False
            Me.columnUSERNAME.MaxLength = 50
            Me.columnSITEID.AllowDBNull = False
            Me.columnSITEID.MaxLength = 2
            Me.columnDOMAIN.MaxLength = 15
            Me.columnFIRSTNAME.MaxLength = 50
            Me.columnLASTNAME.MaxLength = 50
            Me.columnEMAIL.MaxLength = 50
            Me.columnINACTIVE_FLAG.MaxLength = 1
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewEmployeeRow() As EmployeeRow
            Return CType(Me.NewRow, EmployeeRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EmployeeRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EmployeeRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EmployeeRowChangedEvent) Is Nothing) Then
                RaiseEvent EmployeeRowChanged(Me, New EmployeeRowChangeEvent(CType(e.Row, EmployeeRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EmployeeRowChangingEvent) Is Nothing) Then
                RaiseEvent EmployeeRowChanging(Me, New EmployeeRowChangeEvent(CType(e.Row, EmployeeRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EmployeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent EmployeeRowDeleted(Me, New EmployeeRowChangeEvent(CType(e.Row, EmployeeRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EmployeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent EmployeeRowDeleting(Me, New EmployeeRowChangeEvent(CType(e.Row, EmployeeRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveEmployeeRow(ByVal row As EmployeeRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataMaintenanceDAL = New DataMaintenanceDAL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EmployeeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class ServiceNameDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnSERVICE_NAME As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "ServiceName"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SERVICE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERVICE_NAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As ServiceNameRow
            Get
                Return CType(Me.Rows(index), ServiceNameRow)
            End Get
        End Property

        Public Event ServiceNameRowChanging As ServiceNameRowChangeEventHandler

        Public Event ServiceNameRowChanged As ServiceNameRowChangeEventHandler

        Public Event ServiceNameRowDeleting As ServiceNameRowChangeEventHandler

        Public Event ServiceNameRowDeleted As ServiceNameRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddServiceNameRow(ByVal row As ServiceNameRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddServiceNameRow(ByVal SERVICE_NAME As String) As ServiceNameRow
            Dim rowServiceNameRow As ServiceNameRow = CType(Me.NewRow, ServiceNameRow)
            Dim columnValuesArray() As Object = New Object() {SERVICE_NAME}
            rowServiceNameRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowServiceNameRow)
            Return rowServiceNameRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ServiceNameDataTable = CType(MyBase.Clone, ServiceNameDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ServiceNameDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnSERVICE_NAME = MyBase.Columns("SERVICE_NAME")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnSERVICE_NAME = New Global.System.Data.DataColumn("SERVICE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERVICE_NAME)
            Me.columnSERVICE_NAME.MaxLength = 64
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewServiceNameRow() As ServiceNameRow
            Return CType(Me.NewRow, ServiceNameRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ServiceNameRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ServiceNameRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ServiceNameRowChangedEvent) Is Nothing) Then
                RaiseEvent ServiceNameRowChanged(Me, New ServiceNameRowChangeEvent(CType(e.Row, ServiceNameRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ServiceNameRowChangingEvent) Is Nothing) Then
                RaiseEvent ServiceNameRowChanging(Me, New ServiceNameRowChangeEvent(CType(e.Row, ServiceNameRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ServiceNameRowDeletedEvent) Is Nothing) Then
                RaiseEvent ServiceNameRowDeleted(Me, New ServiceNameRowChangeEvent(CType(e.Row, ServiceNameRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ServiceNameRowDeletingEvent) Is Nothing) Then
                RaiseEvent ServiceNameRowDeleting(Me, New ServiceNameRowChangeEvent(CType(e.Row, ServiceNameRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveServiceNameRow(ByVal row As ServiceNameRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataMaintenanceDAL = New DataMaintenanceDAL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ServiceNameDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class DOMAINLISTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnDOMAIN As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "DOMAINLIST"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DOMAINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOMAIN
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As DOMAINLISTRow
            Get
                Return CType(Me.Rows(index), DOMAINLISTRow)
            End Get
        End Property

        Public Event DOMAINLISTRowChanging As DOMAINLISTRowChangeEventHandler

        Public Event DOMAINLISTRowChanged As DOMAINLISTRowChangeEventHandler

        Public Event DOMAINLISTRowDeleting As DOMAINLISTRowChangeEventHandler

        Public Event DOMAINLISTRowDeleted As DOMAINLISTRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddDOMAINLISTRow(ByVal row As DOMAINLISTRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddDOMAINLISTRow(ByVal DOMAIN As String) As DOMAINLISTRow
            Dim rowDOMAINLISTRow As DOMAINLISTRow = CType(Me.NewRow, DOMAINLISTRow)
            Dim columnValuesArray() As Object = New Object() {DOMAIN}
            rowDOMAINLISTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDOMAINLISTRow)
            Return rowDOMAINLISTRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DOMAINLISTDataTable = CType(MyBase.Clone, DOMAINLISTDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DOMAINLISTDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnDOMAIN = MyBase.Columns("DOMAIN")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnDOMAIN = New Global.System.Data.DataColumn("DOMAIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOMAIN)
            Me.columnDOMAIN.MaxLength = 15
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewDOMAINLISTRow() As DOMAINLISTRow
            Return CType(Me.NewRow, DOMAINLISTRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DOMAINLISTRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DOMAINLISTRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DOMAINLISTRowChangedEvent) Is Nothing) Then
                RaiseEvent DOMAINLISTRowChanged(Me, New DOMAINLISTRowChangeEvent(CType(e.Row, DOMAINLISTRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DOMAINLISTRowChangingEvent) Is Nothing) Then
                RaiseEvent DOMAINLISTRowChanging(Me, New DOMAINLISTRowChangeEvent(CType(e.Row, DOMAINLISTRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DOMAINLISTRowDeletedEvent) Is Nothing) Then
                RaiseEvent DOMAINLISTRowDeleted(Me, New DOMAINLISTRowChangeEvent(CType(e.Row, DOMAINLISTRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DOMAINLISTRowDeletingEvent) Is Nothing) Then
                RaiseEvent DOMAINLISTRowDeleting(Me, New DOMAINLISTRowChangeEvent(CType(e.Row, DOMAINLISTRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveDOMAINLISTRow(ByVal row As DOMAINLISTRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataMaintenanceDAL = New DataMaintenanceDAL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DOMAINLISTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class FacilitybyUserDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnSITENAME As Global.System.Data.DataColumn

        Private columnPLANTCODE As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "FacilitybyUser"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SITENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSITENAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PLANTCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLANTCODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As FacilitybyUserRow
            Get
                Return CType(Me.Rows(index), FacilitybyUserRow)
            End Get
        End Property

        Public Event FacilitybyUserRowChanging As FacilitybyUserRowChangeEventHandler

        Public Event FacilitybyUserRowChanged As FacilitybyUserRowChangeEventHandler

        Public Event FacilitybyUserRowDeleting As FacilitybyUserRowChangeEventHandler

        Public Event FacilitybyUserRowDeleted As FacilitybyUserRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddFacilitybyUserRow(ByVal row As FacilitybyUserRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddFacilitybyUserRow(ByVal SITENAME As String, ByVal PLANTCODE As String) As FacilitybyUserRow
            Dim rowFacilitybyUserRow As FacilitybyUserRow = CType(Me.NewRow, FacilitybyUserRow)
            Dim columnValuesArray() As Object = New Object() {SITENAME, PLANTCODE}
            rowFacilitybyUserRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFacilitybyUserRow)
            Return rowFacilitybyUserRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FacilitybyUserDataTable = CType(MyBase.Clone, FacilitybyUserDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FacilitybyUserDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnSITENAME = MyBase.Columns("SITENAME")
            Me.columnPLANTCODE = MyBase.Columns("PLANTCODE")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnSITENAME = New Global.System.Data.DataColumn("SITENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSITENAME)
            Me.columnPLANTCODE = New Global.System.Data.DataColumn("PLANTCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLANTCODE)
            Me.columnSITENAME.MaxLength = 100
            Me.columnPLANTCODE.MaxLength = 4
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewFacilitybyUserRow() As FacilitybyUserRow
            Return CType(Me.NewRow, FacilitybyUserRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FacilitybyUserRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FacilitybyUserRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FacilitybyUserRowChangedEvent) Is Nothing) Then
                RaiseEvent FacilitybyUserRowChanged(Me, New FacilitybyUserRowChangeEvent(CType(e.Row, FacilitybyUserRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FacilitybyUserRowChangingEvent) Is Nothing) Then
                RaiseEvent FacilitybyUserRowChanging(Me, New FacilitybyUserRowChangeEvent(CType(e.Row, FacilitybyUserRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FacilitybyUserRowDeletedEvent) Is Nothing) Then
                RaiseEvent FacilitybyUserRowDeleted(Me, New FacilitybyUserRowChangeEvent(CType(e.Row, FacilitybyUserRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FacilitybyUserRowDeletingEvent) Is Nothing) Then
                RaiseEvent FacilitybyUserRowDeleting(Me, New FacilitybyUserRowChangeEvent(CType(e.Row, FacilitybyUserRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveFacilitybyUserRow(ByVal row As FacilitybyUserRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataMaintenanceDAL = New DataMaintenanceDAL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FacilitybyUserDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class SiteUserRoleListDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnPLANTCODE As Global.System.Data.DataColumn

        Private columnROLEDESCRIPTION As Global.System.Data.DataColumn

        Private columnNAME As Global.System.Data.DataColumn

        Private columnUSERNAME As Global.System.Data.DataColumn

        Private columnROLESEQID As Global.System.Data.DataColumn

        Private columnROLENAME As Global.System.Data.DataColumn

        Private columnBUSUNIT As Global.System.Data.DataColumn

        Private columnAREA As Global.System.Data.DataColumn

        Private columnLINE As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "SiteUserRoleList"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PLANTCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLANTCODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ROLEDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLEDESCRIPTION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property USERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSERNAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ROLESEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLESEQID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ROLENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLENAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property BUSUNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUSUNIT
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAREA
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLINE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As SiteUserRoleListRow
            Get
                Return CType(Me.Rows(index), SiteUserRoleListRow)
            End Get
        End Property

        Public Event SiteUserRoleListRowChanging As SiteUserRoleListRowChangeEventHandler

        Public Event SiteUserRoleListRowChanged As SiteUserRoleListRowChangeEventHandler

        Public Event SiteUserRoleListRowDeleting As SiteUserRoleListRowChangeEventHandler

        Public Event SiteUserRoleListRowDeleted As SiteUserRoleListRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddSiteUserRoleListRow(ByVal row As SiteUserRoleListRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddSiteUserRoleListRow(ByVal PLANTCODE As String, ByVal ROLEDESCRIPTION As String, ByVal NAME As String, ByVal USERNAME As String, ByVal ROLESEQID As Decimal, ByVal ROLENAME As String, ByVal BUSUNIT As String, ByVal AREA As String, ByVal LINE As String) As SiteUserRoleListRow
            Dim rowSiteUserRoleListRow As SiteUserRoleListRow = CType(Me.NewRow, SiteUserRoleListRow)
            Dim columnValuesArray() As Object = New Object() {PLANTCODE, ROLEDESCRIPTION, NAME, USERNAME, ROLESEQID, ROLENAME, BUSUNIT, AREA, LINE}
            rowSiteUserRoleListRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSiteUserRoleListRow)
            Return rowSiteUserRoleListRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SiteUserRoleListDataTable = CType(MyBase.Clone, SiteUserRoleListDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SiteUserRoleListDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnPLANTCODE = MyBase.Columns("PLANTCODE")
            Me.columnROLEDESCRIPTION = MyBase.Columns("ROLEDESCRIPTION")
            Me.columnNAME = MyBase.Columns("NAME")
            Me.columnUSERNAME = MyBase.Columns("USERNAME")
            Me.columnROLESEQID = MyBase.Columns("ROLESEQID")
            Me.columnROLENAME = MyBase.Columns("ROLENAME")
            Me.columnBUSUNIT = MyBase.Columns("BUSUNIT")
            Me.columnAREA = MyBase.Columns("AREA")
            Me.columnLINE = MyBase.Columns("LINE")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnPLANTCODE = New Global.System.Data.DataColumn("PLANTCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLANTCODE)
            Me.columnROLEDESCRIPTION = New Global.System.Data.DataColumn("ROLEDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLEDESCRIPTION)
            Me.columnNAME = New Global.System.Data.DataColumn("NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAME)
            Me.columnUSERNAME = New Global.System.Data.DataColumn("USERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSERNAME)
            Me.columnROLESEQID = New Global.System.Data.DataColumn("ROLESEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLESEQID)
            Me.columnROLENAME = New Global.System.Data.DataColumn("ROLENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLENAME)
            Me.columnBUSUNIT = New Global.System.Data.DataColumn("BUSUNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUSUNIT)
            Me.columnAREA = New Global.System.Data.DataColumn("AREA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAREA)
            Me.columnLINE = New Global.System.Data.DataColumn("LINE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLINE)
            Me.columnPLANTCODE.AllowDBNull = False
            Me.columnPLANTCODE.MaxLength = 4
            Me.columnROLEDESCRIPTION.MaxLength = 250
            Me.columnNAME.MaxLength = 50
            Me.columnUSERNAME.MaxLength = 50
            Me.columnROLESEQID.AllowDBNull = False
            Me.columnROLENAME.MaxLength = 100
            Me.columnBUSUNIT.AllowDBNull = False
            Me.columnBUSUNIT.MaxLength = 100
            Me.columnAREA.AllowDBNull = False
            Me.columnAREA.MaxLength = 100
            Me.columnLINE.AllowDBNull = False
            Me.columnLINE.MaxLength = 100
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewSiteUserRoleListRow() As SiteUserRoleListRow
            Return CType(Me.NewRow, SiteUserRoleListRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SiteUserRoleListRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SiteUserRoleListRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SiteUserRoleListRowChangedEvent) Is Nothing) Then
                RaiseEvent SiteUserRoleListRowChanged(Me, New SiteUserRoleListRowChangeEvent(CType(e.Row, SiteUserRoleListRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SiteUserRoleListRowChangingEvent) Is Nothing) Then
                RaiseEvent SiteUserRoleListRowChanging(Me, New SiteUserRoleListRowChangeEvent(CType(e.Row, SiteUserRoleListRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SiteUserRoleListRowDeletedEvent) Is Nothing) Then
                RaiseEvent SiteUserRoleListRowDeleted(Me, New SiteUserRoleListRowChangeEvent(CType(e.Row, SiteUserRoleListRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SiteUserRoleListRowDeletingEvent) Is Nothing) Then
                RaiseEvent SiteUserRoleListRowDeleting(Me, New SiteUserRoleListRowChangeEvent(CType(e.Row, SiteUserRoleListRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveSiteUserRoleListRow(ByVal row As SiteUserRoleListRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataMaintenanceDAL = New DataMaintenanceDAL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SiteUserRoleListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class RoleListDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnROLESEQID As Global.System.Data.DataColumn

        Private columnROLENAME As Global.System.Data.DataColumn

        Private columnROLEDESCRIPTION As Global.System.Data.DataColumn

        Private columnROLETYPE As Global.System.Data.DataColumn

        Private columnDISPLAYINRESPDROPDOWN As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "RoleList"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ROLESEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLESEQID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ROLENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLENAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ROLEDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLEDESCRIPTION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ROLETYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnROLETYPE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DISPLAYINRESPDROPDOWNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISPLAYINRESPDROPDOWN
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As RoleListRow
            Get
                Return CType(Me.Rows(index), RoleListRow)
            End Get
        End Property

        Public Event RoleListRowChanging As RoleListRowChangeEventHandler

        Public Event RoleListRowChanged As RoleListRowChangeEventHandler

        Public Event RoleListRowDeleting As RoleListRowChangeEventHandler

        Public Event RoleListRowDeleted As RoleListRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddRoleListRow(ByVal row As RoleListRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddRoleListRow(ByVal ROLESEQID As Decimal, ByVal ROLENAME As String, ByVal ROLEDESCRIPTION As String, ByVal ROLETYPE As String, ByVal DISPLAYINRESPDROPDOWN As String) As RoleListRow
            Dim rowRoleListRow As RoleListRow = CType(Me.NewRow, RoleListRow)
            Dim columnValuesArray() As Object = New Object() {ROLESEQID, ROLENAME, ROLEDESCRIPTION, ROLETYPE, DISPLAYINRESPDROPDOWN}
            rowRoleListRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRoleListRow)
            Return rowRoleListRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RoleListDataTable = CType(MyBase.Clone, RoleListDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RoleListDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnROLESEQID = MyBase.Columns("ROLESEQID")
            Me.columnROLENAME = MyBase.Columns("ROLENAME")
            Me.columnROLEDESCRIPTION = MyBase.Columns("ROLEDESCRIPTION")
            Me.columnROLETYPE = MyBase.Columns("ROLETYPE")
            Me.columnDISPLAYINRESPDROPDOWN = MyBase.Columns("DISPLAYINRESPDROPDOWN")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnROLESEQID = New Global.System.Data.DataColumn("ROLESEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLESEQID)
            Me.columnROLENAME = New Global.System.Data.DataColumn("ROLENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLENAME)
            Me.columnROLEDESCRIPTION = New Global.System.Data.DataColumn("ROLEDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLEDESCRIPTION)
            Me.columnROLETYPE = New Global.System.Data.DataColumn("ROLETYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnROLETYPE)
            Me.columnDISPLAYINRESPDROPDOWN = New Global.System.Data.DataColumn("DISPLAYINRESPDROPDOWN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISPLAYINRESPDROPDOWN)
            Me.columnROLESEQID.AllowDBNull = False
            Me.columnROLENAME.MaxLength = 100
            Me.columnROLEDESCRIPTION.MaxLength = 250
            Me.columnROLETYPE.MaxLength = 25
            Me.columnDISPLAYINRESPDROPDOWN.MaxLength = 1
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewRoleListRow() As RoleListRow
            Return CType(Me.NewRow, RoleListRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RoleListRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RoleListRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RoleListRowChangedEvent) Is Nothing) Then
                RaiseEvent RoleListRowChanged(Me, New RoleListRowChangeEvent(CType(e.Row, RoleListRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RoleListRowChangingEvent) Is Nothing) Then
                RaiseEvent RoleListRowChanging(Me, New RoleListRowChangeEvent(CType(e.Row, RoleListRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RoleListRowDeletedEvent) Is Nothing) Then
                RaiseEvent RoleListRowDeleted(Me, New RoleListRowChangeEvent(CType(e.Row, RoleListRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RoleListRowDeletingEvent) Is Nothing) Then
                RaiseEvent RoleListRowDeleting(Me, New RoleListRowChangeEvent(CType(e.Row, RoleListRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveRoleListRow(ByVal row As RoleListRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataMaintenanceDAL = New DataMaintenanceDAL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RoleListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class NotificationProfileRow
        Inherits Global.System.Data.DataRow

        Private tableNotificationProfile As NotificationProfileDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNotificationProfile = CType(Me.Table, NotificationProfileDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ROLENAME() As String
            Get
                Try
                    Return CType(Me(Me.tableNotificationProfile.ROLENAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROLENAME' in table 'NotificationProfile' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableNotificationProfile.ROLENAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ROLESEQID() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableNotificationProfile.ROLESEQIDColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROLESEQID' in table 'NotificationProfile' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableNotificationProfile.ROLESEQIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property EMAILTYPE() As String
            Get
                Try
                    Return CType(Me(Me.tableNotificationProfile.EMAILTYPEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMAILTYPE' in table 'NotificationProfile' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableNotificationProfile.EMAILTYPEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property PROFILETYPESEQID() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableNotificationProfile.PROFILETYPESEQIDColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROFILETYPESEQID' in table 'NotificationProfile' is DBNull." & _
                            "", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableNotificationProfile.PROFILETYPESEQIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property PROFILETYPEVALUE() As String
            Get
                Try
                    Return CType(Me(Me.tableNotificationProfile.PROFILETYPEVALUEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROFILETYPEVALUE' in table 'NotificationProfile' is DBNull." & _
                            "", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableNotificationProfile.PROFILETYPEVALUEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property PROFILETYPENAME() As String
            Get
                Try
                    Return CType(Me(Me.tableNotificationProfile.PROFILETYPENAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROFILETYPENAME' in table 'NotificationProfile' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableNotificationProfile.PROFILETYPENAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsROLENAMENull() As Boolean
            Return Me.IsNull(Me.tableNotificationProfile.ROLENAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetROLENAMENull()
            Me(Me.tableNotificationProfile.ROLENAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsROLESEQIDNull() As Boolean
            Return Me.IsNull(Me.tableNotificationProfile.ROLESEQIDColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetROLESEQIDNull()
            Me(Me.tableNotificationProfile.ROLESEQIDColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsEMAILTYPENull() As Boolean
            Return Me.IsNull(Me.tableNotificationProfile.EMAILTYPEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetEMAILTYPENull()
            Me(Me.tableNotificationProfile.EMAILTYPEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsPROFILETYPESEQIDNull() As Boolean
            Return Me.IsNull(Me.tableNotificationProfile.PROFILETYPESEQIDColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetPROFILETYPESEQIDNull()
            Me(Me.tableNotificationProfile.PROFILETYPESEQIDColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsPROFILETYPEVALUENull() As Boolean
            Return Me.IsNull(Me.tableNotificationProfile.PROFILETYPEVALUEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetPROFILETYPEVALUENull()
            Me(Me.tableNotificationProfile.PROFILETYPEVALUEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsPROFILETYPENAMENull() As Boolean
            Return Me.IsNull(Me.tableNotificationProfile.PROFILETYPENAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetPROFILETYPENAMENull()
            Me(Me.tableNotificationProfile.PROFILETYPENAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class EmployeeRow
        Inherits Global.System.Data.DataRow

        Private tableEmployee As EmployeeDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmployee = CType(Me.Table, EmployeeDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property USERNAME() As String
            Get
                Return CType(Me(Me.tableEmployee.USERNAMEColumn), String)
            End Get
            Set(value As String)
                Me(Me.tableEmployee.USERNAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SITEID() As String
            Get
                Return CType(Me(Me.tableEmployee.SITEIDColumn), String)
            End Get
            Set(value As String)
                Me(Me.tableEmployee.SITEIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property DOMAIN() As String
            Get
                Try
                    Return CType(Me(Me.tableEmployee.DOMAINColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOMAIN' in table 'Employee' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableEmployee.DOMAINColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property FIRSTNAME() As String
            Get
                Try
                    Return CType(Me(Me.tableEmployee.FIRSTNAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FIRSTNAME' in table 'Employee' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableEmployee.FIRSTNAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property LASTNAME() As String
            Get
                Try
                    Return CType(Me(Me.tableEmployee.LASTNAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LASTNAME' in table 'Employee' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableEmployee.LASTNAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property EMAIL() As String
            Get
                Try
                    Return CType(Me(Me.tableEmployee.EMAILColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMAIL' in table 'Employee' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableEmployee.EMAILColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property INACTIVE_FLAG() As String
            Get
                Try
                    Return CType(Me(Me.tableEmployee.INACTIVE_FLAGColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INACTIVE_FLAG' in table 'Employee' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableEmployee.INACTIVE_FLAGColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property DEFAULT_LANGUAGE() As String
            Get
                Try
                    Return CType(Me(Me.tableEmployee.DEFAULT_LANGUAGEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEFAULT_LANGUAGE' in table 'Employee' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableEmployee.DEFAULT_LANGUAGEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property MIDDLEINIT() As String
            Get
                Try
                    Return CType(Me(Me.tableEmployee.MIDDLEINITColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MIDDLEINIT' in table 'Employee' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableEmployee.MIDDLEINITColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property PLANTCODE() As String
            Get
                Try
                    Return CType(Me(Me.tableEmployee.PLANTCODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLANTCODE' in table 'Employee' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableEmployee.PLANTCODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property NETWORKIDKEY() As String
            Get
                Try
                    Return CType(Me(Me.tableEmployee.NETWORKIDKEYColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NETWORKIDKEY' in table 'Employee' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableEmployee.NETWORKIDKEYColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TASKCOUNT() As String
            Get
                Try
                    Return CType(Me(Me.tableEmployee.TASKCOUNTColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TASKCOUNT' in table 'Employee' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableEmployee.TASKCOUNTColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property EXTENSION() As String
            Get
                Try
                    Return CType(Me(Me.tableEmployee.EXTENSIONColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTENSION' in table 'Employee' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableEmployee.EXTENSIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TRANSFEREMP_FLAG() As String
            Get
                Try
                    Return CType(Me(Me.tableEmployee.TRANSFEREMP_FLAGColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TRANSFEREMP_FLAG' in table 'Employee' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableEmployee.TRANSFEREMP_FLAGColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsDOMAINNull() As Boolean
            Return Me.IsNull(Me.tableEmployee.DOMAINColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetDOMAINNull()
            Me(Me.tableEmployee.DOMAINColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsFIRSTNAMENull() As Boolean
            Return Me.IsNull(Me.tableEmployee.FIRSTNAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetFIRSTNAMENull()
            Me(Me.tableEmployee.FIRSTNAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsLASTNAMENull() As Boolean
            Return Me.IsNull(Me.tableEmployee.LASTNAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetLASTNAMENull()
            Me(Me.tableEmployee.LASTNAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsEMAILNull() As Boolean
            Return Me.IsNull(Me.tableEmployee.EMAILColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetEMAILNull()
            Me(Me.tableEmployee.EMAILColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsINACTIVE_FLAGNull() As Boolean
            Return Me.IsNull(Me.tableEmployee.INACTIVE_FLAGColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetINACTIVE_FLAGNull()
            Me(Me.tableEmployee.INACTIVE_FLAGColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsDEFAULT_LANGUAGENull() As Boolean
            Return Me.IsNull(Me.tableEmployee.DEFAULT_LANGUAGEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetDEFAULT_LANGUAGENull()
            Me(Me.tableEmployee.DEFAULT_LANGUAGEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsMIDDLEINITNull() As Boolean
            Return Me.IsNull(Me.tableEmployee.MIDDLEINITColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetMIDDLEINITNull()
            Me(Me.tableEmployee.MIDDLEINITColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsPLANTCODENull() As Boolean
            Return Me.IsNull(Me.tableEmployee.PLANTCODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetPLANTCODENull()
            Me(Me.tableEmployee.PLANTCODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsNETWORKIDKEYNull() As Boolean
            Return Me.IsNull(Me.tableEmployee.NETWORKIDKEYColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetNETWORKIDKEYNull()
            Me(Me.tableEmployee.NETWORKIDKEYColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsTASKCOUNTNull() As Boolean
            Return Me.IsNull(Me.tableEmployee.TASKCOUNTColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetTASKCOUNTNull()
            Me(Me.tableEmployee.TASKCOUNTColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsEXTENSIONNull() As Boolean
            Return Me.IsNull(Me.tableEmployee.EXTENSIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetEXTENSIONNull()
            Me(Me.tableEmployee.EXTENSIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsTRANSFEREMP_FLAGNull() As Boolean
            Return Me.IsNull(Me.tableEmployee.TRANSFEREMP_FLAGColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetTRANSFEREMP_FLAGNull()
            Me(Me.tableEmployee.TRANSFEREMP_FLAGColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class ServiceNameRow
        Inherits Global.System.Data.DataRow

        Private tableServiceName As ServiceNameDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableServiceName = CType(Me.Table, ServiceNameDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SERVICE_NAME() As String
            Get
                Try
                    Return CType(Me(Me.tableServiceName.SERVICE_NAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SERVICE_NAME' in table 'ServiceName' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableServiceName.SERVICE_NAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSERVICE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableServiceName.SERVICE_NAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSERVICE_NAMENull()
            Me(Me.tableServiceName.SERVICE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class DOMAINLISTRow
        Inherits Global.System.Data.DataRow

        Private tableDOMAINLIST As DOMAINLISTDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDOMAINLIST = CType(Me.Table, DOMAINLISTDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property DOMAIN() As String
            Get
                Try
                    Return CType(Me(Me.tableDOMAINLIST.DOMAINColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOMAIN' in table 'DOMAINLIST' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableDOMAINLIST.DOMAINColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsDOMAINNull() As Boolean
            Return Me.IsNull(Me.tableDOMAINLIST.DOMAINColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetDOMAINNull()
            Me(Me.tableDOMAINLIST.DOMAINColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class FacilitybyUserRow
        Inherits Global.System.Data.DataRow

        Private tableFacilitybyUser As FacilitybyUserDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFacilitybyUser = CType(Me.Table, FacilitybyUserDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SITENAME() As String
            Get
                Try
                    Return CType(Me(Me.tableFacilitybyUser.SITENAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SITENAME' in table 'FacilitybyUser' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableFacilitybyUser.SITENAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property PLANTCODE() As String
            Get
                Try
                    Return CType(Me(Me.tableFacilitybyUser.PLANTCODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLANTCODE' in table 'FacilitybyUser' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableFacilitybyUser.PLANTCODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSITENAMENull() As Boolean
            Return Me.IsNull(Me.tableFacilitybyUser.SITENAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSITENAMENull()
            Me(Me.tableFacilitybyUser.SITENAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsPLANTCODENull() As Boolean
            Return Me.IsNull(Me.tableFacilitybyUser.PLANTCODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetPLANTCODENull()
            Me(Me.tableFacilitybyUser.PLANTCODEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class SiteUserRoleListRow
        Inherits Global.System.Data.DataRow

        Private tableSiteUserRoleList As SiteUserRoleListDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSiteUserRoleList = CType(Me.Table, SiteUserRoleListDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property PLANTCODE() As String
            Get
                Return CType(Me(Me.tableSiteUserRoleList.PLANTCODEColumn), String)
            End Get
            Set(value As String)
                Me(Me.tableSiteUserRoleList.PLANTCODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ROLEDESCRIPTION() As String
            Get
                Try
                    Return CType(Me(Me.tableSiteUserRoleList.ROLEDESCRIPTIONColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROLEDESCRIPTION' in table 'SiteUserRoleList' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableSiteUserRoleList.ROLEDESCRIPTIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property NAME() As String
            Get
                Try
                    Return CType(Me(Me.tableSiteUserRoleList.NAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NAME' in table 'SiteUserRoleList' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableSiteUserRoleList.NAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property USERNAME() As String
            Get
                Try
                    Return CType(Me(Me.tableSiteUserRoleList.USERNAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USERNAME' in table 'SiteUserRoleList' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableSiteUserRoleList.USERNAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ROLESEQID() As Decimal
            Get
                Return CType(Me(Me.tableSiteUserRoleList.ROLESEQIDColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableSiteUserRoleList.ROLESEQIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ROLENAME() As String
            Get
                Try
                    Return CType(Me(Me.tableSiteUserRoleList.ROLENAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROLENAME' in table 'SiteUserRoleList' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableSiteUserRoleList.ROLENAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property BUSUNIT() As String
            Get
                Return CType(Me(Me.tableSiteUserRoleList.BUSUNITColumn), String)
            End Get
            Set(value As String)
                Me(Me.tableSiteUserRoleList.BUSUNITColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property AREA() As String
            Get
                Return CType(Me(Me.tableSiteUserRoleList.AREAColumn), String)
            End Get
            Set(value As String)
                Me(Me.tableSiteUserRoleList.AREAColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property LINE() As String
            Get
                Return CType(Me(Me.tableSiteUserRoleList.LINEColumn), String)
            End Get
            Set(value As String)
                Me(Me.tableSiteUserRoleList.LINEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsROLEDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableSiteUserRoleList.ROLEDESCRIPTIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetROLEDESCRIPTIONNull()
            Me(Me.tableSiteUserRoleList.ROLEDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tableSiteUserRoleList.NAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetNAMENull()
            Me(Me.tableSiteUserRoleList.NAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsUSERNAMENull() As Boolean
            Return Me.IsNull(Me.tableSiteUserRoleList.USERNAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetUSERNAMENull()
            Me(Me.tableSiteUserRoleList.USERNAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsROLENAMENull() As Boolean
            Return Me.IsNull(Me.tableSiteUserRoleList.ROLENAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetROLENAMENull()
            Me(Me.tableSiteUserRoleList.ROLENAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class RoleListRow
        Inherits Global.System.Data.DataRow

        Private tableRoleList As RoleListDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRoleList = CType(Me.Table, RoleListDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ROLESEQID() As Decimal
            Get
                Return CType(Me(Me.tableRoleList.ROLESEQIDColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableRoleList.ROLESEQIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ROLENAME() As String
            Get
                Try
                    Return CType(Me(Me.tableRoleList.ROLENAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROLENAME' in table 'RoleList' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableRoleList.ROLENAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ROLEDESCRIPTION() As String
            Get
                Try
                    Return CType(Me(Me.tableRoleList.ROLEDESCRIPTIONColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROLEDESCRIPTION' in table 'RoleList' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableRoleList.ROLEDESCRIPTIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ROLETYPE() As String
            Get
                Try
                    Return CType(Me(Me.tableRoleList.ROLETYPEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ROLETYPE' in table 'RoleList' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableRoleList.ROLETYPEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property DISPLAYINRESPDROPDOWN() As String
            Get
                Try
                    Return CType(Me(Me.tableRoleList.DISPLAYINRESPDROPDOWNColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DISPLAYINRESPDROPDOWN' in table 'RoleList' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableRoleList.DISPLAYINRESPDROPDOWNColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsROLENAMENull() As Boolean
            Return Me.IsNull(Me.tableRoleList.ROLENAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetROLENAMENull()
            Me(Me.tableRoleList.ROLENAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsROLEDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableRoleList.ROLEDESCRIPTIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetROLEDESCRIPTIONNull()
            Me(Me.tableRoleList.ROLEDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsROLETYPENull() As Boolean
            Return Me.IsNull(Me.tableRoleList.ROLETYPEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetROLETYPENull()
            Me(Me.tableRoleList.ROLETYPEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsDISPLAYINRESPDROPDOWNNull() As Boolean
            Return Me.IsNull(Me.tableRoleList.DISPLAYINRESPDROPDOWNColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetDISPLAYINRESPDROPDOWNNull()
            Me(Me.tableRoleList.DISPLAYINRESPDROPDOWNColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class NotificationProfileRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As NotificationProfileRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As NotificationProfileRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As NotificationProfileRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class EmployeeRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As EmployeeRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As EmployeeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As EmployeeRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class ServiceNameRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As ServiceNameRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As ServiceNameRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As ServiceNameRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class DOMAINLISTRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As DOMAINLISTRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As DOMAINLISTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As DOMAINLISTRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class FacilitybyUserRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As FacilitybyUserRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As FacilitybyUserRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As FacilitybyUserRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class SiteUserRoleListRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As SiteUserRoleListRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As SiteUserRoleListRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As SiteUserRoleListRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class RoleListRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As RoleListRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As RoleListRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As RoleListRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataMaintenanceDALTableAdapters

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class NotificationProfileTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "NotificationProfile"
            tableMapping.ColumnMappings.Add("ROLENAME", "ROLENAME")
            tableMapping.ColumnMappings.Add("ROLESEQID", "ROLESEQID")
            tableMapping.ColumnMappings.Add("EMAILTYPE", "EMAILTYPE")
            tableMapping.ColumnMappings.Add("PROFILETYPESEQID", "PROFILETYPESEQID")
            tableMapping.ColumnMappings.Add("PROFILETYPEVALUE", "PROFILETYPEVALUE")
            tableMapping.ColumnMappings.Add("PROFILETYPENAME", "PROFILETYPENAME")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(1) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTGENERALDATA.GETNOTIFICATIONPROFILE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_USERNAME"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSNOTIFICATIONPROFILE"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracleDbType = OracleDbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            Me._commandCollection(1) = New OracleCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "RELADMIN.MTTGENERALDATA.UPDATENOTIFICATIONPROFILE"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_PROFILEUSER"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_REPEATINGDATA"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_USERNAME"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = OracleDbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetNotificationProfile(ByVal IN_USERNAME As String, ByRef RSNOTIFICATIONPROFILE As Object) As DataMaintenanceDAL.NotificationProfileDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_USERNAME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_USERNAME, String)
            End If
            Dim dataTable As DataMaintenanceDAL.NotificationProfileDataTable = New DataMaintenanceDAL.NotificationProfileDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSNOTIFICATIONPROFILE = Global.System.DBNull.Value
            Else
                RSNOTIFICATIONPROFILE = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function UpdateNotificationProfile(ByVal IN_PROFILEUSER As String, ByVal IN_REPEATINGDATA As String, ByVal IN_USERNAME As String, ByRef OUT_STATUS As Global.System.Nullable(Of Decimal)) As Object
            Dim command As OracleCommand = Me.CommandCollection(1)
            If (IN_PROFILEUSER Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(IN_PROFILEUSER, String)
            End If
            If (IN_REPEATINGDATA Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(IN_REPEATINGDATA, String)
            End If
            If (IN_USERNAME Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(IN_USERNAME, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((command.Parameters(3).Value Is Nothing) _
                        OrElse (command.Parameters(3).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_STATUS = New Global.System.Nullable(Of Decimal)
            Else
                OUT_STATUS = New Global.System.Nullable(Of Decimal)(CType(command.Parameters(3).Value, Decimal))
            End If
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class EmployeeTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Employee"
            tableMapping.ColumnMappings.Add("USERNAME", "USERNAME")
            tableMapping.ColumnMappings.Add("SITEID", "SITEID")
            tableMapping.ColumnMappings.Add("DOMAIN", "DOMAIN")
            tableMapping.ColumnMappings.Add("FIRSTNAME", "FIRSTNAME")
            tableMapping.ColumnMappings.Add("LASTNAME", "LASTNAME")
            tableMapping.ColumnMappings.Add("EMAIL", "EMAIL")
            tableMapping.ColumnMappings.Add("INACTIVE_FLAG", "INACTIVE_FLAG")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.UpdateCommand = New OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "RELADMIN.MTTGENERALDATA.UPDATEEMPLOYEE"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "INEMPUSERID"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INDOMAIN"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INSITEID"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INFIRSTNAME"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INLASTNAME"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INEMAIL"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INEXTENSION"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_INACTIVE_FLAG"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INDEFAULT_LANGUAGE"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INPLANTCODE"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INSIGNATUREFILE"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INUSERNAME"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INMIDDLEINIT"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = OracleDbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(3) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTGENERALDATA.GETUSER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_USERNAME"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSUSERINFO"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracleDbType = OracleDbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            Me._commandCollection(1) = New OracleCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "RELADMIN.MTTGENERALDATA.CLEANUPINACTIVEEMPLOYEE"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "INEMPUSERID"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INPLANTCODE"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INREASSIGNUSERID"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INUSERNAME"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = OracleDbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New OracleCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "RELADMIN.MTTGENERALDATA.EMPLOYEELIST"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "INPLANTCODE"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSEMPLOYEELIST"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracleDbType = OracleDbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New OracleCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "RELADMIN.MTTGENERALDATA.UPDATEEMPLOYEE"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "INEMPUSERID"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INDOMAIN"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INFIRSTNAME"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INLASTNAME"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INEMAIL"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INEXTENSION"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_INACTIVE_FLAG"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INDEFAULT_LANGUAGE"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INPLANTCODE"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INSIGNATUREFILE"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INUSERNAME"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INMIDDLEINIT"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INEMPUSERIDKEY"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "INTRANSFEREMP"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = OracleDbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetUser(ByVal IN_USERNAME As String, ByRef RSUSERINFO As Object) As DataMaintenanceDAL.EmployeeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_USERNAME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_USERNAME, String)
            End If
            Dim dataTable As DataMaintenanceDAL.EmployeeDataTable = New DataMaintenanceDAL.EmployeeDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSUSERINFO = Global.System.DBNull.Value
            Else
                RSUSERINFO = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetEmployeeList(ByVal INPLANTCODE As String, ByRef RSEMPLOYEELIST As Object) As DataMaintenanceDAL.EmployeeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (INPLANTCODE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(INPLANTCODE, String)
            End If
            Dim dataTable As DataMaintenanceDAL.EmployeeDataTable = New DataMaintenanceDAL.EmployeeDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSEMPLOYEELIST = Global.System.DBNull.Value
            Else
                RSEMPLOYEELIST = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As DataMaintenanceDAL.EmployeeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As DataMaintenanceDAL) As Integer
            Return Me.Adapter.Update(dataSet, "Employee")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function CLEANUPINACTIVEEMPLOYEE(ByVal INEMPUSERID As String, ByVal INPLANTCODE As String, ByVal INREASSIGNUSERID As String, ByVal INUSERNAME As String, ByRef OUT_STATUS As Global.System.Nullable(Of Decimal)) As Object
            Dim command As OracleCommand = Me.CommandCollection(1)
            If (INEMPUSERID Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(INEMPUSERID, String)
            End If
            If (INPLANTCODE Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(INPLANTCODE, String)
            End If
            If (INREASSIGNUSERID Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(INREASSIGNUSERID, String)
            End If
            If (INUSERNAME Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(INUSERNAME, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((command.Parameters(4).Value Is Nothing) _
                        OrElse (command.Parameters(4).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_STATUS = New Global.System.Nullable(Of Decimal)
            Else
                OUT_STATUS = New Global.System.Nullable(Of Decimal)(CType(command.Parameters(4).Value, Decimal))
            End If
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function UPDATEEMPLOYEE(ByVal INEMPUSERID As String, ByVal INDOMAIN As String, ByVal INFIRSTNAME As String, ByVal INLASTNAME As String, ByVal INEMAIL As String, ByVal INEXTENSION As String, ByVal IN_INACTIVE_FLAG As String, ByVal INDEFAULT_LANGUAGE As String, ByVal INPLANTCODE As String, ByVal INSIGNATUREFILE As String, ByVal INUSERNAME As String, ByVal INMIDDLEINIT As String, ByVal INEMPUSERIDKEY As String, ByVal INTRANSFEREMP As String, ByRef OUT_STATUS As Global.System.Nullable(Of Decimal)) As Object
            Dim command As OracleCommand = Me.CommandCollection(3)
            If (INEMPUSERID Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(INEMPUSERID, String)
            End If
            If (INDOMAIN Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(INDOMAIN, String)
            End If
            If (INFIRSTNAME Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(INFIRSTNAME, String)
            End If
            If (INLASTNAME Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(INLASTNAME, String)
            End If
            If (INEMAIL Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(INEMAIL, String)
            End If
            If (INEXTENSION Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(INEXTENSION, String)
            End If
            If (IN_INACTIVE_FLAG Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(IN_INACTIVE_FLAG, String)
            End If
            If (INDEFAULT_LANGUAGE Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(INDEFAULT_LANGUAGE, String)
            End If
            If (INPLANTCODE Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(INPLANTCODE, String)
            End If
            If (INSIGNATUREFILE Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(INSIGNATUREFILE, String)
            End If
            If (INUSERNAME Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(INUSERNAME, String)
            End If
            If (INMIDDLEINIT Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(INMIDDLEINIT, String)
            End If
            If (INEMPUSERIDKEY Is Nothing) Then
                command.Parameters(12).Value = Global.System.DBNull.Value
            Else
                command.Parameters(12).Value = CType(INEMPUSERIDKEY, String)
            End If
            If (INTRANSFEREMP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("INTRANSFEREMP")
            Else
                command.Parameters(13).Value = CType(INTRANSFEREMP, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((command.Parameters(14).Value Is Nothing) _
                        OrElse (command.Parameters(14).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_STATUS = New Global.System.Nullable(Of Decimal)
            Else
                OUT_STATUS = New Global.System.Nullable(Of Decimal)(CType(command.Parameters(14).Value, Decimal))
            End If
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class ServiceNameTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ServiceName"
            tableMapping.ColumnMappings.Add("SERVICE_NAME", "SERVICE_NAME")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(0) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.RI.GETSERVICENAME"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "RSSERVICENAME"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracleDbType = OracleDbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetServiceName(ByRef RSSERVICENAME As Object) As DataMaintenanceDAL.ServiceNameDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataMaintenanceDAL.ServiceNameDataTable = New DataMaintenanceDAL.ServiceNameDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(0).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(0).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSSERVICENAME = Global.System.DBNull.Value
            Else
                RSSERVICENAME = CType(Me.Adapter.SelectCommand.Parameters(0).Value, Object)
            End If
            Return dataTable
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class DOMAINLISTTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DOMAINLIST"
            tableMapping.ColumnMappings.Add("DOMAIN", "DOMAIN")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(0) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTGENERALDATA.DOMAINLIST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "RSDOMAINLIST"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracleDbType = OracleDbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData(ByRef RSDOMAINLIST As Object) As DataMaintenanceDAL.DOMAINLISTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataMaintenanceDAL.DOMAINLISTDataTable = New DataMaintenanceDAL.DOMAINLISTDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(0).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(0).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSDOMAINLIST = Global.System.DBNull.Value
            Else
                RSDOMAINLIST = CType(Me.Adapter.SelectCommand.Parameters(0).Value, Object)
            End If
            Return dataTable
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class FacilitybyUserTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FacilitybyUser"
            tableMapping.ColumnMappings.Add("SITENAME", "SITENAME")
            tableMapping.ColumnMappings.Add("PLANTCODE", "PLANTCODE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(0) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTSITE.GETSITELISTBYUSER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "INUSERNAME"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSFACILITY"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracleDbType = OracleDbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetSitebyUser(ByVal INUSERNAME As String, ByRef RSFACILITY As Object) As DataMaintenanceDAL.FacilitybyUserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (INUSERNAME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(INUSERNAME, String)
            End If
            Dim dataTable As DataMaintenanceDAL.FacilitybyUserDataTable = New DataMaintenanceDAL.FacilitybyUserDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSFACILITY = Global.System.DBNull.Value
            Else
                RSFACILITY = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class SiteUserRoleListTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SiteUserRoleList"
            tableMapping.ColumnMappings.Add("PLANTCODE", "PLANTCODE")
            tableMapping.ColumnMappings.Add("ROLEDESCRIPTION", "ROLEDESCRIPTION")
            tableMapping.ColumnMappings.Add("NAME", "NAME")
            tableMapping.ColumnMappings.Add("USERNAME", "USERNAME")
            tableMapping.ColumnMappings.Add("ROLESEQID", "ROLESEQID")
            tableMapping.ColumnMappings.Add("ROLENAME", "ROLENAME")
            tableMapping.ColumnMappings.Add("BUSUNIT", "BUSUNIT")
            tableMapping.ColumnMappings.Add("AREA", "AREA")
            tableMapping.ColumnMappings.Add("LINE", "LINE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(2) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTGENERALDATA.GETSITEROLES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_PLANTCODE"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSSITEROLEINFO"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracleDbType = OracleDbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            Me._commandCollection(1) = New OracleCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "RELADMIN.MTTGENERALDATA.DELETEUSERROLES"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_USERNAME"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_ROLESEQID"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_PLANTCODE"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_BUSUNIT"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_AREA"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_LINE"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_UPDATEUSER"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = OracleDbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New OracleCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "RELADMIN.MTTGENERALDATA.UPDATEUSERROLES"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_USERNAME"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_ROLESEQID"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_BUSUNIT"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_AREA"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_LINE"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_PLANTCODE"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_USERNAMEKEY"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_BUSUNITKEY"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_AREAKEY"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_LINEKEY"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_UPDATEUSERNAME"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_UPDATEFLAG"
            param.OracleDbType = OracleDbType.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.OracleDbType = OracleDbType.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetSiteRoles(ByVal IN_PLANTCODE As String, ByRef RSSITEROLEINFO As Object) As DataMaintenanceDAL.SiteUserRoleListDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_PLANTCODE Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_PLANTCODE, String)
            End If
            Dim dataTable As DataMaintenanceDAL.SiteUserRoleListDataTable = New DataMaintenanceDAL.SiteUserRoleListDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSSITEROLEINFO = Global.System.DBNull.Value
            Else
                RSSITEROLEINFO = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function DELETEUSERROLES(ByVal IN_USERNAME As String, ByVal IN_ROLESEQID As String, ByVal IN_PLANTCODE As String, ByVal IN_BUSUNIT As String, ByVal IN_AREA As String, ByVal IN_LINE As String, ByVal IN_UPDATEUSER As String, ByRef OUT_STATUS As Global.System.Nullable(Of Decimal)) As Object
            Dim command As OracleCommand = Me.CommandCollection(1)
            If (IN_USERNAME Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(IN_USERNAME, String)
            End If
            If (IN_ROLESEQID Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(IN_ROLESEQID, String)
            End If
            If (IN_PLANTCODE Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(IN_PLANTCODE, String)
            End If
            If (IN_BUSUNIT Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(IN_BUSUNIT, String)
            End If
            If (IN_AREA Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(IN_AREA, String)
            End If
            If (IN_LINE Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(IN_LINE, String)
            End If
            If (IN_UPDATEUSER Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(IN_UPDATEUSER, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((command.Parameters(7).Value Is Nothing) _
                        OrElse (command.Parameters(7).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_STATUS = New Global.System.Nullable(Of Decimal)
            Else
                OUT_STATUS = New Global.System.Nullable(Of Decimal)(CType(command.Parameters(7).Value, Decimal))
            End If
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function UPDATEUSERROLES(ByVal IN_USERNAME As String, ByVal IN_ROLESEQID As String, ByVal IN_BUSUNIT As String, ByVal IN_AREA As String, ByVal IN_LINE As String, ByVal IN_PLANTCODE As String, ByVal IN_USERNAMEKEY As String, ByVal IN_BUSUNITKEY As String, ByVal IN_AREAKEY As String, ByVal IN_LINEKEY As String, ByVal IN_UPDATEUSERNAME As String, ByVal IN_UPDATEFLAG As String, ByRef OUT_STATUS As Global.System.Nullable(Of Decimal)) As Object
            Dim command As OracleCommand = Me.CommandCollection(2)
            If (IN_USERNAME Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(IN_USERNAME, String)
            End If
            If (IN_ROLESEQID Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(IN_ROLESEQID, String)
            End If
            If (IN_BUSUNIT Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(IN_BUSUNIT, String)
            End If
            If (IN_AREA Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(IN_AREA, String)
            End If
            If (IN_LINE Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(IN_LINE, String)
            End If
            If (IN_PLANTCODE Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(IN_PLANTCODE, String)
            End If
            If (IN_USERNAMEKEY Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(IN_USERNAMEKEY, String)
            End If
            If (IN_BUSUNITKEY Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(IN_BUSUNITKEY, String)
            End If
            If (IN_AREAKEY Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(IN_AREAKEY, String)
            End If
            If (IN_LINEKEY Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(IN_LINEKEY, String)
            End If
            If (IN_UPDATEUSERNAME Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(IN_UPDATEUSERNAME, String)
            End If
            If (IN_UPDATEFLAG Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(IN_UPDATEFLAG, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((command.Parameters(12).Value Is Nothing) _
                        OrElse (command.Parameters(12).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_STATUS = New Global.System.Nullable(Of Decimal)
            Else
                OUT_STATUS = New Global.System.Nullable(Of Decimal)(CType(command.Parameters(12).Value, Decimal))
            End If
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class RoleListTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RoleList"
            tableMapping.ColumnMappings.Add("ROLESEQID", "ROLESEQID")
            tableMapping.ColumnMappings.Add("ROLENAME", "ROLENAME")
            tableMapping.ColumnMappings.Add("ROLEDESCRIPTION", "ROLEDESCRIPTION")
            tableMapping.ColumnMappings.Add("ROLETYPE", "ROLETYPE")
            tableMapping.ColumnMappings.Add("DISPLAYINRESPDROPDOWN", "DISPLAYINRESPDROPDOWN")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(0) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTGENERALDATA.GETROLELIST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "RSROLELIST"
            param.DbType = Global.System.Data.DbType.[Object]
            param.OracleDbType = OracleDbType.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetRoleList(ByRef RSROLELIST As Object) As DataMaintenanceDAL.RoleListDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataMaintenanceDAL.RoleListDataTable = New DataMaintenanceDAL.RoleListDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(0).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(0).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSROLELIST = Global.System.DBNull.Value
            Else
                RSROLELIST = CType(Me.Adapter.SelectCommand.Parameters(0).Value, Object)
            End If
            Return dataTable
        End Function
    End Class
End Namespace
