'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3625
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports Devart.Data.Oracle


'
'This source code was auto-generated by xsd, Version=2.0.50727.42.
'

'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
 Global.System.Serializable(), _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
 Global.System.ComponentModel.ToolboxItem(True), _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
 Global.System.Xml.Serialization.XmlRootAttribute("TaskHeaderDAL"), _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
Partial Public Class TaskHeaderDAL
    Inherits Global.System.Data.DataSet

    Private tableTaskHeader As TaskHeaderDataTable

    Private tableTaskHeaderBusinessManagers As TaskHeaderBusinessManagersDataTable

    Private tableTaskHeaderTaskTypes As TaskHeaderTaskTypesDataTable

    Private tableTaskHeaderTypeManagers As TaskHeaderTypeManagersDataTable

    Private tableBusinessRegionSite As BusinessRegionSiteDataTable

    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TaskHeader")) Is Nothing) Then
                MyBase.Tables.Add(New TaskHeaderDataTable(ds.Tables("TaskHeader")))
            End If
            If (Not (ds.Tables("TaskHeaderBusinessManagers")) Is Nothing) Then
                MyBase.Tables.Add(New TaskHeaderBusinessManagersDataTable(ds.Tables("TaskHeaderBusinessManagers")))
            End If
            If (Not (ds.Tables("TaskHeaderTaskTypes")) Is Nothing) Then
                MyBase.Tables.Add(New TaskHeaderTaskTypesDataTable(ds.Tables("TaskHeaderTaskTypes")))
            End If
            If (Not (ds.Tables("TaskHeaderTypeManagers")) Is Nothing) Then
                MyBase.Tables.Add(New TaskHeaderTypeManagersDataTable(ds.Tables("TaskHeaderTypeManagers")))
            End If
            If (Not (ds.Tables("BusinessRegionSite")) Is Nothing) Then
                MyBase.Tables.Add(New BusinessRegionSiteDataTable(ds.Tables("BusinessRegionSite")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property TaskHeader() As TaskHeaderDataTable
        Get
            Return Me.tableTaskHeader
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property TaskHeaderBusinessManagers() As TaskHeaderBusinessManagersDataTable
        Get
            Return Me.tableTaskHeaderBusinessManagers
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property TaskHeaderTaskTypes() As TaskHeaderTaskTypesDataTable
        Get
            Return Me.tableTaskHeaderTaskTypes
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property TaskHeaderTypeManagers() As TaskHeaderTypeManagersDataTable
        Get
            Return Me.tableTaskHeaderTypeManagers
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property BusinessRegionSite() As BusinessRegionSiteDataTable
        Get
            Return Me.tableBusinessRegionSite
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.BrowsableAttribute(True), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(value As Global.System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As TaskHeaderDAL = CType(MyBase.Clone, TaskHeaderDAL)
        cln.InitVars()
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("TaskHeader")) Is Nothing) Then
                MyBase.Tables.Add(New TaskHeaderDataTable(ds.Tables("TaskHeader")))
            End If
            If (Not (ds.Tables("TaskHeaderBusinessManagers")) Is Nothing) Then
                MyBase.Tables.Add(New TaskHeaderBusinessManagersDataTable(ds.Tables("TaskHeaderBusinessManagers")))
            End If
            If (Not (ds.Tables("TaskHeaderTaskTypes")) Is Nothing) Then
                MyBase.Tables.Add(New TaskHeaderTaskTypesDataTable(ds.Tables("TaskHeaderTaskTypes")))
            End If
            If (Not (ds.Tables("TaskHeaderTypeManagers")) Is Nothing) Then
                MyBase.Tables.Add(New TaskHeaderTypeManagersDataTable(ds.Tables("TaskHeaderTypeManagers")))
            End If
            If (Not (ds.Tables("BusinessRegionSite")) Is Nothing) Then
                MyBase.Tables.Add(New BusinessRegionSiteDataTable(ds.Tables("BusinessRegionSite")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTaskHeader = CType(MyBase.Tables("TaskHeader"), TaskHeaderDataTable)
        If (initTable = True) Then
            If (Not (Me.tableTaskHeader) Is Nothing) Then
                Me.tableTaskHeader.InitVars()
            End If
        End If
        Me.tableTaskHeaderBusinessManagers = CType(MyBase.Tables("TaskHeaderBusinessManagers"), TaskHeaderBusinessManagersDataTable)
        If (initTable = True) Then
            If (Not (Me.tableTaskHeaderBusinessManagers) Is Nothing) Then
                Me.tableTaskHeaderBusinessManagers.InitVars()
            End If
        End If
        Me.tableTaskHeaderTaskTypes = CType(MyBase.Tables("TaskHeaderTaskTypes"), TaskHeaderTaskTypesDataTable)
        If (initTable = True) Then
            If (Not (Me.tableTaskHeaderTaskTypes) Is Nothing) Then
                Me.tableTaskHeaderTaskTypes.InitVars()
            End If
        End If
        Me.tableTaskHeaderTypeManagers = CType(MyBase.Tables("TaskHeaderTypeManagers"), TaskHeaderTypeManagersDataTable)
        If (initTable = True) Then
            If (Not (Me.tableTaskHeaderTypeManagers) Is Nothing) Then
                Me.tableTaskHeaderTypeManagers.InitVars()
            End If
        End If
        Me.tableBusinessRegionSite = CType(MyBase.Tables("BusinessRegionSite"), BusinessRegionSiteDataTable)
        If (initTable = True) Then
            If (Not (Me.tableBusinessRegionSite) Is Nothing) Then
                Me.tableBusinessRegionSite.InitVars()
            End If
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
        Me.DataSetName = "TaskHeaderDAL"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/TaskHeader.xsd"
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTaskHeader = New TaskHeaderDataTable
        MyBase.Tables.Add(Me.tableTaskHeader)
        Me.tableTaskHeaderBusinessManagers = New TaskHeaderBusinessManagersDataTable
        MyBase.Tables.Add(Me.tableTaskHeaderBusinessManagers)
        Me.tableTaskHeaderTaskTypes = New TaskHeaderTaskTypesDataTable
        MyBase.Tables.Add(Me.tableTaskHeaderTaskTypes)
        Me.tableTaskHeaderTypeManagers = New TaskHeaderTypeManagersDataTable
        MyBase.Tables.Add(Me.tableTaskHeaderTypeManagers)
        Me.tableBusinessRegionSite = New BusinessRegionSiteDataTable
        MyBase.Tables.Add(Me.tableBusinessRegionSite)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeTaskHeader() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeTaskHeaderBusinessManagers() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeTaskHeaderTaskTypes() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeTaskHeaderTypeManagers() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeBusinessRegionSite() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As TaskHeaderDAL = New TaskHeaderDAL
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close()
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close()
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function

    Public Delegate Sub TaskHeaderRowChangeEventHandler(ByVal sender As Object, ByVal e As TaskHeaderRowChangeEvent)

    Public Delegate Sub TaskHeaderBusinessManagersRowChangeEventHandler(ByVal sender As Object, ByVal e As TaskHeaderBusinessManagersRowChangeEvent)

    Public Delegate Sub TaskHeaderTaskTypesRowChangeEventHandler(ByVal sender As Object, ByVal e As TaskHeaderTaskTypesRowChangeEvent)

    Public Delegate Sub TaskHeaderTypeManagersRowChangeEventHandler(ByVal sender As Object, ByVal e As TaskHeaderTypeManagersRowChangeEvent)

    Public Delegate Sub BusinessRegionSiteRowChangeEventHandler(ByVal sender As Object, ByVal e As BusinessRegionSiteRowChangeEvent)

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class TaskHeaderDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnBUSUNIT_AREA As Global.System.Data.DataColumn

        Private columnLINE As Global.System.Data.DataColumn

        Private columnSITENAME As Global.System.Data.DataColumn

        Private columnACTIVITYNAME As Global.System.Data.DataColumn

        Private columnSTARTDATE As Global.System.Data.DataColumn

        Private columnENDDATE As Global.System.Data.DataColumn

        Private columnCREATEDDATE As Global.System.Data.DataColumn

        Private columnLASTUPDATEDATE As Global.System.Data.DataColumn

        Private columnATTACHMENTCOUNT As Global.System.Data.DataColumn

        Private columnEXTERNALSOURCENAME As Global.System.Data.DataColumn

        Private columnTASKHEADERSEQID As Global.System.Data.DataColumn

        Private columnTITLE As Global.System.Data.DataColumn

        Private columnEXTERNALREF As Global.System.Data.DataColumn

        Private columnEXTERNALSOURCESEQID As Global.System.Data.DataColumn

        Private columnSECURITYLEVEL As Global.System.Data.DataColumn

        Private columnACTIVITYSEQID As Global.System.Data.DataColumn

        Private columnPLANTCODE As Global.System.Data.DataColumn

        Private columnCREATEDBY As Global.System.Data.DataColumn

        Private columnLASTUPDATEUSERNAME As Global.System.Data.DataColumn

        Private columnSITEREGION As Global.System.Data.DataColumn

        Private columnDIVISION As Global.System.Data.DataColumn

        Private columnDESCRIPTION As Global.System.Data.DataColumn

        Private columnLAST_REPLICATION_DATE As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "TaskHeader"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property BUSUNIT_AREAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUSUNIT_AREA
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLINE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SITENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSITENAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ACTIVITYNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTIVITYNAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property STARTDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTARTDATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ENDDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENDDATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CREATEDDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATEDDATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LASTUPDATEDATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLASTUPDATEDATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ATTACHMENTCOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnATTACHMENTCOUNT
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property EXTERNALSOURCENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTERNALSOURCENAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TASKHEADERSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKHEADERSEQID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TITLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTITLE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property EXTERNALREFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTERNALREF
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property EXTERNALSOURCESEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTERNALSOURCESEQID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SECURITYLEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSECURITYLEVEL
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ACTIVITYSEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTIVITYSEQID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PLANTCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLANTCODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CREATEDBYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATEDBY
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LASTUPDATEUSERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLASTUPDATEUSERNAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SITEREGIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSITEREGION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DIVISIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIVISION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LAST_REPLICATION_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLAST_REPLICATION_DATE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As TaskHeaderRow
            Get
                Return CType(Me.Rows(index), TaskHeaderRow)
            End Get
        End Property

        Public Event TaskHeaderRowChanging As TaskHeaderRowChangeEventHandler

        Public Event TaskHeaderRowChanged As TaskHeaderRowChangeEventHandler

        Public Event TaskHeaderRowDeleting As TaskHeaderRowChangeEventHandler

        Public Event TaskHeaderRowDeleted As TaskHeaderRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddTaskHeaderRow(ByVal row As TaskHeaderRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddTaskHeaderRow( _
                    ByVal BUSUNIT_AREA As String, _
                    ByVal LINE As String, _
                    ByVal SITENAME As String, _
                    ByVal ACTIVITYNAME As String, _
                    ByVal STARTDATE As String, _
                    ByVal ENDDATE As String, _
                    ByVal CREATEDDATE As Date, _
                    ByVal LASTUPDATEDATE As String, _
                    ByVal ATTACHMENTCOUNT As Decimal, _
                    ByVal EXTERNALSOURCENAME As String, _
                    ByVal TASKHEADERSEQID As Decimal, _
                    ByVal TITLE As String, _
                    ByVal EXTERNALREF As String, _
                    ByVal EXTERNALSOURCESEQID As String, _
                    ByVal SECURITYLEVEL As String, _
                    ByVal ACTIVITYSEQID As Decimal, _
                    ByVal PLANTCODE As String, _
                    ByVal CREATEDBY As String, _
                    ByVal LASTUPDATEUSERNAME As String, _
                    ByVal SITEREGION As String, _
                    ByVal DIVISION As String, _
                    ByVal DESCRIPTION As String, _
                    ByVal LAST_REPLICATION_DATE As String) As TaskHeaderRow
            Dim rowTaskHeaderRow As TaskHeaderRow = CType(Me.NewRow, TaskHeaderRow)
            Dim columnValuesArray() As Object = New Object() {BUSUNIT_AREA, LINE, SITENAME, ACTIVITYNAME, STARTDATE, ENDDATE, CREATEDDATE, LASTUPDATEDATE, ATTACHMENTCOUNT, EXTERNALSOURCENAME, TASKHEADERSEQID, TITLE, EXTERNALREF, EXTERNALSOURCESEQID, SECURITYLEVEL, ACTIVITYSEQID, PLANTCODE, CREATEDBY, LASTUPDATEUSERNAME, SITEREGION, DIVISION, DESCRIPTION, LAST_REPLICATION_DATE}
            rowTaskHeaderRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTaskHeaderRow)
            Return rowTaskHeaderRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TaskHeaderDataTable = CType(MyBase.Clone, TaskHeaderDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TaskHeaderDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnBUSUNIT_AREA = MyBase.Columns("BUSUNIT_AREA")
            Me.columnLINE = MyBase.Columns("LINE")
            Me.columnSITENAME = MyBase.Columns("SITENAME")
            Me.columnACTIVITYNAME = MyBase.Columns("ACTIVITYNAME")
            Me.columnSTARTDATE = MyBase.Columns("STARTDATE")
            Me.columnENDDATE = MyBase.Columns("ENDDATE")
            Me.columnCREATEDDATE = MyBase.Columns("CREATEDDATE")
            Me.columnLASTUPDATEDATE = MyBase.Columns("LASTUPDATEDATE")
            Me.columnATTACHMENTCOUNT = MyBase.Columns("ATTACHMENTCOUNT")
            Me.columnEXTERNALSOURCENAME = MyBase.Columns("EXTERNALSOURCENAME")
            Me.columnTASKHEADERSEQID = MyBase.Columns("TASKHEADERSEQID")
            Me.columnTITLE = MyBase.Columns("TITLE")
            Me.columnEXTERNALREF = MyBase.Columns("EXTERNALREF")
            Me.columnEXTERNALSOURCESEQID = MyBase.Columns("EXTERNALSOURCESEQID")
            Me.columnSECURITYLEVEL = MyBase.Columns("SECURITYLEVEL")
            Me.columnACTIVITYSEQID = MyBase.Columns("ACTIVITYSEQID")
            Me.columnPLANTCODE = MyBase.Columns("PLANTCODE")
            Me.columnCREATEDBY = MyBase.Columns("CREATEDBY")
            Me.columnLASTUPDATEUSERNAME = MyBase.Columns("LASTUPDATEUSERNAME")
            Me.columnSITEREGION = MyBase.Columns("SITEREGION")
            Me.columnDIVISION = MyBase.Columns("DIVISION")
            Me.columnDESCRIPTION = MyBase.Columns("DESCRIPTION")
            Me.columnLAST_REPLICATION_DATE = MyBase.Columns("LAST_REPLICATION_DATE")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnBUSUNIT_AREA = New Global.System.Data.DataColumn("BUSUNIT_AREA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUSUNIT_AREA)
            Me.columnLINE = New Global.System.Data.DataColumn("LINE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLINE)
            Me.columnSITENAME = New Global.System.Data.DataColumn("SITENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSITENAME)
            Me.columnACTIVITYNAME = New Global.System.Data.DataColumn("ACTIVITYNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTIVITYNAME)
            Me.columnSTARTDATE = New Global.System.Data.DataColumn("STARTDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTARTDATE)
            Me.columnENDDATE = New Global.System.Data.DataColumn("ENDDATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENDDATE)
            Me.columnCREATEDDATE = New Global.System.Data.DataColumn("CREATEDDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATEDDATE)
            Me.columnLASTUPDATEDATE = New Global.System.Data.DataColumn("LASTUPDATEDATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLASTUPDATEDATE)
            Me.columnATTACHMENTCOUNT = New Global.System.Data.DataColumn("ATTACHMENTCOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnATTACHMENTCOUNT)
            Me.columnEXTERNALSOURCENAME = New Global.System.Data.DataColumn("EXTERNALSOURCENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTERNALSOURCENAME)
            Me.columnTASKHEADERSEQID = New Global.System.Data.DataColumn("TASKHEADERSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKHEADERSEQID)
            Me.columnTITLE = New Global.System.Data.DataColumn("TITLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTITLE)
            Me.columnEXTERNALREF = New Global.System.Data.DataColumn("EXTERNALREF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTERNALREF)
            Me.columnEXTERNALSOURCESEQID = New Global.System.Data.DataColumn("EXTERNALSOURCESEQID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTERNALSOURCESEQID)
            Me.columnSECURITYLEVEL = New Global.System.Data.DataColumn("SECURITYLEVEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSECURITYLEVEL)
            Me.columnACTIVITYSEQID = New Global.System.Data.DataColumn("ACTIVITYSEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTIVITYSEQID)
            Me.columnPLANTCODE = New Global.System.Data.DataColumn("PLANTCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLANTCODE)
            Me.columnCREATEDBY = New Global.System.Data.DataColumn("CREATEDBY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATEDBY)
            Me.columnLASTUPDATEUSERNAME = New Global.System.Data.DataColumn("LASTUPDATEUSERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLASTUPDATEUSERNAME)
            Me.columnSITEREGION = New Global.System.Data.DataColumn("SITEREGION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSITEREGION)
            Me.columnDIVISION = New Global.System.Data.DataColumn("DIVISION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIVISION)
            Me.columnDESCRIPTION = New Global.System.Data.DataColumn("DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTION)
            Me.columnLAST_REPLICATION_DATE = New Global.System.Data.DataColumn("LAST_REPLICATION_DATE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLAST_REPLICATION_DATE)
            Me.columnBUSUNIT_AREA.MaxLength = 203
            Me.columnLINE.MaxLength = 203
            Me.columnSITENAME.MaxLength = 100
            Me.columnACTIVITYNAME.MaxLength = 100
            Me.columnSTARTDATE.MaxLength = 10
            Me.columnENDDATE.MaxLength = 10
            Me.columnEXTERNALSOURCENAME.MaxLength = 100
            Me.columnTASKHEADERSEQID.AllowDBNull = False
            Me.columnTITLE.MaxLength = 2000
            Me.columnEXTERNALREF.MaxLength = 100
            Me.columnSECURITYLEVEL.MaxLength = 2
            Me.columnPLANTCODE.AllowDBNull = False
            Me.columnPLANTCODE.MaxLength = 4
            Me.columnCREATEDBY.MaxLength = 41
            Me.columnLASTUPDATEUSERNAME.MaxLength = 41
            Me.columnSITEREGION.Caption = "REGION"
            Me.columnSITEREGION.MaxLength = 100
            Me.columnDIVISION.MaxLength = 100
            Me.columnDESCRIPTION.MaxLength = 2147483647
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewTaskHeaderRow() As TaskHeaderRow
            Return CType(Me.NewRow, TaskHeaderRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TaskHeaderRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TaskHeaderRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TaskHeaderRowChangedEvent) Is Nothing) Then
                RaiseEvent TaskHeaderRowChanged(Me, New TaskHeaderRowChangeEvent(CType(e.Row, TaskHeaderRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TaskHeaderRowChangingEvent) Is Nothing) Then
                RaiseEvent TaskHeaderRowChanging(Me, New TaskHeaderRowChangeEvent(CType(e.Row, TaskHeaderRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TaskHeaderRowDeletedEvent) Is Nothing) Then
                RaiseEvent TaskHeaderRowDeleted(Me, New TaskHeaderRowChangeEvent(CType(e.Row, TaskHeaderRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TaskHeaderRowDeletingEvent) Is Nothing) Then
                RaiseEvent TaskHeaderRowDeleting(Me, New TaskHeaderRowChangeEvent(CType(e.Row, TaskHeaderRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveTaskHeaderRow(ByVal row As TaskHeaderRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TaskHeaderDAL = New TaskHeaderDAL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TaskHeaderDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class TaskHeaderBusinessManagersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnNAME As Global.System.Data.DataColumn

        Private columnUSERNAME As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "TaskHeaderBusinessManagers"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property USERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSERNAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As TaskHeaderBusinessManagersRow
            Get
                Return CType(Me.Rows(index), TaskHeaderBusinessManagersRow)
            End Get
        End Property

        Public Event TaskHeaderBusinessManagersRowChanging As TaskHeaderBusinessManagersRowChangeEventHandler

        Public Event TaskHeaderBusinessManagersRowChanged As TaskHeaderBusinessManagersRowChangeEventHandler

        Public Event TaskHeaderBusinessManagersRowDeleting As TaskHeaderBusinessManagersRowChangeEventHandler

        Public Event TaskHeaderBusinessManagersRowDeleted As TaskHeaderBusinessManagersRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddTaskHeaderBusinessManagersRow(ByVal row As TaskHeaderBusinessManagersRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddTaskHeaderBusinessManagersRow(ByVal NAME As String, ByVal USERNAME As String) As TaskHeaderBusinessManagersRow
            Dim rowTaskHeaderBusinessManagersRow As TaskHeaderBusinessManagersRow = CType(Me.NewRow, TaskHeaderBusinessManagersRow)
            Dim columnValuesArray() As Object = New Object() {NAME, USERNAME}
            rowTaskHeaderBusinessManagersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTaskHeaderBusinessManagersRow)
            Return rowTaskHeaderBusinessManagersRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TaskHeaderBusinessManagersDataTable = CType(MyBase.Clone, TaskHeaderBusinessManagersDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TaskHeaderBusinessManagersDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnNAME = MyBase.Columns("NAME")
            Me.columnUSERNAME = MyBase.Columns("USERNAME")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnNAME = New Global.System.Data.DataColumn("NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAME)
            Me.columnUSERNAME = New Global.System.Data.DataColumn("USERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSERNAME)
            Me.columnNAME.MaxLength = 50
            Me.columnUSERNAME.AllowDBNull = False
            Me.columnUSERNAME.MaxLength = 50
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewTaskHeaderBusinessManagersRow() As TaskHeaderBusinessManagersRow
            Return CType(Me.NewRow, TaskHeaderBusinessManagersRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TaskHeaderBusinessManagersRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TaskHeaderBusinessManagersRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TaskHeaderBusinessManagersRowChangedEvent) Is Nothing) Then
                RaiseEvent TaskHeaderBusinessManagersRowChanged(Me, New TaskHeaderBusinessManagersRowChangeEvent(CType(e.Row, TaskHeaderBusinessManagersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TaskHeaderBusinessManagersRowChangingEvent) Is Nothing) Then
                RaiseEvent TaskHeaderBusinessManagersRowChanging(Me, New TaskHeaderBusinessManagersRowChangeEvent(CType(e.Row, TaskHeaderBusinessManagersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TaskHeaderBusinessManagersRowDeletedEvent) Is Nothing) Then
                RaiseEvent TaskHeaderBusinessManagersRowDeleted(Me, New TaskHeaderBusinessManagersRowChangeEvent(CType(e.Row, TaskHeaderBusinessManagersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TaskHeaderBusinessManagersRowDeletingEvent) Is Nothing) Then
                RaiseEvent TaskHeaderBusinessManagersRowDeleting(Me, New TaskHeaderBusinessManagersRowChangeEvent(CType(e.Row, TaskHeaderBusinessManagersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveTaskHeaderBusinessManagersRow(ByVal row As TaskHeaderBusinessManagersRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TaskHeaderDAL = New TaskHeaderDAL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TaskHeaderBusinessManagersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class TaskHeaderTaskTypesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnTASKTYPESEQID As Global.System.Data.DataColumn

        Private columnTASKTYPENAME As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "TaskHeaderTaskTypes"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TASKTYPESEQIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKTYPESEQID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TASKTYPENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKTYPENAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As TaskHeaderTaskTypesRow
            Get
                Return CType(Me.Rows(index), TaskHeaderTaskTypesRow)
            End Get
        End Property

        Public Event TaskHeaderTaskTypesRowChanging As TaskHeaderTaskTypesRowChangeEventHandler

        Public Event TaskHeaderTaskTypesRowChanged As TaskHeaderTaskTypesRowChangeEventHandler

        Public Event TaskHeaderTaskTypesRowDeleting As TaskHeaderTaskTypesRowChangeEventHandler

        Public Event TaskHeaderTaskTypesRowDeleted As TaskHeaderTaskTypesRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddTaskHeaderTaskTypesRow(ByVal row As TaskHeaderTaskTypesRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddTaskHeaderTaskTypesRow(ByVal TASKTYPESEQID As Decimal, ByVal TASKTYPENAME As String) As TaskHeaderTaskTypesRow
            Dim rowTaskHeaderTaskTypesRow As TaskHeaderTaskTypesRow = CType(Me.NewRow, TaskHeaderTaskTypesRow)
            Dim columnValuesArray() As Object = New Object() {TASKTYPESEQID, TASKTYPENAME}
            rowTaskHeaderTaskTypesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTaskHeaderTaskTypesRow)
            Return rowTaskHeaderTaskTypesRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TaskHeaderTaskTypesDataTable = CType(MyBase.Clone, TaskHeaderTaskTypesDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TaskHeaderTaskTypesDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnTASKTYPESEQID = MyBase.Columns("TASKTYPESEQID")
            Me.columnTASKTYPENAME = MyBase.Columns("TASKTYPENAME")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnTASKTYPESEQID = New Global.System.Data.DataColumn("TASKTYPESEQID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKTYPESEQID)
            Me.columnTASKTYPENAME = New Global.System.Data.DataColumn("TASKTYPENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKTYPENAME)
            Me.columnTASKTYPESEQID.AllowDBNull = False
            Me.columnTASKTYPENAME.MaxLength = 100
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewTaskHeaderTaskTypesRow() As TaskHeaderTaskTypesRow
            Return CType(Me.NewRow, TaskHeaderTaskTypesRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TaskHeaderTaskTypesRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TaskHeaderTaskTypesRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TaskHeaderTaskTypesRowChangedEvent) Is Nothing) Then
                RaiseEvent TaskHeaderTaskTypesRowChanged(Me, New TaskHeaderTaskTypesRowChangeEvent(CType(e.Row, TaskHeaderTaskTypesRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TaskHeaderTaskTypesRowChangingEvent) Is Nothing) Then
                RaiseEvent TaskHeaderTaskTypesRowChanging(Me, New TaskHeaderTaskTypesRowChangeEvent(CType(e.Row, TaskHeaderTaskTypesRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TaskHeaderTaskTypesRowDeletedEvent) Is Nothing) Then
                RaiseEvent TaskHeaderTaskTypesRowDeleted(Me, New TaskHeaderTaskTypesRowChangeEvent(CType(e.Row, TaskHeaderTaskTypesRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TaskHeaderTaskTypesRowDeletingEvent) Is Nothing) Then
                RaiseEvent TaskHeaderTaskTypesRowDeleting(Me, New TaskHeaderTaskTypesRowChangeEvent(CType(e.Row, TaskHeaderTaskTypesRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveTaskHeaderTaskTypesRow(ByVal row As TaskHeaderTaskTypesRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TaskHeaderDAL = New TaskHeaderDAL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TaskHeaderTaskTypesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class TaskHeaderTypeManagersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnNAME As Global.System.Data.DataColumn

        Private columnUSERNAME As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "TaskHeaderTypeManagers"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property USERNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSERNAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As TaskHeaderTypeManagersRow
            Get
                Return CType(Me.Rows(index), TaskHeaderTypeManagersRow)
            End Get
        End Property

        Public Event TaskHeaderTypeManagersRowChanging As TaskHeaderTypeManagersRowChangeEventHandler

        Public Event TaskHeaderTypeManagersRowChanged As TaskHeaderTypeManagersRowChangeEventHandler

        Public Event TaskHeaderTypeManagersRowDeleting As TaskHeaderTypeManagersRowChangeEventHandler

        Public Event TaskHeaderTypeManagersRowDeleted As TaskHeaderTypeManagersRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddTaskHeaderTypeManagersRow(ByVal row As TaskHeaderTypeManagersRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddTaskHeaderTypeManagersRow(ByVal NAME As String, ByVal USERNAME As String) As TaskHeaderTypeManagersRow
            Dim rowTaskHeaderTypeManagersRow As TaskHeaderTypeManagersRow = CType(Me.NewRow, TaskHeaderTypeManagersRow)
            Dim columnValuesArray() As Object = New Object() {NAME, USERNAME}
            rowTaskHeaderTypeManagersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTaskHeaderTypeManagersRow)
            Return rowTaskHeaderTypeManagersRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TaskHeaderTypeManagersDataTable = CType(MyBase.Clone, TaskHeaderTypeManagersDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TaskHeaderTypeManagersDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnNAME = MyBase.Columns("NAME")
            Me.columnUSERNAME = MyBase.Columns("USERNAME")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnNAME = New Global.System.Data.DataColumn("NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAME)
            Me.columnUSERNAME = New Global.System.Data.DataColumn("USERNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSERNAME)
            Me.columnNAME.MaxLength = 50
            Me.columnUSERNAME.AllowDBNull = False
            Me.columnUSERNAME.MaxLength = 50
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewTaskHeaderTypeManagersRow() As TaskHeaderTypeManagersRow
            Return CType(Me.NewRow, TaskHeaderTypeManagersRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TaskHeaderTypeManagersRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TaskHeaderTypeManagersRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TaskHeaderTypeManagersRowChangedEvent) Is Nothing) Then
                RaiseEvent TaskHeaderTypeManagersRowChanged(Me, New TaskHeaderTypeManagersRowChangeEvent(CType(e.Row, TaskHeaderTypeManagersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TaskHeaderTypeManagersRowChangingEvent) Is Nothing) Then
                RaiseEvent TaskHeaderTypeManagersRowChanging(Me, New TaskHeaderTypeManagersRowChangeEvent(CType(e.Row, TaskHeaderTypeManagersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TaskHeaderTypeManagersRowDeletedEvent) Is Nothing) Then
                RaiseEvent TaskHeaderTypeManagersRowDeleted(Me, New TaskHeaderTypeManagersRowChangeEvent(CType(e.Row, TaskHeaderTypeManagersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TaskHeaderTypeManagersRowDeletingEvent) Is Nothing) Then
                RaiseEvent TaskHeaderTypeManagersRowDeleting(Me, New TaskHeaderTypeManagersRowChangeEvent(CType(e.Row, TaskHeaderTypeManagersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveTaskHeaderTypeManagersRow(ByVal row As TaskHeaderTypeManagersRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TaskHeaderDAL = New TaskHeaderDAL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TaskHeaderTypeManagersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class BusinessRegionSiteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columnDIVISION As Global.System.Data.DataColumn

        Private columnREGION As Global.System.Data.DataColumn

        Private columnSITENAME As Global.System.Data.DataColumn

        Private columnPLANTCODE As Global.System.Data.DataColumn

        Private columnPROCESSED_FLAG As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "BusinessRegionSite"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DIVISIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIVISION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property REGIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREGION
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SITENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSITENAME
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PLANTCODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLANTCODE
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PROCESSED_FLAGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROCESSED_FLAG
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As BusinessRegionSiteRow
            Get
                Return CType(Me.Rows(index), BusinessRegionSiteRow)
            End Get
        End Property

        Public Event BusinessRegionSiteRowChanging As BusinessRegionSiteRowChangeEventHandler

        Public Event BusinessRegionSiteRowChanged As BusinessRegionSiteRowChangeEventHandler

        Public Event BusinessRegionSiteRowDeleting As BusinessRegionSiteRowChangeEventHandler

        Public Event BusinessRegionSiteRowDeleted As BusinessRegionSiteRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddBusinessRegionSiteRow(ByVal row As BusinessRegionSiteRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddBusinessRegionSiteRow(ByVal DIVISION As String, ByVal _REGION As String, ByVal SITENAME As String, ByVal PLANTCODE As String, ByVal PROCESSED_FLAG As String) As BusinessRegionSiteRow
            Dim rowBusinessRegionSiteRow As BusinessRegionSiteRow = CType(Me.NewRow, BusinessRegionSiteRow)
            Dim columnValuesArray() As Object = New Object() {DIVISION, _REGION, SITENAME, PLANTCODE, PROCESSED_FLAG}
            rowBusinessRegionSiteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBusinessRegionSiteRow)
            Return rowBusinessRegionSiteRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BusinessRegionSiteDataTable = CType(MyBase.Clone, BusinessRegionSiteDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BusinessRegionSiteDataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnDIVISION = MyBase.Columns("DIVISION")
            Me.columnREGION = MyBase.Columns("REGION")
            Me.columnSITENAME = MyBase.Columns("SITENAME")
            Me.columnPLANTCODE = MyBase.Columns("PLANTCODE")
            Me.columnPROCESSED_FLAG = MyBase.Columns("PROCESSED_FLAG")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnDIVISION = New Global.System.Data.DataColumn("DIVISION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIVISION)
            Me.columnREGION = New Global.System.Data.DataColumn("REGION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnREGION.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "REGIONColumn")
            Me.columnREGION.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnREGION")
            Me.columnREGION.ExtendedProperties.Add("Generator_UserColumnName", "REGION")
            MyBase.Columns.Add(Me.columnREGION)
            Me.columnSITENAME = New Global.System.Data.DataColumn("SITENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSITENAME)
            Me.columnPLANTCODE = New Global.System.Data.DataColumn("PLANTCODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLANTCODE)
            Me.columnPROCESSED_FLAG = New Global.System.Data.DataColumn("PROCESSED_FLAG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROCESSED_FLAG)
            Me.columnDIVISION.MaxLength = 100
            Me.columnREGION.MaxLength = 100
            Me.columnSITENAME.MaxLength = 100
            Me.columnPLANTCODE.MaxLength = 4
            Me.columnPROCESSED_FLAG.MaxLength = 1
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewBusinessRegionSiteRow() As BusinessRegionSiteRow
            Return CType(Me.NewRow, BusinessRegionSiteRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BusinessRegionSiteRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BusinessRegionSiteRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BusinessRegionSiteRowChangedEvent) Is Nothing) Then
                RaiseEvent BusinessRegionSiteRowChanged(Me, New BusinessRegionSiteRowChangeEvent(CType(e.Row, BusinessRegionSiteRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BusinessRegionSiteRowChangingEvent) Is Nothing) Then
                RaiseEvent BusinessRegionSiteRowChanging(Me, New BusinessRegionSiteRowChangeEvent(CType(e.Row, BusinessRegionSiteRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BusinessRegionSiteRowDeletedEvent) Is Nothing) Then
                RaiseEvent BusinessRegionSiteRowDeleted(Me, New BusinessRegionSiteRowChangeEvent(CType(e.Row, BusinessRegionSiteRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BusinessRegionSiteRowDeletingEvent) Is Nothing) Then
                RaiseEvent BusinessRegionSiteRowDeleting(Me, New BusinessRegionSiteRowChangeEvent(CType(e.Row, BusinessRegionSiteRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveBusinessRegionSiteRow(ByVal row As BusinessRegionSiteRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TaskHeaderDAL = New TaskHeaderDAL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BusinessRegionSiteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class TaskHeaderRow
        Inherits Global.System.Data.DataRow

        Private tableTaskHeader As TaskHeaderDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTaskHeader = CType(Me.Table, TaskHeaderDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property BUSUNIT_AREA() As String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.BUSUNIT_AREAColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUSUNIT_AREA' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableTaskHeader.BUSUNIT_AREAColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property LINE() As String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.LINEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LINE' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableTaskHeader.LINEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SITENAME() As String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.SITENAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SITENAME' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableTaskHeader.SITENAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ACTIVITYNAME() As String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.ACTIVITYNAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACTIVITYNAME' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableTaskHeader.ACTIVITYNAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property STARTDATE() As String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.STARTDATEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STARTDATE' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableTaskHeader.STARTDATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ENDDATE() As String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.ENDDATEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ENDDATE' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableTaskHeader.ENDDATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CREATEDDATE() As Date
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.CREATEDDATEColumn), Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATEDDATE' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(value As Date)
                Me(Me.tableTaskHeader.CREATEDDATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property LASTUPDATEDATE() As Date 'String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.LASTUPDATEDATEColumn), Date) 'String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LASTUPDATEDATE' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Date)
                Me(Me.tableTaskHeader.LASTUPDATEDATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ATTACHMENTCOUNT() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.ATTACHMENTCOUNTColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ATTACHMENTCOUNT' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableTaskHeader.ATTACHMENTCOUNTColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property EXTERNALSOURCENAME() As String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.EXTERNALSOURCENAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTERNALSOURCENAME' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableTaskHeader.EXTERNALSOURCENAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TASKHEADERSEQID() As Decimal
            Get
                Return CType(Me(Me.tableTaskHeader.TASKHEADERSEQIDColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableTaskHeader.TASKHEADERSEQIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TITLE() As String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.TITLEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TITLE' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableTaskHeader.TITLEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property EXTERNALREF() As String
            Get
                If Me.IsEXTERNALREFNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tableTaskHeader.EXTERNALREFColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableTaskHeader.EXTERNALREFColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property EXTERNALSOURCESEQID() As String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.EXTERNALSOURCESEQIDColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTERNALSOURCESEQID' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableTaskHeader.EXTERNALSOURCESEQIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SECURITYLEVEL() As String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.SECURITYLEVELColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SECURITYLEVEL' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableTaskHeader.SECURITYLEVELColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ACTIVITYSEQID() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.ACTIVITYSEQIDColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACTIVITYSEQID' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(value As Decimal)
                Me(Me.tableTaskHeader.ACTIVITYSEQIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property PLANTCODE() As String
            Get
                Return CType(Me(Me.tableTaskHeader.PLANTCODEColumn), String)
            End Get
            Set(value As String)
                Me(Me.tableTaskHeader.PLANTCODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property CREATEDBY() As String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.CREATEDBYColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATEDBY' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableTaskHeader.CREATEDBYColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property LASTUPDATEUSERNAME() As String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.LASTUPDATEUSERNAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LASTUPDATEUSERNAME' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableTaskHeader.LASTUPDATEUSERNAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SITEREGION() As String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.SITEREGIONColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SITEREGION' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableTaskHeader.SITEREGIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property DIVISION() As String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.DIVISIONColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIVISION' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableTaskHeader.DIVISIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property DESCRIPTION() As String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeader.DESCRIPTIONColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESCRIPTION' in table 'TaskHeader' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableTaskHeader.DESCRIPTIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property LAST_REPLICATION_DATE() As String
            Get
                If Me.IsLAST_REPLICATION_DATENull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tableTaskHeader.LAST_REPLICATION_DATEColumn), String)
                End If
            End Get
            Set(value As String)
                Me(Me.tableTaskHeader.LAST_REPLICATION_DATEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsBUSUNIT_AREANull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.BUSUNIT_AREAColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetBUSUNIT_AREANull()
            Me(Me.tableTaskHeader.BUSUNIT_AREAColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsLINENull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.LINEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetLINENull()
            Me(Me.tableTaskHeader.LINEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSITENAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.SITENAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSITENAMENull()
            Me(Me.tableTaskHeader.SITENAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsACTIVITYNAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.ACTIVITYNAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetACTIVITYNAMENull()
            Me(Me.tableTaskHeader.ACTIVITYNAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSTARTDATENull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.STARTDATEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSTARTDATENull()
            Me(Me.tableTaskHeader.STARTDATEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsENDDATENull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.ENDDATEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetENDDATENull()
            Me(Me.tableTaskHeader.ENDDATEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsCREATEDDATENull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.CREATEDDATEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetCREATEDDATENull()
            Me(Me.tableTaskHeader.CREATEDDATEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsLASTUPDATEDATENull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.LASTUPDATEDATEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetLASTUPDATEDATENull()
            Me(Me.tableTaskHeader.LASTUPDATEDATEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsATTACHMENTCOUNTNull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.ATTACHMENTCOUNTColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetATTACHMENTCOUNTNull()
            Me(Me.tableTaskHeader.ATTACHMENTCOUNTColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsEXTERNALSOURCENAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.EXTERNALSOURCENAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetEXTERNALSOURCENAMENull()
            Me(Me.tableTaskHeader.EXTERNALSOURCENAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsTITLENull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.TITLEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetTITLENull()
            Me(Me.tableTaskHeader.TITLEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsEXTERNALREFNull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.EXTERNALREFColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetEXTERNALREFNull()
            Me(Me.tableTaskHeader.EXTERNALREFColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsEXTERNALSOURCESEQIDNull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.EXTERNALSOURCESEQIDColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetEXTERNALSOURCESEQIDNull()
            Me(Me.tableTaskHeader.EXTERNALSOURCESEQIDColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSECURITYLEVELNull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.SECURITYLEVELColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSECURITYLEVELNull()
            Me(Me.tableTaskHeader.SECURITYLEVELColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsACTIVITYSEQIDNull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.ACTIVITYSEQIDColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetACTIVITYSEQIDNull()
            Me(Me.tableTaskHeader.ACTIVITYSEQIDColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsCREATEDBYNull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.CREATEDBYColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetCREATEDBYNull()
            Me(Me.tableTaskHeader.CREATEDBYColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsLASTUPDATEUSERNAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.LASTUPDATEUSERNAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetLASTUPDATEUSERNAMENull()
            Me(Me.tableTaskHeader.LASTUPDATEUSERNAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSITEREGIONNull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.SITEREGIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSITEREGIONNull()
            Me(Me.tableTaskHeader.SITEREGIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsDIVISIONNull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.DIVISIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetDIVISIONNull()
            Me(Me.tableTaskHeader.DIVISIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.DESCRIPTIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tableTaskHeader.DESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsLAST_REPLICATION_DATENull() As Boolean
            Return Me.IsNull(Me.tableTaskHeader.LAST_REPLICATION_DATEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetLAST_REPLICATION_DATENull()
            Me(Me.tableTaskHeader.LAST_REPLICATION_DATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class TaskHeaderBusinessManagersRow
        Inherits Global.System.Data.DataRow

        Private tableTaskHeaderBusinessManagers As TaskHeaderBusinessManagersDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTaskHeaderBusinessManagers = CType(Me.Table, TaskHeaderBusinessManagersDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property NAME() As String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeaderBusinessManagers.NAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NAME' in table 'TaskHeaderBusinessManagers' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableTaskHeaderBusinessManagers.NAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property USERNAME() As String
            Get
                Return CType(Me(Me.tableTaskHeaderBusinessManagers.USERNAMEColumn), String)
            End Get
            Set(value As String)
                Me(Me.tableTaskHeaderBusinessManagers.USERNAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskHeaderBusinessManagers.NAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetNAMENull()
            Me(Me.tableTaskHeaderBusinessManagers.NAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class TaskHeaderTaskTypesRow
        Inherits Global.System.Data.DataRow

        Private tableTaskHeaderTaskTypes As TaskHeaderTaskTypesDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTaskHeaderTaskTypes = CType(Me.Table, TaskHeaderTaskTypesDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TASKTYPESEQID() As Decimal
            Get
                Return CType(Me(Me.tableTaskHeaderTaskTypes.TASKTYPESEQIDColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me.tableTaskHeaderTaskTypes.TASKTYPESEQIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property TASKTYPENAME() As String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeaderTaskTypes.TASKTYPENAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TASKTYPENAME' in table 'TaskHeaderTaskTypes' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableTaskHeaderTaskTypes.TASKTYPENAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsTASKTYPENAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskHeaderTaskTypes.TASKTYPENAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetTASKTYPENAMENull()
            Me(Me.tableTaskHeaderTaskTypes.TASKTYPENAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class TaskHeaderTypeManagersRow
        Inherits Global.System.Data.DataRow

        Private tableTaskHeaderTypeManagers As TaskHeaderTypeManagersDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTaskHeaderTypeManagers = CType(Me.Table, TaskHeaderTypeManagersDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property NAME() As String
            Get
                Try
                    Return CType(Me(Me.tableTaskHeaderTypeManagers.NAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NAME' in table 'TaskHeaderTypeManagers' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableTaskHeaderTypeManagers.NAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property USERNAME() As String
            Get
                Return CType(Me(Me.tableTaskHeaderTypeManagers.USERNAMEColumn), String)
            End Get
            Set(value As String)
                Me(Me.tableTaskHeaderTypeManagers.USERNAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsNAMENull() As Boolean
            Return Me.IsNull(Me.tableTaskHeaderTypeManagers.NAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetNAMENull()
            Me(Me.tableTaskHeaderTypeManagers.NAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class BusinessRegionSiteRow
        Inherits Global.System.Data.DataRow

        Private tableBusinessRegionSite As BusinessRegionSiteDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBusinessRegionSite = CType(Me.Table, BusinessRegionSiteDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property DIVISION() As String
            Get
                Try
                    Return CType(Me(Me.tableBusinessRegionSite.DIVISIONColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIVISION' in table 'BusinessRegionSite' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableBusinessRegionSite.DIVISIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property _REGION() As String
            Get
                Try
                    Return CType(Me(Me.tableBusinessRegionSite.REGIONColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REGION' in table 'BusinessRegionSite' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableBusinessRegionSite.REGIONColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SITENAME() As String
            Get
                Try
                    Return CType(Me(Me.tableBusinessRegionSite.SITENAMEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SITENAME' in table 'BusinessRegionSite' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableBusinessRegionSite.SITENAMEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property PLANTCODE() As String
            Get
                Try
                    Return CType(Me(Me.tableBusinessRegionSite.PLANTCODEColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLANTCODE' in table 'BusinessRegionSite' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableBusinessRegionSite.PLANTCODEColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property PROCESSED_FLAG() As String
            Get
                Try
                    Return CType(Me(Me.tableBusinessRegionSite.PROCESSED_FLAGColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROCESSED_FLAG' in table 'BusinessRegionSite' is DBNull.", e)
                End Try
            End Get
            Set(value As String)
                Me(Me.tableBusinessRegionSite.PROCESSED_FLAGColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsDIVISIONNull() As Boolean
            Return Me.IsNull(Me.tableBusinessRegionSite.DIVISIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetDIVISIONNull()
            Me(Me.tableBusinessRegionSite.DIVISIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function Is_REGIONNull() As Boolean
            Return Me.IsNull(Me.tableBusinessRegionSite.REGIONColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub Set_REGIONNull()
            Me(Me.tableBusinessRegionSite.REGIONColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSITENAMENull() As Boolean
            Return Me.IsNull(Me.tableBusinessRegionSite.SITENAMEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSITENAMENull()
            Me(Me.tableBusinessRegionSite.SITENAMEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsPLANTCODENull() As Boolean
            Return Me.IsNull(Me.tableBusinessRegionSite.PLANTCODEColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetPLANTCODENull()
            Me(Me.tableBusinessRegionSite.PLANTCODEColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsPROCESSED_FLAGNull() As Boolean
            Return Me.IsNull(Me.tableBusinessRegionSite.PROCESSED_FLAGColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetPROCESSED_FLAGNull()
            Me(Me.tableBusinessRegionSite.PROCESSED_FLAGColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class TaskHeaderRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As TaskHeaderRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As TaskHeaderRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As TaskHeaderRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class TaskHeaderBusinessManagersRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As TaskHeaderBusinessManagersRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As TaskHeaderBusinessManagersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As TaskHeaderBusinessManagersRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class TaskHeaderTaskTypesRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As TaskHeaderTaskTypesRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As TaskHeaderTaskTypesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As TaskHeaderTaskTypesRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class TaskHeaderTypeManagersRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As TaskHeaderTypeManagersRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As TaskHeaderTypeManagersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As TaskHeaderTypeManagersRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Public Class BusinessRegionSiteRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As BusinessRegionSiteRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal row As BusinessRegionSiteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Row() As BusinessRegionSiteRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace TaskHeaderDALTableAdapters

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class TaskHeaderTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TaskHeader"
            tableMapping.ColumnMappings.Add("BUSUNIT_AREA", "BUSUNIT_AREA")
            tableMapping.ColumnMappings.Add("LINE", "LINE")
            tableMapping.ColumnMappings.Add("SITENAME", "SITENAME")
            tableMapping.ColumnMappings.Add("ACTIVITYNAME", "ACTIVITYNAME")
            tableMapping.ColumnMappings.Add("STARTDATE", "STARTDATE")
            tableMapping.ColumnMappings.Add("ENDDATE", "ENDDATE")
            tableMapping.ColumnMappings.Add("CREATEDDATE", "CREATEDDATE")
            tableMapping.ColumnMappings.Add("ATTACHMENTCOUNT", "ATTACHMENTCOUNT")
            tableMapping.ColumnMappings.Add("EXTERNALSOURCENAME", "EXTERNALSOURCENAME")
            tableMapping.ColumnMappings.Add("TASKHEADERSEQID", "TASKHEADERSEQID")
            tableMapping.ColumnMappings.Add("TITLE", "TITLE")
            tableMapping.ColumnMappings.Add("EXTERNALREF", "EXTERNALREF")
            tableMapping.ColumnMappings.Add("SECURITYLEVEL", "SECURITYLEVEL")
            tableMapping.ColumnMappings.Add("ACTIVITYSEQID", "ACTIVITYSEQID")
            tableMapping.ColumnMappings.Add("PLANTCODE", "PLANTCODE")
            tableMapping.ColumnMappings.Add("CREATEDBY", "CREATEDBY")
            tableMapping.ColumnMappings.Add("LASTUPDATEUSERNAME", "LASTUPDATEUSERNAME")
            tableMapping.ColumnMappings.Add("REGION", "SITEREGION")
            tableMapping.ColumnMappings.Add("DIVISION", "DIVISION")
            tableMapping.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION")
            tableMapping.ColumnMappings.Add("LAST_REPLICATION_DATE", "LAST_REPLICATION_DATE")
            tableMapping.ColumnMappings.Add("EXTERNALSOURCESEQID", "EXTERNALSOURCESEQID")
            tableMapping.ColumnMappings.Add("LASTUPDATEDATE", "LASTUPDATEDATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(4) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTTASKHEADER.GETTASKHEADER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_TASKHEADER"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSTASKHEADER"
            param.DbType = Global.System.Data.DbType.[Object]
            param.oracledbtype = oracledbtype.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            Me._commandCollection(1) = New OracleCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "RELADMIN.MTTTASKHEADERUPDATE.CREATETASKHEADER"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_TITLE"
            param.oracledbtype = oracledbtype.NVarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_EXTERNALREF"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_EXTERNALSOURCE"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_STARTDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbType = OracleDbType.Date
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_ENDDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbType = OracleDbType.Date
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_SITEID"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_BUSINESSUNIT"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_LINE"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DESCRIPTION"
            param.DbType = Global.System.Data.DbType.String
            param.oracledbtype = oracledbtype.Nclob
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TYPE"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_ACTIVITY"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_CREATEDBY"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_CREATEDDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbType = OracleDbType.Date
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_TASKHEADERNUMBER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.oracledbtype = oracledbtype.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.oracledbtype = oracledbtype.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New OracleCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "RELADMIN.MTTTASKHEADER.DELETETASKHEADER"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_TASKHEADER"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_USERNAME"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.oracledbtype = oracledbtype.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New OracleCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "RELADMIN.MTTTASKHEADER.GETTASKHEADERBYUSERNAME"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_USERNAME"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSTASKHEADER"
            param.DbType = Global.System.Data.DbType.[Object]
            param.oracledbtype = oracledbtype.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(3).Parameters.Add(param)
            Me._commandCollection(4) = New OracleCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "RELADMIN.MTTTASKHEADER.UPDATETASKHEADER"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_PLANTCODE"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_STARTDATE"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_ENDDATE"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_BUSINESSUNIT"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_AREA"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_LINE"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TITLE"
            param.oracledbtype = oracledbtype.NVarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TYPE"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DESCRIPTION"
            param.DbType = Global.System.Data.DbType.String
            param.oracledbtype = oracledbtype.NClob
            'param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_USERNAME"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_LINEBREAK"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_SECURITYLEVEL"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_EXTERNALSOURCESEQID"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_EXTERNALREF"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_ACTIVITYSEQID"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TASKHEADER"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_TASKHEADER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.oracledbtype = oracledbtype.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.oracledbtype = oracledbtype.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(4).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetTaskHeaderByNumber(ByVal IN_TASKHEADER As String, ByRef RSTASKHEADER As Object) As TaskHeaderDAL.TaskHeaderDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_TASKHEADER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TASKHEADER, String)
            End If
            Dim dataTable As TaskHeaderDAL.TaskHeaderDataTable = New TaskHeaderDAL.TaskHeaderDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSTASKHEADER = Global.System.DBNull.Value
            Else
                RSTASKHEADER = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Overridable Overloads Function GetTaskHeaderByUserName(ByVal IN_USERNAME As String, ByRef RSTASKHEADER As Object) As TaskHeaderDAL.TaskHeaderDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (IN_USERNAME Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_USERNAME, String)
            End If
            Dim dataTable As TaskHeaderDAL.TaskHeaderDataTable = New TaskHeaderDAL.TaskHeaderDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSTASKHEADER = Global.System.DBNull.Value
            Else
                RSTASKHEADER = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function CreateTaskHeader(ByVal IN_TITLE As String, ByVal IN_EXTERNALREF As String, ByVal IN_EXTERNALSOURCE As String, ByVal IN_STARTDATE As Global.System.Nullable(Of Date), ByVal IN_ENDDATE As Global.System.Nullable(Of Date), ByVal IN_SITEID As String, ByVal IN_BUSINESSUNIT As String, ByVal IN_LINE As String, ByVal IN_DESCRIPTION As Object, ByVal IN_TYPE As String, ByVal IN_ACTIVITY As String, ByVal IN_CREATEDBY As String, ByVal IN_CREATEDDATE As Global.System.Nullable(Of Date), ByRef OUT_TASKHEADERNUMBER As Global.System.Nullable(Of Decimal), ByRef OUT_STATUS As Global.System.Nullable(Of Decimal)) As Object
            Dim command As OracleCommand = Me.CommandCollection(1)
            If (IN_TITLE Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(IN_TITLE, String)
            End If
            If (IN_EXTERNALREF Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(IN_EXTERNALREF, String)
            End If
            If (IN_EXTERNALSOURCE Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(IN_EXTERNALSOURCE, String)
            End If
            If (IN_STARTDATE.HasValue = True) Then
                command.Parameters(3).Value = CType(IN_STARTDATE.Value, Date)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IN_ENDDATE.HasValue = True) Then
                command.Parameters(4).Value = CType(IN_ENDDATE.Value, Date)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (IN_SITEID Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(IN_SITEID, String)
            End If
            If (IN_BUSINESSUNIT Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(IN_BUSINESSUNIT, String)
            End If
            If (IN_LINE Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(IN_LINE, String)
            End If
            If (IN_DESCRIPTION Is Nothing) OrElse IN_DESCRIPTION.ToString.Length = 0 Then
                command.Parameters(8).Value = " " 'IN_TITLE ' String.Empty 'Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(IN_DESCRIPTION, Object)
            End If
            If (IN_TYPE Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(IN_TYPE, String)
            End If
            If (IN_ACTIVITY Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(IN_ACTIVITY, String)
            End If
            If (IN_CREATEDBY Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(IN_CREATEDBY, String)
            End If
            If (IN_CREATEDDATE.HasValue = True) Then
                command.Parameters(12).Value = CType(IN_CREATEDDATE.Value, Date)
            Else
                command.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((command.Parameters(13).Value Is Nothing) _
                        OrElse (command.Parameters(13).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_TASKHEADERNUMBER = New Global.System.Nullable(Of Decimal)
            Else
                OUT_TASKHEADERNUMBER = New Global.System.Nullable(Of Decimal)(CType(command.Parameters(13).Value, Decimal))
            End If
            If ((command.Parameters(14).Value Is Nothing) _
                        OrElse (command.Parameters(14).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_STATUS = New Global.System.Nullable(Of Decimal)
            Else
                OUT_STATUS = New Global.System.Nullable(Of Decimal)(CType(command.Parameters(14).Value, Decimal))
            End If
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        ' <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function DeleteTaskHeader(ByVal IN_TASKHEADER As String, ByVal IN_USERNAME As String, ByRef OUT_STATUS As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As OracleCommand = Me.CommandCollection(2)
            If (IN_TASKHEADER Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(IN_TASKHEADER, String)
            End If
            If (IN_USERNAME Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(IN_USERNAME, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Integer
            Try
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((command.Parameters(2).Value Is Nothing) _
                        OrElse (command.Parameters(2).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_STATUS = New Global.System.Nullable(Of Decimal)
            Else
                OUT_STATUS = New Global.System.Nullable(Of Decimal)(CType(command.Parameters(2).Value, Decimal))
            End If
            Return returnValue
        End Function

        '<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function SaveTaskHeader( _
                    ByVal IN_PLANTCODE As String, _
                    ByVal IN_STARTDATE As String, _
                    ByVal IN_ENDDATE As String, _
                    ByVal IN_BUSINESSUNIT As String, _
                    ByVal IN_AREA As String, _
                    ByVal IN_LINE As String, _
                    ByVal IN_TITLE As String, _
                    ByVal IN_TYPE As String, _
                    ByVal IN_DESCRIPTION As String, _
                    ByVal IN_USERNAME As String, _
                    ByVal IN_LINEBREAK As String, _
                    ByVal IN_SECURITYLEVEL As String, _
                    ByVal IN_EXTERNALSOURCESEQID As String, _
                    ByVal IN_EXTERNALREF As String, _
                    ByVal IN_ACTIVITYSEQID As String, _
                    ByVal IN_TASKHEADER As String, _
                    ByRef OUT_TASKHEADER As Decimal, _
                    ByRef OUT_STATUS As Decimal) As Object
            Dim command As OracleCommand = Me.CommandCollection(4)
            If (IN_PLANTCODE Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(IN_PLANTCODE, String)
            End If
            If (IN_STARTDATE Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(IN_STARTDATE, String)
            End If
            If (IN_ENDDATE Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(IN_ENDDATE, String)
            End If
            If (IN_BUSINESSUNIT Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(IN_BUSINESSUNIT, String)
            End If
            If (IN_AREA Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(IN_AREA, String)
            End If
            If (IN_LINE Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(IN_LINE, String)
            End If
            If (IN_TITLE Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(IN_TITLE, String)
            End If
            If (IN_TYPE Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(IN_TYPE, String)
            End If
            If (IN_DESCRIPTION Is Nothing) OrElse IN_DESCRIPTION.Length = 0 Then
                command.Parameters(8).Value = " " 'IN_TITLE 'Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(IN_DESCRIPTION, String)
            End If
            If (IN_USERNAME Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(IN_USERNAME, String)
            End If
            If (IN_LINEBREAK Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(IN_LINEBREAK, String)
            End If
            If (IN_SECURITYLEVEL Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(IN_SECURITYLEVEL, String)
            End If
            If (IN_EXTERNALSOURCESEQID Is Nothing) Then
                command.Parameters(12).Value = Global.System.DBNull.Value
            Else
                command.Parameters(12).Value = CType(IN_EXTERNALSOURCESEQID, String)
            End If
            If (IN_EXTERNALREF Is Nothing) Then
                command.Parameters(13).Value = Global.System.DBNull.Value
            Else
                command.Parameters(13).Value = CType(IN_EXTERNALREF, String)
            End If
            If (IN_ACTIVITYSEQID Is Nothing) Then
                command.Parameters(14).Value = Global.System.DBNull.Value
            Else
                command.Parameters(14).Value = CType(IN_ACTIVITYSEQID, String)
            End If
            If (IN_TASKHEADER Is Nothing) Then
                command.Parameters(15).Value = Global.System.DBNull.Value
            Else
                command.Parameters(15).Value = CType(IN_TASKHEADER, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((command.Parameters(16).Value Is Nothing) _
                        OrElse (command.Parameters(16).Value.GetType Is GetType(Global.System.DBNull))) Then
                Throw New Global.System.Data.StrongTypingException("The value for parameter 'OUT_TASKHEADER' is DBNull.", Nothing)
            Else
                OUT_TASKHEADER = CType(command.Parameters(16).Value, Decimal)
            End If
            If ((command.Parameters(17).Value Is Nothing) _
                        OrElse (command.Parameters(17).Value.GetType Is GetType(Global.System.DBNull))) Then
                Throw New Global.System.Data.StrongTypingException("The value for parameter 'OUT_STATUS' is DBNull.", Nothing)
            Else
                OUT_STATUS = CType(command.Parameters(17).Value, Decimal)
            End If
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class TaskHeaderBusinessManagersTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TaskHeaderBusinessManagers"
            tableMapping.ColumnMappings.Add("NAME", "NAME")
            tableMapping.ColumnMappings.Add("USERNAME", "USERNAME")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(0) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTTASKHEADER.GETTASKHEADERBUSINESSMANAGERS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_TASKHEADER"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSBUSMGRS"
            param.DbType = Global.System.Data.DbType.[Object]
            param.oracledbtype = oracledbtype.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetTaskHeaderBusinessManagers(ByVal IN_TASKHEADER As String, ByRef RSBUSMGRS As Object) As TaskHeaderDAL.TaskHeaderBusinessManagersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_TASKHEADER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TASKHEADER, String)
            End If
            Dim dataTable As TaskHeaderDAL.TaskHeaderBusinessManagersDataTable = New TaskHeaderDAL.TaskHeaderBusinessManagersDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSBUSMGRS = Global.System.DBNull.Value
            Else
                RSBUSMGRS = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class TaskHeaderTaskTypesTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TaskHeaderTaskTypes"
            tableMapping.ColumnMappings.Add("TASKTYPESEQID", "TASKTYPESEQID")
            tableMapping.ColumnMappings.Add("TASKTYPENAME", "TASKTYPENAME")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(0) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTTASKHEADER.GETTASKHEADERTASKTYPES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_TASKHEADER"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSTASKTYPES"
            param.DbType = Global.System.Data.DbType.[Object]
            param.oracledbtype = oracledbtype.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetTaskHeaderTaskTypes(ByVal IN_TASKHEADER As String, ByRef RSTASKTYPES As Object) As TaskHeaderDAL.TaskHeaderTaskTypesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_TASKHEADER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TASKHEADER, String)
            End If
            Dim dataTable As TaskHeaderDAL.TaskHeaderTaskTypesDataTable = New TaskHeaderDAL.TaskHeaderTaskTypesDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSTASKTYPES = Global.System.DBNull.Value
            Else
                RSTASKTYPES = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class TaskHeaderTypeManagersTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TaskHeaderTypeManagers"
            tableMapping.ColumnMappings.Add("NAME", "NAME")
            tableMapping.ColumnMappings.Add("USERNAME", "USERNAME")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(0) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTTASKHEADER.GETTASKHEADERTYPEMANAGERS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_TASKHEADER"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSTYPEMGRS"
            param.DbType = Global.System.Data.DbType.[Object]
            param.oracledbtype = oracledbtype.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetTaskHeaderTypeManagers(ByVal IN_TASKHEADER As String, ByRef RSTYPEMGRS As Object) As TaskHeaderDAL.TaskHeaderTypeManagersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_TASKHEADER Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TASKHEADER, String)
            End If
            Dim dataTable As TaskHeaderDAL.TaskHeaderTypeManagersDataTable = New TaskHeaderDAL.TaskHeaderTypeManagersDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSTYPEMGRS = Global.System.DBNull.Value
            Else
                RSTYPEMGRS = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class BusinessRegionSiteTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As OracleDataAdapter

        Private _connection As OracleConnection

        Private _commandCollection() As OracleCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private ReadOnly Property Adapter() As OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Connection() As OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(ByVal value As OracleConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(ByVal value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitAdapter()
            Me._adapter = New OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BusinessRegionSite"
            tableMapping.ColumnMappings.Add("DIVISION", "DIVISION")
            tableMapping.ColumnMappings.Add("REGION", "REGION")
            tableMapping.ColumnMappings.Add("SITENAME", "SITENAME")
            tableMapping.ColumnMappings.Add("PLANTCODE", "PLANTCODE")
            tableMapping.ColumnMappings.Add("PROCESSED_FLAG", "PROCESSED_FLAG")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitConnection()
            Me._connection = New OracleConnection
            Me._connection.ConnectionString = ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New OracleCommand(0) {}
            Me._commandCollection(0) = New OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "RELADMIN.MTTREPLICATIONTASKS.GETBUSINESSREGIONSITELIST"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_TEMPLATENBR"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.oracledbtype = oracledbtype.Float
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "RSFACILITY"
            param.DbType = Global.System.Data.DbType.[Object]
            param.oracledbtype = oracledbtype.Cursor
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetBusinessRegionSiteList(ByVal IN_TEMPLATENBR As Global.System.Nullable(Of Decimal), ByRef RSFACILITY As Object) As TaskHeaderDAL.BusinessRegionSiteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (IN_TEMPLATENBR.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(IN_TEMPLATENBR.Value, Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As TaskHeaderDAL.BusinessRegionSiteDataTable = New TaskHeaderDAL.BusinessRegionSiteDataTable
            Me.Adapter.Fill(dataTable)
            If ((Me.Adapter.SelectCommand.Parameters(1).Value Is Nothing) _
                        OrElse (Me.Adapter.SelectCommand.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                RSFACILITY = Global.System.DBNull.Value
            Else
                RSFACILITY = CType(Me.Adapter.SelectCommand.Parameters(1).Value, Object)
            End If
            Return dataTable
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class QueriesTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private _commandCollection() As Global.System.Data.IDbCommand

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.IDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.IDbCommand(3) {}
            Me._commandCollection(0) = New OracleCommand
            CType(Me._commandCollection(0), OracleCommand).Connection = New OracleConnection(ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString)
            CType(Me._commandCollection(0), OracleCommand).CommandText = "RELADMIN.MTTREPLICATIONTASKS.ADDREPLICATIONREQUEST"
            CType(Me._commandCollection(0), OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As OracleParameter = New OracleParameter
            param.ParameterName = "IN_TEMPLATENBR"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.oracledbtype = oracledbtype.Float
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(0), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_PLANTCODE"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(0), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_USERNAME"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(0), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.oracledbtype = oracledbtype.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(0), OracleCommand).Parameters.Add(param)
            Me._commandCollection(1) = New OracleCommand
            CType(Me._commandCollection(1), OracleCommand).Connection = New OracleConnection(ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString)
            CType(Me._commandCollection(1), OracleCommand).CommandText = "RELADMIN.MTTBATCHREPLICATION.PROCESSREPLICATIONTASKS"
            CType(Me._commandCollection(1), OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_TEMPLATETASKNBR"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(1), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.oracledbtype = oracledbtype.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(1), OracleCommand).Parameters.Add(param)
            Me._commandCollection(2) = New OracleCommand
            CType(Me._commandCollection(2), OracleCommand).Connection = New OracleConnection(ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString)
            CType(Me._commandCollection(2), OracleCommand).CommandText = "RELADMIN.MTTTASKHEADERUPDATE.CREATEIRISTASKHEADER"
            CType(Me._commandCollection(2), OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_TITLE"
            param.oracledbtype = oracledbtype.NVarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(2), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_EXTERNALREF"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(2), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_EXTERNALSOURCE"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(2), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_STARTDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbType = OracleDbType.Date
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(2), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_ENDDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbType = OracleDbType.Date
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(2), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_SITEID"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(2), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_BUSINESSUNIT"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(2), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_LINE"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(2), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DESCRIPTION"
            param.DbType = DbType.String
            param.oracledbtype = oracledbtype.NClob
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(2), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TYPE"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(2), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_ACTIVITY"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(2), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_CREATEDBY"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(2), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_CREATEDDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbType = OracleDbType.Date
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(2), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TASKHEADERNUMBER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.oracledbtype = oracledbtype.Float
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(2), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_TASKHEADERNUMBER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.oracledbtype = oracledbtype.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(2), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.oracledbtype = oracledbtype.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(2), OracleCommand).Parameters.Add(param)
            Me._commandCollection(3) = New OracleCommand
            CType(Me._commandCollection(3), OracleCommand).Connection = New OracleConnection(ConfigurationManager.ConnectionStrings.Item("DatabaseConnection").ConnectionString)
            CType(Me._commandCollection(3), OracleCommand).CommandText = "RELADMIN.MTTTASKHEADERUPDATE.CREATETASKHEADER"
            CType(Me._commandCollection(3), OracleCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            param = New OracleParameter
            param.ParameterName = "IN_TITLE"
            param.oracledbtype = oracledbtype.NVarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(3), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_EXTERNALREF"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(3), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_EXTERNALSOURCE"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(3), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_STARTDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbType = OracleDbType.Date
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(3), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_ENDDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbType = OracleDbType.Date
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(3), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_SITEID"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(3), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_BUSINESSUNIT"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(3), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_LINE"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(3), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_DESCRIPTION"
            param.DbType = Global.System.Data.DbType.String
            param.oracledbtype = oracledbtype.NClob
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(3), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_TYPE"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(3), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_ACTIVITY"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(3), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_CREATEDBY"
            param.oracledbtype = oracledbtype.VarChar
            param.Size = 32768
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(3), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "IN_CREATEDDATE"
            param.DbType = Global.System.Data.DbType.[Date]
            param.OracleDbType = OracleDbType.Date
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(3), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_TASKHEADERNUMBER"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.oracledbtype = oracledbtype.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(3), OracleCommand).Parameters.Add(param)
            param = New OracleParameter
            param.ParameterName = "OUT_STATUS"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.oracledbtype = oracledbtype.Float
            param.Direction = Global.System.Data.ParameterDirection.Output
            param.IsNullable = True
            param.SourceColumn = Nothing
            CType(Me._commandCollection(3), OracleCommand).Parameters.Add(param)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function AddReplicationRequest(ByVal IN_TEMPLATENBR As Global.System.Nullable(Of Decimal), ByVal IN_PLANTCODE As String, ByVal IN_USERNAME As String, ByRef OUT_STATUS As Global.System.Nullable(Of Decimal)) As Object
            Dim command As OracleCommand = CType(Me.CommandCollection(0), OracleCommand)
            If (IN_TEMPLATENBR.HasValue = True) Then
                command.Parameters(0).Value = CType(IN_TEMPLATENBR.Value, Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (IN_PLANTCODE Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(IN_PLANTCODE, String)
            End If
            If (IN_USERNAME Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(IN_USERNAME, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((command.Parameters(3).Value Is Nothing) _
                        OrElse (command.Parameters(3).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_STATUS = New Global.System.Nullable(Of Decimal)
            Else
                OUT_STATUS = New Global.System.Nullable(Of Decimal)(CType(command.Parameters(3).Value, Decimal))
            End If
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function ProcessReplicationTasks(ByVal IN_TEMPLATETASKNBR As String, ByRef OUT_STATUS As Global.System.Nullable(Of Decimal)) As Object
            Dim command As OracleCommand = CType(Me.CommandCollection(1), OracleCommand)
            If (IN_TEMPLATETASKNBR Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(IN_TEMPLATETASKNBR, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Object
            Try
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((command.Parameters(1).Value Is Nothing) _
                        OrElse (command.Parameters(1).Value.GetType Is GetType(Global.System.DBNull))) Then
                OUT_STATUS = New Global.System.Nullable(Of Decimal)
            Else
                OUT_STATUS = New Global.System.Nullable(Of Decimal)(CType(command.Parameters(1).Value, Decimal))
            End If
            If ((returnValue Is Nothing) _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue, Object)
            End If
        End Function

        '<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
        <Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function CreateIRISTaskHeader( _
                   ByVal IN_TITLE As String, _
                   ByVal IN_EXTERNALREF As String, _
                   ByVal IN_EXTERNALSOURCE As String, _
                   ByVal IN_STARTDATE As Global.System.Nullable(Of Date), _
                   ByVal IN_ENDDATE As Global.System.Nullable(Of Date), _
                   ByVal IN_SITEID As String, _
                   ByVal IN_BUSINESSUNIT As String, _
                   ByVal IN_LINE As String, _
                   ByVal IN_DESCRIPTION As Object, _
                   ByVal IN_TYPE As String, _
                   ByVal IN_ACTIVITY As String, _
                   ByVal IN_CREATEDBY As String, _
                   ByVal IN_CREATEDDATE As Global.System.Nullable(Of Date), _
                   ByVal IN_TASKHEADERNUMBER As Global.System.Nullable(Of Decimal), _
                   ByRef OUT_TASKHEADERNUMBER As Decimal, _
                   ByRef OUT_STATUS As Decimal) As Integer
            Dim command As OracleCommand = CType(Me.CommandCollection(2), OracleCommand)
            If (IN_TITLE Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(IN_TITLE, String)
            End If
            If (IN_EXTERNALREF Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(IN_EXTERNALREF, String)
            End If
            If (IN_EXTERNALSOURCE Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(IN_EXTERNALSOURCE, String)
            End If
            If (IN_STARTDATE.HasValue = True) Then
                command.Parameters(3).Value = CType(IN_STARTDATE.Value, Date)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IN_ENDDATE.HasValue = True) Then
                command.Parameters(4).Value = CType(IN_ENDDATE.Value, Date)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (IN_SITEID Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(IN_SITEID, String)
            End If
            If (IN_BUSINESSUNIT Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(IN_BUSINESSUNIT, String)
            End If
            If (IN_LINE Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(IN_LINE, String)
            End If
            If (IN_DESCRIPTION Is Nothing) OrElse IN_DESCRIPTION.ToString.Length = 0 Then
                command.Parameters(8).Value = " " 'Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(IN_DESCRIPTION, Object)
            End If
            If (IN_TYPE Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(IN_TYPE, String)
            End If
            If (IN_ACTIVITY Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(IN_ACTIVITY, String)
            End If
            If (IN_CREATEDBY Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(IN_CREATEDBY, String)
            End If
            If (IN_CREATEDDATE.HasValue = True) Then
                command.Parameters(12).Value = CType(IN_CREATEDDATE.Value, Date)
            Else
                command.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (IN_TASKHEADERNUMBER.HasValue = True) Then
                command.Parameters(13).Value = CType(IN_TASKHEADERNUMBER.Value, Decimal)
            Else
                command.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Integer
            Try
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((command.Parameters(14).Value Is Nothing) _
                        OrElse (command.Parameters(14).Value.GetType Is GetType(Global.System.DBNull))) Then
                Throw New Global.System.Data.StrongTypingException("The value for parameter 'OUT_TASKHEADERNUMBER' is DBNull.", Nothing)
            Else
                OUT_TASKHEADERNUMBER = CType(command.Parameters(14).Value, Decimal)
            End If
            If ((command.Parameters(15).Value Is Nothing) _
                        OrElse (command.Parameters(15).Value.GetType Is GetType(Global.System.DBNull))) Then
                Throw New Global.System.Data.StrongTypingException("The value for parameter 'OUT_STATUS' is DBNull.", Nothing)
            Else
                OUT_STATUS = CType(command.Parameters(15).Value, Decimal)
            End If
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function CreateMTTTaskHeader(ByVal IN_TITLE As String, ByVal IN_EXTERNALREF As String, ByVal IN_EXTERNALSOURCE As String, ByVal IN_STARTDATE As Global.System.Nullable(Of Date), ByVal IN_ENDDATE As Global.System.Nullable(Of Date), ByVal IN_SITEID As String, ByVal IN_BUSINESSUNIT As String, ByVal IN_LINE As String, ByVal IN_DESCRIPTION As Object, ByVal IN_TYPE As String, ByVal IN_ACTIVITY As String, ByVal IN_CREATEDBY As String, ByVal IN_CREATEDDATE As Global.System.Nullable(Of Date), ByRef OUT_TASKHEADERNUMBER As Decimal, ByRef OUT_STATUS As Decimal) As Integer
            Dim command As OracleCommand = CType(Me.CommandCollection(3), OracleCommand)
            If (IN_TITLE Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(IN_TITLE, String)
            End If
            If (IN_EXTERNALREF Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(IN_EXTERNALREF, String)
            End If
            If (IN_EXTERNALSOURCE Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(IN_EXTERNALSOURCE, String)
            End If
            If (IN_STARTDATE.HasValue = True) Then
                command.Parameters(3).Value = CType(IN_STARTDATE.Value, Date)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IN_ENDDATE.HasValue = True) Then
                command.Parameters(4).Value = CType(IN_ENDDATE.Value, Date)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (IN_SITEID Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(IN_SITEID, String)
            End If
            If (IN_BUSINESSUNIT Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(IN_BUSINESSUNIT, String)
            End If
            If (IN_LINE Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(IN_LINE, String)
            End If
            If (IN_DESCRIPTION Is Nothing) OrElse IN_DESCRIPTION.ToString.Length = 0 Then
                command.Parameters(8).Value = " " 'IN_TITLE  'Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(IN_DESCRIPTION, Object)
            End If
            If (IN_TYPE Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(IN_TYPE, String)
            End If
            If (IN_ACTIVITY Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(IN_ACTIVITY, String)
            End If
            If (IN_CREATEDBY Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(IN_CREATEDBY, String)
            End If
            If (IN_CREATEDDATE.HasValue = True) Then
                command.Parameters(12).Value = CType(IN_CREATEDDATE.Value, Date)
            Else
                command.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open()
            End If
            Dim returnValue As Integer
            Try
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close()
                End If
            End Try
            If ((command.Parameters(13).Value Is Nothing) _
                        OrElse (command.Parameters(13).Value.GetType Is GetType(Global.System.DBNull))) Then
                Throw New Global.System.Data.StrongTypingException("The value for parameter 'OUT_TASKHEADERNUMBER' is DBNull.", Nothing)
            Else
                OUT_TASKHEADERNUMBER = CType(command.Parameters(13).Value, Decimal)
            End If
            If ((command.Parameters(14).Value Is Nothing) _
                        OrElse (command.Parameters(14).Value.GetType Is GetType(Global.System.DBNull))) Then
                Throw New Global.System.Data.StrongTypingException("The value for parameter 'OUT_STATUS' is DBNull.", Nothing)
            Else
                OUT_STATUS = CType(command.Parameters(14).Value, Decimal)
            End If
            Return returnValue
        End Function
    End Class
End Namespace
